"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("./logger"));

var _tccDb = _interopRequireDefault(require("./tcc-db"));

class Calendar {
  constructor(xcodeVersion, sharedResourcesDir) {
    this.xcodeVersion = xcodeVersion;
    this.tccDb = new _tccDb.default(xcodeVersion, sharedResourcesDir);
  }

  async getCalendarRowCount(bundleID) {
    const count = await this.tccDb.execQuery(`SELECT count(*) FROM access WHERE client='?' AND service='kTCCServiceCalendar';`, bundleID);
    return parseInt(count.split('=')[1], 10);
  }

  async hasCalendarAccess(bundleID) {
    const count = await this.tccDb.execQuery(`SELECT count(*) FROM access WHERE client='?' AND allowed=1 AND service='kTCCServiceCalendar';`, bundleID);
    return parseInt(count.split('=')[1], 10) > 0;
  }

  async enableCalendarAccess(bundleID) {
    let query;

    if ((await this.getCalendarRowCount(bundleID)) > 0) {
      query = `UPDATE 'access' SET
        service='kTCCServiceCalendar',
        client_type=0,
        allowed=1,
        prompt_count=1,
        csreq=0
      WHERE client='?' AND service='kTCCServiceCalendar'`;
    } else {
      let count = this.columnCount;

      if (!_lodash.default.isNumber(this.columnCount)) {
        try {
          const stdout = await this.tccDb.execQuery(`pragma table_info('access')`);
          count = this.columnCount = stdout.trim().split('cid').filter(record => !_lodash.default.isEmpty(record)).length;
        } catch (err) {
          count = this.xcodeVersion.major < 10 ? 7 : 11;

          _logger.default.warn(`Unable to find Calendar access column count: ${err.message}`);
        }
      }

      query = `INSERT INTO 'access' VALUES ('kTCCServiceCalendar', '?', 0, 1, 1, ${_lodash.default.range(0, count - 5, 0).join(', ')});`;
    }

    await this.tccDb.execQuery(query, bundleID);
  }

  async disableCalendarAccess(bundleID) {
    if ((await this.getCalendarRowCount(bundleID)) > 0) {
      await this.tccDb.execQuery(`DELETE FROM 'access' WHERE client='?' AND service='kTCCServiceCalendar'`, bundleID);
    }
  }

}

var _default = Calendar;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDYWxlbmRhciIsImNvbnN0cnVjdG9yIiwieGNvZGVWZXJzaW9uIiwic2hhcmVkUmVzb3VyY2VzRGlyIiwidGNjRGIiLCJUQ0NEQiIsImdldENhbGVuZGFyUm93Q291bnQiLCJidW5kbGVJRCIsImNvdW50IiwiZXhlY1F1ZXJ5IiwicGFyc2VJbnQiLCJzcGxpdCIsImhhc0NhbGVuZGFyQWNjZXNzIiwiZW5hYmxlQ2FsZW5kYXJBY2Nlc3MiLCJxdWVyeSIsImNvbHVtbkNvdW50IiwiXyIsImlzTnVtYmVyIiwic3Rkb3V0IiwidHJpbSIsImZpbHRlciIsInJlY29yZCIsImlzRW1wdHkiLCJsZW5ndGgiLCJlcnIiLCJtYWpvciIsImxvZyIsIndhcm4iLCJtZXNzYWdlIiwicmFuZ2UiLCJqb2luIiwiZGlzYWJsZUNhbGVuZGFyQWNjZXNzIl0sInNvdXJjZXMiOlsiLi4vLi4vbGliL2NhbGVuZGFyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgbG9nIGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCBUQ0NEQiBmcm9tICcuL3RjYy1kYic7XG5cblxuY2xhc3MgQ2FsZW5kYXIge1xuXG4gIGNvbnN0cnVjdG9yICh4Y29kZVZlcnNpb24sIHNoYXJlZFJlc291cmNlc0Rpcikge1xuICAgIHRoaXMueGNvZGVWZXJzaW9uID0geGNvZGVWZXJzaW9uO1xuICAgIHRoaXMudGNjRGIgPSBuZXcgVENDREIoeGNvZGVWZXJzaW9uLCBzaGFyZWRSZXNvdXJjZXNEaXIpO1xuICB9XG5cbiAgYXN5bmMgZ2V0Q2FsZW5kYXJSb3dDb3VudCAoYnVuZGxlSUQpIHtcbiAgICBjb25zdCBjb3VudCA9IGF3YWl0IHRoaXMudGNjRGIuZXhlY1F1ZXJ5KGBTRUxFQ1QgY291bnQoKikgRlJPTSBhY2Nlc3MgV0hFUkUgY2xpZW50PSc/JyBBTkQgc2VydmljZT0na1RDQ1NlcnZpY2VDYWxlbmRhcic7YCwgYnVuZGxlSUQpO1xuICAgIHJldHVybiBwYXJzZUludChjb3VudC5zcGxpdCgnPScpWzFdLCAxMCk7XG4gIH1cblxuICBhc3luYyBoYXNDYWxlbmRhckFjY2VzcyAoYnVuZGxlSUQpIHtcbiAgICBjb25zdCBjb3VudCA9IGF3YWl0IHRoaXMudGNjRGIuZXhlY1F1ZXJ5KGBTRUxFQ1QgY291bnQoKikgRlJPTSBhY2Nlc3MgV0hFUkUgY2xpZW50PSc/JyBBTkQgYWxsb3dlZD0xIEFORCBzZXJ2aWNlPSdrVENDU2VydmljZUNhbGVuZGFyJztgLCBidW5kbGVJRCk7XG4gICAgcmV0dXJuIHBhcnNlSW50KGNvdW50LnNwbGl0KCc9JylbMV0sIDEwKSA+IDA7XG4gIH1cblxuICBhc3luYyBlbmFibGVDYWxlbmRhckFjY2VzcyAoYnVuZGxlSUQpIHtcbiAgICBsZXQgcXVlcnk7XG4gICAgaWYgKChhd2FpdCB0aGlzLmdldENhbGVuZGFyUm93Q291bnQoYnVuZGxlSUQpKSA+IDApIHtcbiAgICAgIHF1ZXJ5ID0gYFVQREFURSAnYWNjZXNzJyBTRVRcbiAgICAgICAgc2VydmljZT0na1RDQ1NlcnZpY2VDYWxlbmRhcicsXG4gICAgICAgIGNsaWVudF90eXBlPTAsXG4gICAgICAgIGFsbG93ZWQ9MSxcbiAgICAgICAgcHJvbXB0X2NvdW50PTEsXG4gICAgICAgIGNzcmVxPTBcbiAgICAgIFdIRVJFIGNsaWVudD0nPycgQU5EIHNlcnZpY2U9J2tUQ0NTZXJ2aWNlQ2FsZW5kYXInYDtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IGNvdW50ID0gdGhpcy5jb2x1bW5Db3VudDtcbiAgICAgIGlmICghXy5pc051bWJlcih0aGlzLmNvbHVtbkNvdW50KSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IHN0ZG91dCA9IGF3YWl0IHRoaXMudGNjRGIuZXhlY1F1ZXJ5KGBwcmFnbWEgdGFibGVfaW5mbygnYWNjZXNzJylgKTtcbiAgICAgICAgICAvLyBzdGRvdXQgaGFzIGEgbnVtYmVyIG9mIHJlY29yZHMsIGVhY2ggc3RhcnRpbmcgd2l0aCBgY2lkYFxuICAgICAgICAgIC8vICAgICAgIGNpZCA9IDBcbiAgICAgICAgICAvLyAgICAgICBuYW1lID0gc2VydmljZVxuICAgICAgICAgIC8vICAgICAgIHR5cGUgPSBURVhUXG4gICAgICAgICAgLy8gICAgICAgbm90bnVsbCA9IDFcbiAgICAgICAgICAvLyAgICAgICBkZmx0X3ZhbHVlID1cbiAgICAgICAgICAvLyAgICAgICBwayA9IDFcbiAgICAgICAgICAvL1xuICAgICAgICAgIC8vICAgICAgIGNpZCA9IDFcbiAgICAgICAgICAvLyAgICAgICBuYW1lID0gY2xpZW50XG4gICAgICAgICAgLy8gICAgICAgdHlwZSA9IFRFWFRcbiAgICAgICAgICAvLyAgICAgICBub3RudWxsID0gMVxuICAgICAgICAgIC8vICAgICAgIGRmbHRfdmFsdWUgPVxuICAgICAgICAgIC8vICAgICAgIHBrID0gMlxuICAgICAgICAgIGNvdW50ID0gdGhpcy5jb2x1bW5Db3VudCA9XG4gICAgICAgICAgICBzdGRvdXRcbiAgICAgICAgICAgICAgLnRyaW0oKVxuICAgICAgICAgICAgICAvLyBnZXQgZWFjaCByZWNvcmQncyBiZWdpbm5pbmdcbiAgICAgICAgICAgICAgLnNwbGl0KCdjaWQnKVxuICAgICAgICAgICAgICAvLyByZW1vdmUgdGhlIGVtcHR5IHJvdyAodXN1YWxseSwgdGhlIGZpcnN0KVxuICAgICAgICAgICAgICAuZmlsdGVyKChyZWNvcmQpID0+ICFfLmlzRW1wdHkocmVjb3JkKSlcbiAgICAgICAgICAgICAgLmxlbmd0aDtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgLy8gdXNlIGRlZmF1bHRzLCBidXQgZG8gbm90IHNhdmVcbiAgICAgICAgICBjb3VudCA9IHRoaXMueGNvZGVWZXJzaW9uLm1ham9yIDwgMTAgPyA3IDogMTE7XG4gICAgICAgICAgbG9nLndhcm4oYFVuYWJsZSB0byBmaW5kIENhbGVuZGFyIGFjY2VzcyBjb2x1bW4gY291bnQ6ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gZmlsbCBpbiB0aGUgcXVlcnkgd2l0aCAwJ3MgZm9yIGNvbHVtbnMgYWZ0ZXIgdGhlIDUgd2UgY2FyZSBhYm91dFxuICAgICAgcXVlcnkgPSBgSU5TRVJUIElOVE8gJ2FjY2VzcycgVkFMVUVTICgna1RDQ1NlcnZpY2VDYWxlbmRhcicsICc/JywgMCwgMSwgMSwgJHtfLnJhbmdlKDAsIGNvdW50IC0gNSwgMCkuam9pbignLCAnKX0pO2A7XG4gICAgfVxuICAgIGF3YWl0IHRoaXMudGNjRGIuZXhlY1F1ZXJ5KHF1ZXJ5LCBidW5kbGVJRCk7XG4gIH1cblxuICBhc3luYyBkaXNhYmxlQ2FsZW5kYXJBY2Nlc3MgKGJ1bmRsZUlEKSB7XG4gICAgaWYgKChhd2FpdCB0aGlzLmdldENhbGVuZGFyUm93Q291bnQoYnVuZGxlSUQpKSA+IDApIHtcbiAgICAgIGF3YWl0IHRoaXMudGNjRGIuZXhlY1F1ZXJ5KGBERUxFVEUgRlJPTSAnYWNjZXNzJyBXSEVSRSBjbGllbnQ9Jz8nIEFORCBzZXJ2aWNlPSdrVENDU2VydmljZUNhbGVuZGFyJ2AsIGJ1bmRsZUlEKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2FsZW5kYXI7Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUdBLE1BQU1BLFFBQU4sQ0FBZTtFQUViQyxXQUFXLENBQUVDLFlBQUYsRUFBZ0JDLGtCQUFoQixFQUFvQztJQUM3QyxLQUFLRCxZQUFMLEdBQW9CQSxZQUFwQjtJQUNBLEtBQUtFLEtBQUwsR0FBYSxJQUFJQyxjQUFKLENBQVVILFlBQVYsRUFBd0JDLGtCQUF4QixDQUFiO0VBQ0Q7O0VBRXdCLE1BQW5CRyxtQkFBbUIsQ0FBRUMsUUFBRixFQUFZO0lBQ25DLE1BQU1DLEtBQUssR0FBRyxNQUFNLEtBQUtKLEtBQUwsQ0FBV0ssU0FBWCxDQUFzQixpRkFBdEIsRUFBd0dGLFFBQXhHLENBQXBCO0lBQ0EsT0FBT0csUUFBUSxDQUFDRixLQUFLLENBQUNHLEtBQU4sQ0FBWSxHQUFaLEVBQWlCLENBQWpCLENBQUQsRUFBc0IsRUFBdEIsQ0FBZjtFQUNEOztFQUVzQixNQUFqQkMsaUJBQWlCLENBQUVMLFFBQUYsRUFBWTtJQUNqQyxNQUFNQyxLQUFLLEdBQUcsTUFBTSxLQUFLSixLQUFMLENBQVdLLFNBQVgsQ0FBc0IsK0ZBQXRCLEVBQXNIRixRQUF0SCxDQUFwQjtJQUNBLE9BQU9HLFFBQVEsQ0FBQ0YsS0FBSyxDQUFDRyxLQUFOLENBQVksR0FBWixFQUFpQixDQUFqQixDQUFELEVBQXNCLEVBQXRCLENBQVIsR0FBb0MsQ0FBM0M7RUFDRDs7RUFFeUIsTUFBcEJFLG9CQUFvQixDQUFFTixRQUFGLEVBQVk7SUFDcEMsSUFBSU8sS0FBSjs7SUFDQSxJQUFJLENBQUMsTUFBTSxLQUFLUixtQkFBTCxDQUF5QkMsUUFBekIsQ0FBUCxJQUE2QyxDQUFqRCxFQUFvRDtNQUNsRE8sS0FBSyxHQUFJO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlEQU5NO0lBT0QsQ0FSRCxNQVFPO01BQ0wsSUFBSU4sS0FBSyxHQUFHLEtBQUtPLFdBQWpCOztNQUNBLElBQUksQ0FBQ0MsZUFBQSxDQUFFQyxRQUFGLENBQVcsS0FBS0YsV0FBaEIsQ0FBTCxFQUFtQztRQUNqQyxJQUFJO1VBQ0YsTUFBTUcsTUFBTSxHQUFHLE1BQU0sS0FBS2QsS0FBTCxDQUFXSyxTQUFYLENBQXNCLDZCQUF0QixDQUFyQjtVQWVBRCxLQUFLLEdBQUcsS0FBS08sV0FBTCxHQUNORyxNQUFNLENBQ0hDLElBREgsR0FHR1IsS0FISCxDQUdTLEtBSFQsRUFLR1MsTUFMSCxDQUtXQyxNQUFELElBQVksQ0FBQ0wsZUFBQSxDQUFFTSxPQUFGLENBQVVELE1BQVYsQ0FMdkIsRUFNR0UsTUFQTDtRQVFELENBeEJELENBd0JFLE9BQU9DLEdBQVAsRUFBWTtVQUVaaEIsS0FBSyxHQUFHLEtBQUtOLFlBQUwsQ0FBa0J1QixLQUFsQixHQUEwQixFQUExQixHQUErQixDQUEvQixHQUFtQyxFQUEzQzs7VUFDQUMsZUFBQSxDQUFJQyxJQUFKLENBQVUsZ0RBQStDSCxHQUFHLENBQUNJLE9BQVEsRUFBckU7UUFDRDtNQUNGOztNQUdEZCxLQUFLLEdBQUkscUVBQW9FRSxlQUFBLENBQUVhLEtBQUYsQ0FBUSxDQUFSLEVBQVdyQixLQUFLLEdBQUcsQ0FBbkIsRUFBc0IsQ0FBdEIsRUFBeUJzQixJQUF6QixDQUE4QixJQUE5QixDQUFvQyxJQUFqSDtJQUNEOztJQUNELE1BQU0sS0FBSzFCLEtBQUwsQ0FBV0ssU0FBWCxDQUFxQkssS0FBckIsRUFBNEJQLFFBQTVCLENBQU47RUFDRDs7RUFFMEIsTUFBckJ3QixxQkFBcUIsQ0FBRXhCLFFBQUYsRUFBWTtJQUNyQyxJQUFJLENBQUMsTUFBTSxLQUFLRCxtQkFBTCxDQUF5QkMsUUFBekIsQ0FBUCxJQUE2QyxDQUFqRCxFQUFvRDtNQUNsRCxNQUFNLEtBQUtILEtBQUwsQ0FBV0ssU0FBWCxDQUFzQix5RUFBdEIsRUFBZ0dGLFFBQWhHLENBQU47SUFDRDtFQUNGOztBQXZFWTs7ZUEwRUFQLFEifQ==