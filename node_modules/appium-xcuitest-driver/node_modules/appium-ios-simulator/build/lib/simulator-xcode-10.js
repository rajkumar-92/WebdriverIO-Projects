"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _simulatorXcode = _interopRequireDefault(require("./simulator-xcode-9.3"));

var _support = require("@appium/support");

var _asyncbox = require("asyncbox");

var _utils = require("./utils");

var _logger = _interopRequireDefault(require("./logger"));

class SimulatorXcode10 extends _simulatorXcode.default {
  constructor(udid, xcodeVersion) {
    super(udid, xcodeVersion);
  }

  async isAppInstalled(bundleId) {
    try {
      const appContainer = await this.simctl.getAppContainer(bundleId);

      if (!appContainer.endsWith('.app')) {
        return false;
      }

      return await _support.fs.exists(appContainer);
    } catch (err) {
      try {
        const info = await this.simctl.appInfo(bundleId);
        return info.includes('ApplicationType');
      } catch (ign) {}
    }

    return false;
  }

  async openUrl(url) {
    if (!(await this.isRunning())) {
      throw new Error(`Tried to open '${url}', but Simulator is not in Booted state`);
    }

    const timer = new _support.timing.Timer().start();
    await this.simctl.openUrl(url);
    let psError;

    try {
      await (0, _asyncbox.waitForCondition)(async () => {
        let procList = [];

        try {
          procList = await this.ps();
          psError = null;
        } catch (e) {
          _logger.default.debug(e.message);

          psError = e;
        }

        return procList.some(({
          name
        }) => name === _utils.MOBILE_SAFARI_BUNDLE_ID);
      }, {
        waitMs: _utils.SAFARI_STARTUP_TIMEOUT,
        intervalMs: 500
      });
    } catch (err) {
      const secondsElapsed = timer.getDuration().asSeconds;

      if (psError) {
        _logger.default.warn(`Mobile Safari process existence cannot be verified after ${secondsElapsed.toFixed(3)}s. ` + `Original error: ${psError.message}`);

        _logger.default.warn('Continuing anyway');
      } else {
        throw new Error(`Mobile Safari cannot open '${url}' after ${secondsElapsed.toFixed(3)}s. ` + `Its process ${_utils.MOBILE_SAFARI_BUNDLE_ID} does not exist in the list of Simulator processes`);
      }
    }

    _logger.default.debug(`Safari successfully opened '${url}' in ${timer.getDuration().asSeconds.toFixed(3)}s`);
  }

}

var _default = SimulatorXcode10;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTaW11bGF0b3JYY29kZTEwIiwiU2ltdWxhdG9yWGNvZGU5MyIsImNvbnN0cnVjdG9yIiwidWRpZCIsInhjb2RlVmVyc2lvbiIsImlzQXBwSW5zdGFsbGVkIiwiYnVuZGxlSWQiLCJhcHBDb250YWluZXIiLCJzaW1jdGwiLCJnZXRBcHBDb250YWluZXIiLCJlbmRzV2l0aCIsImZzIiwiZXhpc3RzIiwiZXJyIiwiaW5mbyIsImFwcEluZm8iLCJpbmNsdWRlcyIsImlnbiIsIm9wZW5VcmwiLCJ1cmwiLCJpc1J1bm5pbmciLCJFcnJvciIsInRpbWVyIiwidGltaW5nIiwiVGltZXIiLCJzdGFydCIsInBzRXJyb3IiLCJ3YWl0Rm9yQ29uZGl0aW9uIiwicHJvY0xpc3QiLCJwcyIsImUiLCJsb2ciLCJkZWJ1ZyIsIm1lc3NhZ2UiLCJzb21lIiwibmFtZSIsIk1PQklMRV9TQUZBUklfQlVORExFX0lEIiwid2FpdE1zIiwiU0FGQVJJX1NUQVJUVVBfVElNRU9VVCIsImludGVydmFsTXMiLCJzZWNvbmRzRWxhcHNlZCIsImdldER1cmF0aW9uIiwiYXNTZWNvbmRzIiwid2FybiIsInRvRml4ZWQiXSwic291cmNlcyI6WyIuLi8uLi9saWIvc2ltdWxhdG9yLXhjb2RlLTEwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBTaW11bGF0b3JYY29kZTkzIGZyb20gJy4vc2ltdWxhdG9yLXhjb2RlLTkuMyc7XG5pbXBvcnQgeyBmcywgdGltaW5nIH0gZnJvbSAnQGFwcGl1bS9zdXBwb3J0JztcbmltcG9ydCB7IHdhaXRGb3JDb25kaXRpb24gfSBmcm9tICdhc3luY2JveCc7XG5pbXBvcnQgeyBNT0JJTEVfU0FGQVJJX0JVTkRMRV9JRCwgU0FGQVJJX1NUQVJUVVBfVElNRU9VVCB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IGxvZyBmcm9tICcuL2xvZ2dlcic7XG5cblxuY2xhc3MgU2ltdWxhdG9yWGNvZGUxMCBleHRlbmRzIFNpbXVsYXRvclhjb2RlOTMge1xuICBjb25zdHJ1Y3RvciAodWRpZCwgeGNvZGVWZXJzaW9uKSB7XG4gICAgc3VwZXIodWRpZCwgeGNvZGVWZXJzaW9uKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBWZXJpZnkgd2hldGhlciB0aGUgcGFydGljdWxhciBhcHBsaWNhdGlvbiBpcyBpbnN0YWxsZWQgb24gU2ltdWxhdG9yLlxuICAgKiBAb3ZlcnJpZGVcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGJ1bmRsZUlkIC0gVGhlIGJ1bmRsZSBpZCBvZiB0aGUgYXBwbGljYXRpb24gdG8gYmUgY2hlY2tlZC5cbiAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgZ2l2ZW4gYXBwbGljYXRpb24gaXMgaW5zdGFsbGVkLlxuICAgKi9cbiAgYXN5bmMgaXNBcHBJbnN0YWxsZWQgKGJ1bmRsZUlkKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGFwcENvbnRhaW5lciA9IGF3YWl0IHRoaXMuc2ltY3RsLmdldEFwcENvbnRhaW5lcihidW5kbGVJZCk7XG4gICAgICBpZiAoIWFwcENvbnRhaW5lci5lbmRzV2l0aCgnLmFwcCcpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhd2FpdCBmcy5leGlzdHMoYXBwQ29udGFpbmVyKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIC8vIGdldF9hcHBfY29udGFpbmVyIHN1YmNvbW1hbmQgZmFpbHMgZm9yIHN5c3RlbSBhcHBsaWNhdGlvbnMsXG4gICAgICAvLyBzbyB3ZSB0cnkgdGhlIGhpZGRlbiBhcHBpbmZvIHN1YmNvbW1hbmQsIHdoaWNoIHByaW50cyBjb3JyZWN0IGluZm8gZm9yXG4gICAgICAvLyBzeXN0ZW0vaGlkZGVuIGFwcHNcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGluZm8gPSBhd2FpdCB0aGlzLnNpbWN0bC5hcHBJbmZvKGJ1bmRsZUlkKTtcbiAgICAgICAgcmV0dXJuIGluZm8uaW5jbHVkZXMoJ0FwcGxpY2F0aW9uVHlwZScpO1xuICAgICAgfSBjYXRjaCAoaWduKSB7fVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBhc3luYyBvcGVuVXJsICh1cmwpIHtcbiAgICBpZiAoIWF3YWl0IHRoaXMuaXNSdW5uaW5nKCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVHJpZWQgdG8gb3BlbiAnJHt1cmx9JywgYnV0IFNpbXVsYXRvciBpcyBub3QgaW4gQm9vdGVkIHN0YXRlYCk7XG4gICAgfVxuICAgIGNvbnN0IHRpbWVyID0gbmV3IHRpbWluZy5UaW1lcigpLnN0YXJ0KCk7XG4gICAgYXdhaXQgdGhpcy5zaW1jdGwub3BlblVybCh1cmwpO1xuICAgIGxldCBwc0Vycm9yO1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCB3YWl0Rm9yQ29uZGl0aW9uKGFzeW5jICgpID0+IHtcbiAgICAgICAgbGV0IHByb2NMaXN0ID0gW107XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcHJvY0xpc3QgPSBhd2FpdCB0aGlzLnBzKCk7XG4gICAgICAgICAgcHNFcnJvciA9IG51bGw7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBsb2cuZGVidWcoZS5tZXNzYWdlKTtcbiAgICAgICAgICBwc0Vycm9yID0gZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcHJvY0xpc3Quc29tZSgoe25hbWV9KSA9PiBuYW1lID09PSBNT0JJTEVfU0FGQVJJX0JVTkRMRV9JRCk7XG4gICAgICB9LCB7XG4gICAgICAgIHdhaXRNczogU0FGQVJJX1NUQVJUVVBfVElNRU9VVCxcbiAgICAgICAgaW50ZXJ2YWxNczogNTAwLFxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBjb25zdCBzZWNvbmRzRWxhcHNlZCA9IHRpbWVyLmdldER1cmF0aW9uKCkuYXNTZWNvbmRzO1xuICAgICAgaWYgKHBzRXJyb3IpIHtcbiAgICAgICAgbG9nLndhcm4oYE1vYmlsZSBTYWZhcmkgcHJvY2VzcyBleGlzdGVuY2UgY2Fubm90IGJlIHZlcmlmaWVkIGFmdGVyICR7c2Vjb25kc0VsYXBzZWQudG9GaXhlZCgzKX1zLiBgICtcbiAgICAgICAgICBgT3JpZ2luYWwgZXJyb3I6ICR7cHNFcnJvci5tZXNzYWdlfWApO1xuICAgICAgICBsb2cud2FybignQ29udGludWluZyBhbnl3YXknKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgTW9iaWxlIFNhZmFyaSBjYW5ub3Qgb3BlbiAnJHt1cmx9JyBhZnRlciAke3NlY29uZHNFbGFwc2VkLnRvRml4ZWQoMyl9cy4gYCArXG4gICAgICAgICAgYEl0cyBwcm9jZXNzICR7TU9CSUxFX1NBRkFSSV9CVU5ETEVfSUR9IGRvZXMgbm90IGV4aXN0IGluIHRoZSBsaXN0IG9mIFNpbXVsYXRvciBwcm9jZXNzZXNgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbG9nLmRlYnVnKGBTYWZhcmkgc3VjY2Vzc2Z1bGx5IG9wZW5lZCAnJHt1cmx9JyBpbiAke3RpbWVyLmdldER1cmF0aW9uKCkuYXNTZWNvbmRzLnRvRml4ZWQoMyl9c2ApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNpbXVsYXRvclhjb2RlMTA7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBR0EsTUFBTUEsZ0JBQU4sU0FBK0JDLHVCQUEvQixDQUFnRDtFQUM5Q0MsV0FBVyxDQUFFQyxJQUFGLEVBQVFDLFlBQVIsRUFBc0I7SUFDL0IsTUFBTUQsSUFBTixFQUFZQyxZQUFaO0VBQ0Q7O0VBU21CLE1BQWRDLGNBQWMsQ0FBRUMsUUFBRixFQUFZO0lBQzlCLElBQUk7TUFDRixNQUFNQyxZQUFZLEdBQUcsTUFBTSxLQUFLQyxNQUFMLENBQVlDLGVBQVosQ0FBNEJILFFBQTVCLENBQTNCOztNQUNBLElBQUksQ0FBQ0MsWUFBWSxDQUFDRyxRQUFiLENBQXNCLE1BQXRCLENBQUwsRUFBb0M7UUFDbEMsT0FBTyxLQUFQO01BQ0Q7O01BQ0QsT0FBTyxNQUFNQyxXQUFBLENBQUdDLE1BQUgsQ0FBVUwsWUFBVixDQUFiO0lBQ0QsQ0FORCxDQU1FLE9BQU9NLEdBQVAsRUFBWTtNQUlaLElBQUk7UUFDRixNQUFNQyxJQUFJLEdBQUcsTUFBTSxLQUFLTixNQUFMLENBQVlPLE9BQVosQ0FBb0JULFFBQXBCLENBQW5CO1FBQ0EsT0FBT1EsSUFBSSxDQUFDRSxRQUFMLENBQWMsaUJBQWQsQ0FBUDtNQUNELENBSEQsQ0FHRSxPQUFPQyxHQUFQLEVBQVksQ0FBRTtJQUNqQjs7SUFDRCxPQUFPLEtBQVA7RUFDRDs7RUFLWSxNQUFQQyxPQUFPLENBQUVDLEdBQUYsRUFBTztJQUNsQixJQUFJLEVBQUMsTUFBTSxLQUFLQyxTQUFMLEVBQVAsQ0FBSixFQUE2QjtNQUMzQixNQUFNLElBQUlDLEtBQUosQ0FBVyxrQkFBaUJGLEdBQUkseUNBQWhDLENBQU47SUFDRDs7SUFDRCxNQUFNRyxLQUFLLEdBQUcsSUFBSUMsZUFBQSxDQUFPQyxLQUFYLEdBQW1CQyxLQUFuQixFQUFkO0lBQ0EsTUFBTSxLQUFLakIsTUFBTCxDQUFZVSxPQUFaLENBQW9CQyxHQUFwQixDQUFOO0lBQ0EsSUFBSU8sT0FBSjs7SUFDQSxJQUFJO01BQ0YsTUFBTSxJQUFBQywwQkFBQSxFQUFpQixZQUFZO1FBQ2pDLElBQUlDLFFBQVEsR0FBRyxFQUFmOztRQUNBLElBQUk7VUFDRkEsUUFBUSxHQUFHLE1BQU0sS0FBS0MsRUFBTCxFQUFqQjtVQUNBSCxPQUFPLEdBQUcsSUFBVjtRQUNELENBSEQsQ0FHRSxPQUFPSSxDQUFQLEVBQVU7VUFDVkMsZUFBQSxDQUFJQyxLQUFKLENBQVVGLENBQUMsQ0FBQ0csT0FBWjs7VUFDQVAsT0FBTyxHQUFHSSxDQUFWO1FBQ0Q7O1FBQ0QsT0FBT0YsUUFBUSxDQUFDTSxJQUFULENBQWMsQ0FBQztVQUFDQztRQUFELENBQUQsS0FBWUEsSUFBSSxLQUFLQyw4QkFBbkMsQ0FBUDtNQUNELENBVkssRUFVSDtRQUNEQyxNQUFNLEVBQUVDLDZCQURQO1FBRURDLFVBQVUsRUFBRTtNQUZYLENBVkcsQ0FBTjtJQWNELENBZkQsQ0FlRSxPQUFPMUIsR0FBUCxFQUFZO01BQ1osTUFBTTJCLGNBQWMsR0FBR2xCLEtBQUssQ0FBQ21CLFdBQU4sR0FBb0JDLFNBQTNDOztNQUNBLElBQUloQixPQUFKLEVBQWE7UUFDWEssZUFBQSxDQUFJWSxJQUFKLENBQVUsNERBQTJESCxjQUFjLENBQUNJLE9BQWYsQ0FBdUIsQ0FBdkIsQ0FBMEIsS0FBdEYsR0FDTixtQkFBa0JsQixPQUFPLENBQUNPLE9BQVEsRUFEckM7O1FBRUFGLGVBQUEsQ0FBSVksSUFBSixDQUFTLG1CQUFUO01BQ0QsQ0FKRCxNQUlPO1FBQ0wsTUFBTSxJQUFJdEIsS0FBSixDQUFXLDhCQUE2QkYsR0FBSSxXQUFVcUIsY0FBYyxDQUFDSSxPQUFmLENBQXVCLENBQXZCLENBQTBCLEtBQXRFLEdBQ2IsZUFBY1IsOEJBQXdCLG9EQURuQyxDQUFOO01BRUQ7SUFDRjs7SUFDREwsZUFBQSxDQUFJQyxLQUFKLENBQVcsK0JBQThCYixHQUFJLFFBQU9HLEtBQUssQ0FBQ21CLFdBQU4sR0FBb0JDLFNBQXBCLENBQThCRSxPQUE5QixDQUFzQyxDQUF0QyxDQUF5QyxHQUE3RjtFQUNEOztBQXBFNkM7O2VBdUVqQzVDLGdCIn0=