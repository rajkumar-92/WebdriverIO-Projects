"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("source-map-support/register");
var _remoteMessages = _interopRequireDefault(require("./remote-messages"));
var _asyncbox = require("asyncbox");
var _logger = _interopRequireDefault(require("../logger"));
var _lodash = _interopRequireDefault(require("lodash"));
var _bluebird = _interopRequireDefault(require("bluebird"));
var _rpcMessageHandler = _interopRequireDefault(require("./rpc-message-handler"));
var _support = require("appium/support");
const DATA_LOG_LENGTH = {
  length: 200
};
const WAIT_FOR_TARGET_TIMEOUT = 10000;
const WAIT_FOR_TARGET_INTERVAL = 1000;
const MIN_PLATFORM_FOR_TARGET_BASED = '12.2';

const MIN_PLATFORM_NO_TARGET_EXISTS = '13.4';
function isTargetBased(isSafari, platformVersion) {
  const isHighVersion = _support.util.compareVersions(platformVersion, '>=', MIN_PLATFORM_FOR_TARGET_BASED);
  _logger.default.debug(`Checking which communication style to use (${isSafari ? '' : 'non-'}Safari on platform version '${platformVersion}')`);
  _logger.default.debug(`Platform version equal or higher than '${MIN_PLATFORM_FOR_TARGET_BASED}': ${isHighVersion}`);
  return isHighVersion;
}
class RpcClient {
  constructor(opts = {}) {
    this._targets = [];
    this._shouldCheckForTarget = !!opts.shouldCheckForTarget;
    const {
      bundleId,
      platformVersion = {},
      isSafari = true,
      logAllCommunication = false,
      logAllCommunicationHexDump = false,
      webInspectorMaxFrameLength,
      socketChunkSize,
      fullPageInitialization = false
    } = opts;
    this.isSafari = isSafari;
    this.isConnected = false;
    this.connId = _support.util.uuidV4();
    this.senderId = _support.util.uuidV4();
    this.msgId = 0;
    this.logAllCommunication = logAllCommunication;
    this.logAllCommunicationHexDump = logAllCommunicationHexDump;
    this.socketChunkSize = socketChunkSize;
    this.webInspectorMaxFrameLength = webInspectorMaxFrameLength;
    this.fullPageInitialization = fullPageInitialization;
    this.bundleId = bundleId;
    this.platformVersion = platformVersion;
    this._contexts = [];
    this._targets = {};

    this.isTargetBased = isTargetBased(isSafari, this.platformVersion);
  }
  get contexts() {
    return this._contexts;
  }
  get needsTarget() {
    return this.shouldCheckForTarget && this.isTargetBased;
  }
  get targets() {
    return this._targets;
  }
  get shouldCheckForTarget() {
    return this._shouldCheckForTarget;
  }
  set shouldCheckForTarget(shouldCheckForTarget) {
    this._shouldCheckForTarget = !!shouldCheckForTarget;
  }
  get isConnected() {
    return this.connected;
  }
  set isConnected(connected) {
    this.connected = !!connected;
  }
  on(event, listener) {
    this.messageHandler.on(event, listener);
    return this;
  }
  once(event, listener) {
    this.messageHandler.once(event, listener);
    return this;
  }
  off(event, listener) {
    this.messageHandler.off(event, listener);
    return this;
  }
  set isTargetBased(isTargetBased) {
    _logger.default.warn(`Setting communication protocol: using ${isTargetBased ? 'Target-based' : 'full Web Inspector protocol'} communication`);
    this._isTargetBased = isTargetBased;
    if (!this.remoteMessages) {
      this.remoteMessages = new _remoteMessages.default(isTargetBased);
    } else {
      this.remoteMessages.isTargetBased = isTargetBased;
    }
    if (!this.messageHandler) {
      this.messageHandler = new _rpcMessageHandler.default(isTargetBased);

      this.messageHandler.on('Target.targetCreated', this.addTarget.bind(this));
      this.messageHandler.on('Target.didCommitProvisionalTarget', this.updateTarget.bind(this));
      this.messageHandler.on('Target.targetDestroyed', this.removeTarget.bind(this));
      this.messageHandler.on('Runtime.executionContextCreated', this.onExecutionContextCreated.bind(this));
      this.messageHandler.on('Heap.garbageCollected', this.onGarbageCollected.bind(this));
    } else {
      this.messageHandler.isTargetBased = isTargetBased;
    }
  }
  get isTargetBased() {
    return this._isTargetBased;
  }
  async waitForTarget(appIdKey, pageIdKey, force = false) {
    if (!force && !this.needsTarget) {
      return;
    }
    if (this.getTarget(appIdKey, pageIdKey)) {
      return;
    }

    try {
      await (0, _asyncbox.waitForCondition)(() => !_lodash.default.isEmpty(this.getTarget(appIdKey, pageIdKey)), {
        waitMs: WAIT_FOR_TARGET_TIMEOUT,
        intervalMs: WAIT_FOR_TARGET_INTERVAL,
        error: 'No targets found, unable to communicate with device'
      });
    } catch (err) {
      if (!err.message.includes('Condition unmet')) {
        throw err;
      }
      throw new Error('No targets found, unable to communicate with device');
    }
  }
  async send(command, opts = {}, waitForResponse = true) {
    const timer = new _support.timing.Timer().start();
    const {
      appIdKey,
      pageIdKey
    } = opts;
    try {
      if (!_lodash.default.isEmpty(appIdKey) && !_lodash.default.isEmpty(pageIdKey)) {
        await this.waitForTarget(appIdKey, pageIdKey);
      }
      return await this.sendToDevice(command, opts, waitForResponse);
    } catch (err) {
      let {
        message = ''
      } = err;
      message = message.toLowerCase();
      if (message.includes(`'target' domain was not found`)) {
        _logger.default.info('The target device does not support Target based communication. ' + 'Will follow non-target based communication.');
        this.isTargetBased = false;
        return await this.sendToDevice(command, opts, waitForResponse);
      } else if (message.includes(`domain was not found`) || message.includes(`some arguments of method`) || message.includes(`missing target`)) {
        this.isTargetBased = true;
        await this.waitForTarget(appIdKey, pageIdKey);
        return await this.sendToDevice(command, opts, waitForResponse);
      }
      throw err;
    } finally {
      _logger.default.debug(`Sending to Web Inspector took ${timer.getDuration().asMilliSeconds.toFixed(0)}ms`);
    }
  }
  async sendToDevice(command, opts = {}, waitForResponse = true) {
    return await new _bluebird.default(async (resolve, reject) => {
      var _cmd$__argument, _cmd$__argument2;

      const msgId = this.msgId++;
      let wrapperMsgId = msgId;
      if (this.isTargetBased) {
        wrapperMsgId = this.msgId++;
        this.messageHandler.on(wrapperMsgId.toString(), function (err) {
          if (err) {
            reject(err);
          }
        });
      }
      const appIdKey = opts.appIdKey;
      const pageIdKey = opts.pageIdKey;
      const targetId = this.getTarget(appIdKey, pageIdKey);

      const fullOpts = _lodash.default.defaults({
        connId: this.connId,
        senderId: this.senderId,
        targetId,
        id: msgId
      }, opts);
      const cmd = this.remoteMessages.getRemoteCommand(command, fullOpts);
      if (cmd !== null && cmd !== void 0 && (_cmd$__argument = cmd.__argument) !== null && _cmd$__argument !== void 0 && _cmd$__argument.WIRSocketDataKey) {
        if (_lodash.default.isNil(cmd.__argument.WIRSocketDataKey.id)) {
          cmd.__argument.WIRSocketDataKey.id = wrapperMsgId;
        }
        cmd.__argument.WIRSocketDataKey = Buffer.from(JSON.stringify(cmd.__argument.WIRSocketDataKey));
      }
      let messageHandled = true;
      if (!waitForResponse) {
        messageHandled = false;
        this.messageHandler.once(msgId.toString(), function (err) {
          if (err) {
            _logger.default.error(`Received error from send that is not being waited for (id: ${msgId}): '${_lodash.default.truncate(JSON.stringify(err), DATA_LOG_LENGTH)}'`);
            reject(err);
          }
        });
      } else if (this.messageHandler.listeners(cmd.__selector).length) {
        this.messageHandler.prependOnceListener(cmd.__selector, function (err, ...args) {
          if (err) {
            return reject(err);
          }
          _logger.default.debug(`Received response from send (id: ${msgId}): '${_lodash.default.truncate(JSON.stringify(args), DATA_LOG_LENGTH)}'`);
          resolve(args);
        });
      } else if (cmd !== null && cmd !== void 0 && (_cmd$__argument2 = cmd.__argument) !== null && _cmd$__argument2 !== void 0 && _cmd$__argument2.WIRSocketDataKey) {
        this.messageHandler.once(msgId.toString(), function (err, value) {
          if (err) {
            return reject(new Error(`Remote debugger error with code '${err.code}': ${err.message}`));
          }
          _logger.default.debug(`Received data response from send (id: ${msgId}): '${_lodash.default.truncate(JSON.stringify(value), DATA_LOG_LENGTH)}'`);
          resolve(value);
        });
      } else {
        messageHandled = false;
      }
      const msg = `Sending '${cmd.__selector}' message` + (fullOpts.appIdKey ? ` to app '${fullOpts.appIdKey}'` : '') + (fullOpts.pageIdKey ? `, page '${fullOpts.pageIdKey}'` : '') + (this.needsTarget && targetId ? `, target '${targetId}'` : '') + ` (id: ${msgId}): '${command}'`;
      _logger.default.debug(msg);
      try {
        const res = await this.sendMessage(cmd);
        if (!messageHandled) {
          resolve(res);
        }
      } catch (err) {
        return reject(err);
      }
    });
  }
  async connect() {
    throw new Error(`Sub-classes need to implement a 'connect' function`);
  }
  async disconnect() {
    this.messageHandler.removeAllListeners();
  }
  async sendMessage(
  ) {
    throw new Error(`Sub-classes need to implement a 'sendMessage' function`);
  }
  async receive(
  ) {
    throw new Error(`Sub-classes need to implement a 'receive' function`);
  }
  addTarget(err, app, targetInfo) {
    if (_lodash.default.isNil(targetInfo === null || targetInfo === void 0 ? void 0 : targetInfo.targetId)) {
      _logger.default.warn(`Received 'Target.targetCreated' event for app '${app}' with no target. Skipping`);
      return;
    }
    if (_lodash.default.isEmpty(this.pendingTargetNotification) && !targetInfo.isProvisional) {
      _logger.default.warn(`Received 'Target.targetCreated' event for app '${app}' with no pending request: ${JSON.stringify(targetInfo)}`);
      return;
    }
    if (targetInfo.isProvisional) {
      _logger.default.debug(`Provisional target created for app '${app}', '${targetInfo.targetId}'. Ignoring until target update event`);
      return;
    }
    const [appIdKey, pageIdKey] = this.pendingTargetNotification;
    _logger.default.debug(`Target created for app '${appIdKey}' and page '${pageIdKey}': ${JSON.stringify(targetInfo)}`);
    if (_lodash.default.has(this.targets[appIdKey], pageIdKey)) {
      _logger.default.debug(`There is already a target for this app and page ('${this.targets[appIdKey][pageIdKey]}'). This might cause problems`);
    }
    this.targets[app] = this.targets[app] || {};
    this.targets[appIdKey][pageIdKey] = targetInfo.targetId;
  }
  updateTarget(err, app, oldTargetId, newTargetId) {
    _logger.default.debug(`Target updated for app '${app}'. Old target: '${oldTargetId}', new target: '${newTargetId}'`);
    if (!this.targets[app]) {
      _logger.default.warn(`No existing target for app '${app}'. Not sure what to do`);
      return;
    }
    this.targets[app].provisional = {
      oldTargetId,
      newTargetId
    };
  }
  removeTarget(err, app, targetInfo) {
    var _this$targets$app, _this$targets$app$pro;
    if (_lodash.default.isNil(targetInfo === null || targetInfo === void 0 ? void 0 : targetInfo.targetId)) {
      _logger.default.debug(`Received 'Target.targetDestroyed' event with no target. Skipping`);
      return;
    }
    _logger.default.debug(`Target destroyed for app '${app}': ${targetInfo.targetId}`);

    if (((_this$targets$app = this.targets[app]) === null || _this$targets$app === void 0 ? void 0 : (_this$targets$app$pro = _this$targets$app.provisional) === null || _this$targets$app$pro === void 0 ? void 0 : _this$targets$app$pro.oldTargetId) === targetInfo.targetId) {
      const {
        oldTargetId,
        newTargetId
      } = this.targets[app].provisional;
      delete this.targets[app].provisional;

      const targets = this.targets[app];
      for (const [page, targetId] of _lodash.default.toPairs(targets)) {
        if (targetId === oldTargetId) {
          _logger.default.debug(`Found provisional target for app '${app}'. Old target: '${oldTargetId}', new target: '${newTargetId}'. Updating`);
          targets[page] = newTargetId;
          return;
        }
      }
      _logger.default.warn(`Provisional target for app '${app}' found, but no suitable existing target found. This may cause problems`);
      _logger.default.warn(`Old target: '${oldTargetId}', new target: '${newTargetId}'. Existing targets: ${JSON.stringify(targets)}`);
    }

    const targets = this.targets[app];
    for (const [page, targetId] of _lodash.default.toPairs(targets)) {
      if (targetId === targetInfo.targetId) {
        delete targets[page];
        return;
      }
    }
    _logger.default.debug(`Target '${targetInfo.targetId}' deleted for app '${app}', but no such target exists`);
  }
  getTarget(appIdKey, pageIdKey) {
    return (this.targets[appIdKey] || {})[pageIdKey];
  }
  async selectPage(appIdKey, pageIdKey) {
    this.pendingTargetNotification = [appIdKey, pageIdKey];
    this.shouldCheckForTarget = false;

    const sendOpts = {
      appIdKey,
      pageIdKey
    };

    for (const enabled of [true, false]) {
      await this.send('indicateWebView', Object.assign({
        enabled
      }, sendOpts), false);
    }
    await this.send('setSenderKey', sendOpts);
    _logger.default.debug('Sender key set');
    if (this.isTargetBased && _support.util.compareVersions(this.platformVersion, '<', MIN_PLATFORM_NO_TARGET_EXISTS)) {
      await this.send('Target.exists', sendOpts, false);
    }
    this.shouldCheckForTarget = true;
    if (this.fullPageInitialization) {
      await this.initializePageFull(appIdKey, pageIdKey);
    } else {
      await this.initializePage(appIdKey, pageIdKey);
    }
  }

  async initializePage(appIdKey, pageIdKey) {
    const sendOpts = {
      appIdKey,
      pageIdKey
    };
    await this.send('Inspector.enable', sendOpts, false);
    await this.send('Page.enable', sendOpts, false);

    await this.send('Network.enable', sendOpts, false);
    await this.send('Runtime.enable', sendOpts, false);
    await this.send('Heap.enable', sendOpts, false);
    await this.send('Debugger.enable', sendOpts, false);
    await this.send('Console.enable', sendOpts, false);
    await this.send('Inspector.initialized', sendOpts, false);
  }

  async initializePageFull(appIdKey, pageIdKey) {
    const sendOpts = {
      appIdKey,
      pageIdKey
    };
    await this.send('Inspector.enable', sendOpts, false);
    await this.send('Page.enable', sendOpts, false);

    await this.send('Page.getResourceTree', sendOpts, false);
    await this.send('Network.enable', sendOpts, false);
    await this.send('Network.setResourceCachingDisabled', Object.assign({
      disabled: false
    }, sendOpts), false);
    await this.send('DOMStorage.enable', sendOpts, false);
    await this.send('Database.enable', sendOpts, false);
    await this.send('IndexedDB.enable', sendOpts, false);
    await this.send('CSS.enable', sendOpts, false);
    await this.send('Runtime.enable', sendOpts, false);
    await this.send('Heap.enable', sendOpts, false);
    await this.send('Memory.enable', sendOpts, false);
    await this.send('ApplicationCache.enable', sendOpts, false);
    await this.send('ApplicationCache.getFramesWithManifests', sendOpts, false);
    await this.send('Timeline.setInstruments', Object.assign({
      instruments: ['Timeline', 'ScriptProfiler', 'CPU']
    }, sendOpts), false);
    await this.send('Timeline.setAutoCaptureEnabled', Object.assign({
      enabled: false
    }, sendOpts), false);
    await this.send('Debugger.enable', sendOpts, false);
    await this.send('Debugger.setBreakpointsActive', Object.assign({
      active: true
    }, sendOpts), false);
    await this.send('Debugger.setPauseOnExceptions', Object.assign({
      state: 'none'
    }, sendOpts), false);
    await this.send('Debugger.setPauseOnAssertions', Object.assign({
      enabled: false
    }, sendOpts), false);
    await this.send('Debugger.setAsyncStackTraceDepth', Object.assign({
      depth: 200
    }, sendOpts), false);
    await this.send('Debugger.setPauseForInternalScripts', Object.assign({
      shouldPause: false
    }, sendOpts), false);
    await this.send('LayerTree.enable', sendOpts, false);
    await this.send('Worker.enable', sendOpts, false);
    await this.send('Canvas.enable', sendOpts, false);
    await this.send('Console.enable', sendOpts, false);
    await this.send('DOM.getDocument', sendOpts, false);
    const loggingChannels = await this.send('Console.getLoggingChannels', sendOpts);
    for (const source of (loggingChannels.channels || []).map(entry => entry.source)) {
      await this.send('Console.setLoggingChannelLevel', Object.assign({
        source,
        level: 'verbose'
      }, sendOpts), false);
    }
    await this.send('Inspector.initialized', sendOpts, false);
  }
  async selectApp(appIdKey) {
    return await new _bluebird.default((resolve, reject) => {
      const onAppChange = (err, dict) => {
        if (err) {
          return reject(err);
        }
        const oldAppIdKey = dict.WIRHostApplicationIdentifierKey;
        const correctAppIdKey = dict.WIRApplicationIdentifierKey;

        if (oldAppIdKey && correctAppIdKey !== oldAppIdKey) {
          _logger.default.debug(`We were notified we might have connected to the wrong app. ` + `Using id ${correctAppIdKey} instead of ${oldAppIdKey}`);
        }
        reject(new Error('New application has connected'));
      };
      this.messageHandler.prependOnceListener('_rpc_applicationConnected:', onAppChange);

      return (async () => {
        let pageDict, connectedAppIdKey;
        try {
          [connectedAppIdKey, pageDict] = await this.send('connectToApp', {
            appIdKey
          });
        } catch (err) {
          _logger.default.warn(`Unable to connect to app: ${err.message}`);
          reject(err);
        }

        if (_lodash.default.isEmpty(pageDict)) {
          let msg = 'Empty page dictionary received';
          _logger.default.debug(msg);
          reject(new Error(msg));
        } else {
          resolve([connectedAppIdKey, pageDict]);
        }
      })();
    });
  }
  onExecutionContextCreated(err, context) {
    this.contexts.push(context.id);
  }
  onGarbageCollected() {
    _logger.default.debug(`Web Inspector garbage collected`);
  }
  onScriptParsed(err, scriptInfo) {
    _logger.default.debug(`Script parsed: ${JSON.stringify(scriptInfo)}`);
  }
}
exports.default = RpcClient;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,