"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.getAtom = getAtom;
exports.getScriptForAtom = getScriptForAtom;
require("source-map-support/register");
var _support = require("appium/support");
var _path = _interopRequireDefault(require("path"));
var _lodash = _interopRequireDefault(require("lodash"));
var _logger = _interopRequireDefault(require("./logger"));
const atomsCache = {};
const inBuildDir = __filename.includes('build/lib/atoms');
function getAtomFileName(atomName) {
  return inBuildDir ? _path.default.resolve(__dirname, '..', '..', 'atoms', `${atomName}.js`) : _path.default.resolve(__dirname, '..', 'atoms', `${atomName}.js`);
}
async function getAtom(atomName) {
  if (!_lodash.default.has(atomsCache, atomName)) {
    const atomFileName = getAtomFileName(atomName);
    try {
      atomsCache[atomName] = await _support.fs.readFile(atomFileName);
    } catch (e) {
      throw new Error(`Unable to load Atom '${atomName}' from file '${atomFileName}'`);
    }
  }
  return atomsCache[atomName];
}
async function wrapScriptForFrame(script, frame) {
  _logger.default.debug(`Wrapping script for frame '${frame}'`);
  const elFromCache = await getAtom('get_element_from_cache');
  return `(function (window) { var document = window.document; ` + `return (${script}); })((${elFromCache.toString('utf8')})(${JSON.stringify(frame)}))`;
}
async function getScriptForAtom(atom, args, frames = [], asyncCallBack = null) {
  const atomSrc = await getAtom(atom);
  let script;
  if (frames.length > 0) {
    script = atomSrc;
    for (const frame of frames) {
      script = await wrapScriptForFrame(script, frame);
    }
  } else {
    _logger.default.debug(`Executing '${atom}' atom in default context`);
    script = `(${atomSrc})`;
  }

  args = args.map(JSON.stringify);
  if (asyncCallBack) {
    script += `(${args.join(',')}, ${asyncCallBack}, true)`;
  } else {
    script += `(${args.join(',')})`;
  }
  return script;
}
var _default = getAtom;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJhdG9tc0NhY2hlIiwiaW5CdWlsZERpciIsIl9fZmlsZW5hbWUiLCJpbmNsdWRlcyIsImdldEF0b21GaWxlTmFtZSIsImF0b21OYW1lIiwicGF0aCIsInJlc29sdmUiLCJfX2Rpcm5hbWUiLCJnZXRBdG9tIiwiXyIsImhhcyIsImF0b21GaWxlTmFtZSIsImZzIiwicmVhZEZpbGUiLCJlIiwiRXJyb3IiLCJ3cmFwU2NyaXB0Rm9yRnJhbWUiLCJzY3JpcHQiLCJmcmFtZSIsImxvZyIsImRlYnVnIiwiZWxGcm9tQ2FjaGUiLCJ0b1N0cmluZyIsIkpTT04iLCJzdHJpbmdpZnkiLCJnZXRTY3JpcHRGb3JBdG9tIiwiYXRvbSIsImFyZ3MiLCJmcmFtZXMiLCJhc3luY0NhbGxCYWNrIiwiYXRvbVNyYyIsImxlbmd0aCIsIm1hcCIsImpvaW4iXSwic291cmNlcyI6WyIuLi8uLi9saWIvYXRvbXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZnMgfSBmcm9tICdhcHBpdW0vc3VwcG9ydCc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgbG9nIGZyb20gJy4vbG9nZ2VyJztcblxuXG5jb25zdCBhdG9tc0NhY2hlID0ge307XG5cbmNvbnN0IGluQnVpbGREaXIgPSBfX2ZpbGVuYW1lLmluY2x1ZGVzKCdidWlsZC9saWIvYXRvbXMnKTtcblxuZnVuY3Rpb24gZ2V0QXRvbUZpbGVOYW1lIChhdG9tTmFtZSkge1xuICByZXR1cm4gaW5CdWlsZERpclxuICAgID8gcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJy4uJywgJy4uJywgJ2F0b21zJywgYCR7YXRvbU5hbWV9LmpzYClcbiAgICA6IHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICcuLicsICdhdG9tcycsIGAke2F0b21OYW1lfS5qc2ApO1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRBdG9tIChhdG9tTmFtZSkge1xuICAvLyBjaGVjayBpZiB3ZSBoYXZlIGFscmVhZHkgbG9hZGVkIGFuIGNhY2hlZCB0aGlzIGF0b21cbiAgaWYgKCFfLmhhcyhhdG9tc0NhY2hlLCBhdG9tTmFtZSkpIHtcbiAgICBjb25zdCBhdG9tRmlsZU5hbWUgPSBnZXRBdG9tRmlsZU5hbWUoYXRvbU5hbWUpO1xuICAgIHRyeSB7XG4gICAgICBhdG9tc0NhY2hlW2F0b21OYW1lXSA9IGF3YWl0IGZzLnJlYWRGaWxlKGF0b21GaWxlTmFtZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmFibGUgdG8gbG9hZCBBdG9tICcke2F0b21OYW1lfScgZnJvbSBmaWxlICcke2F0b21GaWxlTmFtZX0nYCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGF0b21zQ2FjaGVbYXRvbU5hbWVdO1xufVxuXG5hc3luYyBmdW5jdGlvbiB3cmFwU2NyaXB0Rm9yRnJhbWUgKHNjcmlwdCwgZnJhbWUpIHtcbiAgbG9nLmRlYnVnKGBXcmFwcGluZyBzY3JpcHQgZm9yIGZyYW1lICcke2ZyYW1lfSdgKTtcbiAgY29uc3QgZWxGcm9tQ2FjaGUgPSBhd2FpdCBnZXRBdG9tKCdnZXRfZWxlbWVudF9mcm9tX2NhY2hlJyk7XG4gIHJldHVybiBgKGZ1bmN0aW9uICh3aW5kb3cpIHsgdmFyIGRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50OyBgICtcbiAgICAgICAgIGByZXR1cm4gKCR7c2NyaXB0fSk7IH0pKCgke2VsRnJvbUNhY2hlLnRvU3RyaW5nKCd1dGY4Jyl9KSgke0pTT04uc3RyaW5naWZ5KGZyYW1lKX0pKWA7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldFNjcmlwdEZvckF0b20gKGF0b20sIGFyZ3MsIGZyYW1lcyA9IFtdLCBhc3luY0NhbGxCYWNrID0gbnVsbCkge1xuICBjb25zdCBhdG9tU3JjID0gYXdhaXQgZ2V0QXRvbShhdG9tKTtcbiAgbGV0IHNjcmlwdDtcbiAgaWYgKGZyYW1lcy5sZW5ndGggPiAwKSB7XG4gICAgc2NyaXB0ID0gYXRvbVNyYztcbiAgICBmb3IgKGNvbnN0IGZyYW1lIG9mIGZyYW1lcykge1xuICAgICAgc2NyaXB0ID0gYXdhaXQgd3JhcFNjcmlwdEZvckZyYW1lKHNjcmlwdCwgZnJhbWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBsb2cuZGVidWcoYEV4ZWN1dGluZyAnJHthdG9tfScgYXRvbSBpbiBkZWZhdWx0IGNvbnRleHRgKTtcbiAgICBzY3JpcHQgPSBgKCR7YXRvbVNyY30pYDtcbiAgfVxuXG4gIC8vIGFkZCB0aGUgYXJndW1lbnRzLCBhcyBzdHJpbmdzXG4gIGFyZ3MgPSBhcmdzLm1hcChKU09OLnN0cmluZ2lmeSk7XG4gIGlmIChhc3luY0NhbGxCYWNrKSB7XG4gICAgc2NyaXB0ICs9IGAoJHthcmdzLmpvaW4oJywnKX0sICR7YXN5bmNDYWxsQmFja30sIHRydWUpYDtcbiAgfSBlbHNlIHtcbiAgICBzY3JpcHQgKz0gYCgke2FyZ3Muam9pbignLCcpfSlgO1xuICB9XG5cbiAgcmV0dXJuIHNjcmlwdDtcbn1cblxuZXhwb3J0IHsgZ2V0QXRvbSwgZ2V0U2NyaXB0Rm9yQXRvbSB9O1xuZXhwb3J0IGRlZmF1bHQgZ2V0QXRvbTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBR0EsTUFBTUEsVUFBVSxHQUFHLENBQUMsQ0FBQztBQUVyQixNQUFNQyxVQUFVLEdBQUdDLFVBQVUsQ0FBQ0MsUUFBUSxDQUFDLGlCQUFpQixDQUFDO0FBRXpELFNBQVNDLGVBQWUsQ0FBRUMsUUFBUSxFQUFFO0VBQ2xDLE9BQU9KLFVBQVUsR0FDYkssYUFBSSxDQUFDQyxPQUFPLENBQUNDLFNBQVMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRyxHQUFFSCxRQUFTLEtBQUksQ0FBQyxHQUM5REMsYUFBSSxDQUFDQyxPQUFPLENBQUNDLFNBQVMsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFHLEdBQUVILFFBQVMsS0FBSSxDQUFDO0FBQzlEO0FBRUEsZUFBZUksT0FBTyxDQUFFSixRQUFRLEVBQUU7RUFFaEMsSUFBSSxDQUFDSyxlQUFDLENBQUNDLEdBQUcsQ0FBQ1gsVUFBVSxFQUFFSyxRQUFRLENBQUMsRUFBRTtJQUNoQyxNQUFNTyxZQUFZLEdBQUdSLGVBQWUsQ0FBQ0MsUUFBUSxDQUFDO0lBQzlDLElBQUk7TUFDRkwsVUFBVSxDQUFDSyxRQUFRLENBQUMsR0FBRyxNQUFNUSxXQUFFLENBQUNDLFFBQVEsQ0FBQ0YsWUFBWSxDQUFDO0lBQ3hELENBQUMsQ0FBQyxPQUFPRyxDQUFDLEVBQUU7TUFDVixNQUFNLElBQUlDLEtBQUssQ0FBRSx3QkFBdUJYLFFBQVMsZ0JBQWVPLFlBQWEsR0FBRSxDQUFDO0lBQ2xGO0VBQ0Y7RUFFQSxPQUFPWixVQUFVLENBQUNLLFFBQVEsQ0FBQztBQUM3QjtBQUVBLGVBQWVZLGtCQUFrQixDQUFFQyxNQUFNLEVBQUVDLEtBQUssRUFBRTtFQUNoREMsZUFBRyxDQUFDQyxLQUFLLENBQUUsOEJBQTZCRixLQUFNLEdBQUUsQ0FBQztFQUNqRCxNQUFNRyxXQUFXLEdBQUcsTUFBTWIsT0FBTyxDQUFDLHdCQUF3QixDQUFDO0VBQzNELE9BQVEsdURBQXNELEdBQ3RELFdBQVVTLE1BQU8sVUFBU0ksV0FBVyxDQUFDQyxRQUFRLENBQUMsTUFBTSxDQUFFLEtBQUlDLElBQUksQ0FBQ0MsU0FBUyxDQUFDTixLQUFLLENBQUUsSUFBRztBQUM5RjtBQUVBLGVBQWVPLGdCQUFnQixDQUFFQyxJQUFJLEVBQUVDLElBQUksRUFBRUMsTUFBTSxHQUFHLEVBQUUsRUFBRUMsYUFBYSxHQUFHLElBQUksRUFBRTtFQUM5RSxNQUFNQyxPQUFPLEdBQUcsTUFBTXRCLE9BQU8sQ0FBQ2tCLElBQUksQ0FBQztFQUNuQyxJQUFJVCxNQUFNO0VBQ1YsSUFBSVcsTUFBTSxDQUFDRyxNQUFNLEdBQUcsQ0FBQyxFQUFFO0lBQ3JCZCxNQUFNLEdBQUdhLE9BQU87SUFDaEIsS0FBSyxNQUFNWixLQUFLLElBQUlVLE1BQU0sRUFBRTtNQUMxQlgsTUFBTSxHQUFHLE1BQU1ELGtCQUFrQixDQUFDQyxNQUFNLEVBQUVDLEtBQUssQ0FBQztJQUNsRDtFQUNGLENBQUMsTUFBTTtJQUNMQyxlQUFHLENBQUNDLEtBQUssQ0FBRSxjQUFhTSxJQUFLLDJCQUEwQixDQUFDO0lBQ3hEVCxNQUFNLEdBQUksSUFBR2EsT0FBUSxHQUFFO0VBQ3pCOztFQUdBSCxJQUFJLEdBQUdBLElBQUksQ0FBQ0ssR0FBRyxDQUFDVCxJQUFJLENBQUNDLFNBQVMsQ0FBQztFQUMvQixJQUFJSyxhQUFhLEVBQUU7SUFDakJaLE1BQU0sSUFBSyxJQUFHVSxJQUFJLENBQUNNLElBQUksQ0FBQyxHQUFHLENBQUUsS0FBSUosYUFBYyxTQUFRO0VBQ3pELENBQUMsTUFBTTtJQUNMWixNQUFNLElBQUssSUFBR1UsSUFBSSxDQUFDTSxJQUFJLENBQUMsR0FBRyxDQUFFLEdBQUU7RUFDakM7RUFFQSxPQUFPaEIsTUFBTTtBQUNmO0FBQUMsZUFHY1QsT0FBTztBQUFBIn0=