{"version":3,"file":"atoms.js","names":["atomsCache","inBuildDir","__filename","includes","getAtomFileName","atomName","path","resolve","__dirname","getAtom","_","has","atomFileName","fs","readFile","e","Error","wrapScriptForFrame","script","frame","log","debug","elFromCache","toString","JSON","stringify","getScriptForAtom","atom","args","frames","asyncCallBack","atomSrc","length","map","join"],"sources":["../../lib/atoms.js"],"sourcesContent":["import { fs } from 'appium/support';\nimport path from 'path';\nimport _ from 'lodash';\nimport log from './logger';\n\n\nconst atomsCache = {};\n\nconst inBuildDir = __filename.includes('build/lib/atoms');\n\nfunction getAtomFileName (atomName) {\n  return inBuildDir\n    ? path.resolve(__dirname, '..', '..', 'atoms', `${atomName}.js`)\n    : path.resolve(__dirname, '..', 'atoms', `${atomName}.js`);\n}\n\nasync function getAtom (atomName) {\n  // check if we have already loaded an cached this atom\n  if (!_.has(atomsCache, atomName)) {\n    const atomFileName = getAtomFileName(atomName);\n    try {\n      atomsCache[atomName] = await fs.readFile(atomFileName);\n    } catch (e) {\n      throw new Error(`Unable to load Atom '${atomName}' from file '${atomFileName}'`);\n    }\n  }\n\n  return atomsCache[atomName];\n}\n\nasync function wrapScriptForFrame (script, frame) {\n  log.debug(`Wrapping script for frame '${frame}'`);\n  const elFromCache = await getAtom('get_element_from_cache');\n  return `(function (window) { var document = window.document; ` +\n         `return (${script}); })((${elFromCache.toString('utf8')})(${JSON.stringify(frame)}))`;\n}\n\nasync function getScriptForAtom (atom, args, frames = [], asyncCallBack = null) {\n  const atomSrc = await getAtom(atom);\n  let script;\n  if (frames.length > 0) {\n    script = atomSrc;\n    for (const frame of frames) {\n      script = await wrapScriptForFrame(script, frame);\n    }\n  } else {\n    log.debug(`Executing '${atom}' atom in default context`);\n    script = `(${atomSrc})`;\n  }\n\n  // add the arguments, as strings\n  args = args.map(JSON.stringify);\n  if (asyncCallBack) {\n    script += `(${args.join(',')}, ${asyncCallBack}, true)`;\n  } else {\n    script += `(${args.join(',')})`;\n  }\n\n  return script;\n}\n\nexport { getAtom, getScriptForAtom };\nexport default getAtom;\n"],"mappings":";;;;;;;;;;AAAA;AACA;AACA;AACA;AAGA,MAAMA,UAAU,GAAG,CAAC,CAAC;AAErB,MAAMC,UAAU,GAAGC,UAAU,CAACC,QAAQ,CAAC,iBAAiB,CAAC;AAEzD,SAASC,eAAe,CAAEC,QAAQ,EAAE;EAClC,OAAOJ,UAAU,GACbK,aAAI,CAACC,OAAO,CAACC,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAG,GAAEH,QAAS,KAAI,CAAC,GAC9DC,aAAI,CAACC,OAAO,CAACC,SAAS,EAAE,IAAI,EAAE,OAAO,EAAG,GAAEH,QAAS,KAAI,CAAC;AAC9D;AAEA,eAAeI,OAAO,CAAEJ,QAAQ,EAAE;EAEhC,IAAI,CAACK,eAAC,CAACC,GAAG,CAACX,UAAU,EAAEK,QAAQ,CAAC,EAAE;IAChC,MAAMO,YAAY,GAAGR,eAAe,CAACC,QAAQ,CAAC;IAC9C,IAAI;MACFL,UAAU,CAACK,QAAQ,CAAC,GAAG,MAAMQ,WAAE,CAACC,QAAQ,CAACF,YAAY,CAAC;IACxD,CAAC,CAAC,OAAOG,CAAC,EAAE;MACV,MAAM,IAAIC,KAAK,CAAE,wBAAuBX,QAAS,gBAAeO,YAAa,GAAE,CAAC;IAClF;EACF;EAEA,OAAOZ,UAAU,CAACK,QAAQ,CAAC;AAC7B;AAEA,eAAeY,kBAAkB,CAAEC,MAAM,EAAEC,KAAK,EAAE;EAChDC,eAAG,CAACC,KAAK,CAAE,8BAA6BF,KAAM,GAAE,CAAC;EACjD,MAAMG,WAAW,GAAG,MAAMb,OAAO,CAAC,wBAAwB,CAAC;EAC3D,OAAQ,uDAAsD,GACtD,WAAUS,MAAO,UAASI,WAAW,CAACC,QAAQ,CAAC,MAAM,CAAE,KAAIC,IAAI,CAACC,SAAS,CAACN,KAAK,CAAE,IAAG;AAC9F;AAEA,eAAeO,gBAAgB,CAAEC,IAAI,EAAEC,IAAI,EAAEC,MAAM,GAAG,EAAE,EAAEC,aAAa,GAAG,IAAI,EAAE;EAC9E,MAAMC,OAAO,GAAG,MAAMtB,OAAO,CAACkB,IAAI,CAAC;EACnC,IAAIT,MAAM;EACV,IAAIW,MAAM,CAACG,MAAM,GAAG,CAAC,EAAE;IACrBd,MAAM,GAAGa,OAAO;IAChB,KAAK,MAAMZ,KAAK,IAAIU,MAAM,EAAE;MAC1BX,MAAM,GAAG,MAAMD,kBAAkB,CAACC,MAAM,EAAEC,KAAK,CAAC;IAClD;EACF,CAAC,MAAM;IACLC,eAAG,CAACC,KAAK,CAAE,cAAaM,IAAK,2BAA0B,CAAC;IACxDT,MAAM,GAAI,IAAGa,OAAQ,GAAE;EACzB;;EAGAH,IAAI,GAAGA,IAAI,CAACK,GAAG,CAACT,IAAI,CAACC,SAAS,CAAC;EAC/B,IAAIK,aAAa,EAAE;IACjBZ,MAAM,IAAK,IAAGU,IAAI,CAACM,IAAI,CAAC,GAAG,CAAE,KAAIJ,aAAc,SAAQ;EACzD,CAAC,MAAM;IACLZ,MAAM,IAAK,IAAGU,IAAI,CAACM,IAAI,CAAC,GAAG,CAAE,GAAE;EACjC;EAEA,OAAOhB,MAAM;AACf;AAAC,eAGcT,OAAO;AAAA"}