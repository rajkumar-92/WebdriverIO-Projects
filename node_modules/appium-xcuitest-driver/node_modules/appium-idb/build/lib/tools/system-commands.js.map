{"version":3,"file":"system-commands.js","names":["PROCESS_INIT_TIMEOUT","COMPANION_PGREP_PATTERN","udid","IDB_COMPANION_EXECUTABLE","COMPANION_STARTUP_REGEXP","COMPANION_STARTUP_ERROR_REGEXP","buildDaemonArgs","opts","port","grpcPort","result","push","systemCallMethods","connect","onlineTimeout","log","debug","IDB_EXECUTABLE","binaryPaths","binary","fs","which","e","Error","DEFAULT_COMPANION_GRPC_PORT","companionProc","SubProcess","listeners","exit","cleanupListeners","_","toPairs","filter","v","isFunction","map","k","removeListener","start","B","resolve","reject","outType","eventName","lines","line","isEmpty","trim","verbose","readyMatch","exec","errorMatch","on","code","signal","message","once","timeout","err","isRunning","stop","ign","error","tpExec","connectionError","retryInterval","disconnect","isStartupMonitorEnabled","daemon","executable","daemonOutput","stdout","stderr","delay","DEFAULT_IDB_PORT","includes","warn","connectionError2","info","waitForDevice","path","companion","timeoutMs","timer","timing","Timer","waitForCondition","waitMs","intervalMs","getDuration","asSeconds","toFixed","companionPids","getPids","length","cmd","args","isArray","cloneDeep","execTimeout","DEFAULT_IDB_EXEC_TIMEOUT","timeoutCapName","fullArgs","defaultArgs","util","quote","hasValue","createSubProcess","command","idbArgs"],"sources":["../../../lib/tools/system-commands.js"],"sourcesContent":["import B from 'bluebird';\nimport { fs, util, timing } from '@appium/support';\nimport { exec as tpExec, SubProcess } from 'teen_process';\nimport _ from 'lodash';\nimport { retryInterval, waitForCondition } from 'asyncbox';\nimport {\n  getPids, DEFAULT_IDB_EXEC_TIMEOUT, IDB_EXECUTABLE,\n  IDB_COMPANION_EXECUTABLE, DEFAULT_IDB_PORT, DEFAULT_COMPANION_GRPC_PORT,\n} from '../helpers';\nimport log from '../logger.js';\n\n\nconst PROCESS_INIT_TIMEOUT = 5000;\nconst COMPANION_PGREP_PATTERN = (udid) =>\n  `${IDB_COMPANION_EXECUTABLE}.*--udid[[:space:]]+${udid}`;\nconst COMPANION_STARTUP_REGEXP = /Started GRPC server on port (\\d+)/;\nconst COMPANION_STARTUP_ERROR_REGEXP = /New Error Built ==> (.+)/;\n\nfunction buildDaemonArgs (opts = {}) {\n  const {\n    port,\n    grpcPort,\n  } = opts;\n\n  const result = ['daemon'];\n  if (port) {\n    result.push('--port', port);\n  }\n  if (grpcPort) {\n    result.push('--grpc-port', grpcPort);\n  }\n  return result;\n}\n\n\nconst systemCallMethods = {};\n\n/**\n * @typedef {Object} ConnectOptions\n *\n * @property {?number} onlineTimeout - The number of milliseconds to wait\n * until the device under tests is online. No wait is going to be performed\n * if the timeout is not set. It is recommended to provide this value if\n * `connect` is called right after device is booted, so not all the required\n * device services have been started yet.\n */\n\n/**\n * Initializes idb and companion processes if necessary and\n * assigns path properties. It is mandatory to call this method before\n * one can start using IDB instance,\n *\n * @throws {Error} If mandatory idb executables are not present on the\n * localhost or there was a failure while starting/detecting them\n */\nsystemCallMethods.connect = async function connect (opts = {}) {\n  const {\n    onlineTimeout,\n  } = opts;\n\n  log.debug(`Connecting ${IDB_EXECUTABLE} service to '${this.udid}'`);\n\n  const binaryPaths = {};\n  for (const binary of [IDB_EXECUTABLE, IDB_COMPANION_EXECUTABLE]) {\n    try {\n      binaryPaths[binary] = await fs.which(binary);\n    } catch (e) {\n      throw new Error(`'${binary}' has not been found in PATH. ` +\n        `Is it installed? Read https://www.fbidb.io for more details`);\n    }\n  }\n\n  let grpcPort = DEFAULT_COMPANION_GRPC_PORT;\n  log.debug(`Starting companion: '${binaryPaths[IDB_COMPANION_EXECUTABLE]}'`);\n  const companionProc = new SubProcess(binaryPaths[IDB_COMPANION_EXECUTABLE], ['--udid', this.udid]);\n  let listeners = {\n    'lines-stdout': null,\n    'lines-stderr': null,\n    exit: null,\n  };\n  const cleanupListeners = () => {\n    _.toPairs(listeners)\n      .filter(([, v]) => _.isFunction(v))\n      .map(([k, v]) => companionProc.removeListener(k, v));\n    listeners = {};\n  };\n  try {\n    await companionProc.start(0);\n\n    await new B((resolve, reject) => {\n      for (const outType of ['stderr', 'stdout']) {\n        const eventName = `lines-${outType}`;\n        listeners[eventName] = (lines) => {\n          for (const line of lines) {\n            if (_.isEmpty(_.trim(line))) {\n              continue;\n            }\n\n            if (this.verbose) {\n              log.debug(`[${IDB_COMPANION_EXECUTABLE} ${outType}] ${line}`);\n            }\n\n            // check for marker that things are ready to go\n            const readyMatch = COMPANION_STARTUP_REGEXP.exec(line);\n            if (readyMatch) {\n              // find the port and save, so idb can connect\n              grpcPort = readyMatch[1];\n              resolve();\n            } else {\n              // check if there has been an error\n              const errorMatch = COMPANION_STARTUP_ERROR_REGEXP.exec(line);\n              if (errorMatch) {\n                reject(new Error(errorMatch[1]));\n              }\n            }\n          }\n        };\n        companionProc.on(eventName, listeners[eventName]);\n      }\n\n      listeners.exit = (code, signal) => {\n        cleanupListeners();\n        const message = `${IDB_COMPANION_EXECUTABLE} exited with code '${code}' from signal '${signal}'`;\n        log.debug(message);\n        reject(new Error(message));\n      };\n      companionProc.once('exit', listeners.exit);\n    }).timeout(60000, 'Was unable to acquire a GRPC port after 60 seconds timeout');\n  } catch (err) {\n    cleanupListeners();\n    if (companionProc.isRunning) {\n      try {\n        await companionProc.stop();\n      } catch (ign) {}\n    }\n    log.error(`Failed to start ${IDB_COMPANION_EXECUTABLE}: ${err.message}`);\n    throw err;\n  }\n\n  log.debug(`${IDB_COMPANION_EXECUTABLE} is listening on GRPC port '${grpcPort}'`);\n\n  try {\n    try {\n      await tpExec(IDB_EXECUTABLE, ['connect', '127.0.0.1', grpcPort]);\n    } catch (connectionError) {\n      await retryInterval(2, 100, async () => {\n        await this.disconnect();\n        try {\n          await tpExec(IDB_EXECUTABLE, ['kill']);\n        } catch (ign) {}\n        let isStartupMonitorEnabled = true;\n        try {\n          const daemon = new SubProcess(IDB_EXECUTABLE, buildDaemonArgs({\n            port: this.executable.port,\n            grpcPort,\n          }));\n          let daemonOutput = '';\n          daemon.on('output', (stdout, stderr) => {\n            if (isStartupMonitorEnabled && _.trim(stdout || stderr)) {\n              daemonOutput += `[daemon] ${stdout || stderr}\\n`;\n            }\n          });\n          try {\n            await daemon.start(null, PROCESS_INIT_TIMEOUT);\n            await B.delay(300);\n          } catch (ign) {}\n\n          if (daemon.isRunning) {\n            log.debug(`${IDB_EXECUTABLE} daemon started on port ${this.executable.port || DEFAULT_IDB_PORT}`);\n          } else {\n            if (!daemonOutput.includes('address already in use')) {\n              const message = `${IDB_EXECUTABLE} daemon has failed to start: ${daemonOutput}`;\n              log.warn(message);\n              throw new Error(message);\n            }\n            log.debug(`The port ${this.executable.port || DEFAULT_IDB_PORT} is already in use. ` +\n              `Assuming it is used by ${IDB_EXECUTABLE} daemon`);\n          }\n          await tpExec(IDB_EXECUTABLE, ['connect', '127.0.0.1', grpcPort]);\n        } catch (connectionError2) {\n          if (connectionError2.stderr || connectionError2.stdout) {\n            log.debug(connectionError2.stderr || connectionError2.stdout);\n          }\n          throw connectionError2;\n        } finally {\n          isStartupMonitorEnabled = false;\n        }\n      });\n    }\n  } catch (e) {\n    if (e.stderr) {\n      log.debug(e.stderr);\n    }\n    throw new Error(`Cannot start ${IDB_EXECUTABLE} service for '${this.udid}'. ` +\n      `Check the server log for more details.`);\n  }\n  log.info(`Successfully established the connection to ${IDB_EXECUTABLE} service for '${this.udid}'`);\n\n  if (onlineTimeout) {\n    await this.waitForDevice(onlineTimeout);\n  }\n\n  this.executable.path = binaryPaths[IDB_EXECUTABLE];\n  this.companion.path = binaryPaths[IDB_COMPANION_EXECUTABLE];\n};\n\n/**\n * Blocks until the device under test starts responding to idb commands.\n * The device must be booted/online and idb must be already connected for that to happen\n *\n * @param {?number} timeoutMs [10000] - The number of milliseconds to wait\n * until the device under tests is online. The method will return immediately\n * if the timeout is falsy\n * @throws {Error} if the device is not responding within the given timeout\n */\nsystemCallMethods.waitForDevice = async function waitForDevice (timeoutMs = 10000) {\n  if (!timeoutMs) {\n    log.debug('No timeout is provided, so not waiting until the device is online');\n    return;\n  }\n\n  log.debug(`Waiting up to ${timeoutMs}ms for the device to be online`);\n  const timer = new timing.Timer().start();\n  try {\n    await waitForCondition(async () => {\n      try {\n        await this.exec(['ui', 'describe-all']);\n        return true;\n      } catch (e) {\n        return false;\n      }\n    }, {\n      waitMs: timeoutMs,\n      intervalMs: 300,\n    });\n  } catch (e) {\n    throw new Error(`The device '${this.udid}' is not responding to idb requests after ${timeoutMs}ms timeout. ` +\n      `Original error: ${e.stderr || e.message}`);\n  }\n  log.debug(`The device '${this.udid}' is online and ready to accept idb commands in ` +\n    `${timer.getDuration().asSeconds.toFixed(3)}s`);\n};\n\n/**\n * Performs cleanup of obsolete companion processes\n * The daemon process is left untouched, because killing it might\n * potentially affect other parallel sessions. Nothing\n * is done if no obsolete processes are found.\n */\nsystemCallMethods.disconnect = async function disconnect () {\n  log.debug(`Disconnecting ${IDB_EXECUTABLE} service from '${this.udid}'`);\n\n  try {\n    await tpExec(this.executable.path, ['disconnect', this.udid]);\n  } catch (ign) {}\n\n  const companionPids = await getPids(COMPANION_PGREP_PATTERN(this.udid));\n  if (_.isEmpty(companionPids)) {\n    return;\n  }\n\n  log.debug(`Cleaning up ${companionPids.length} obsolete ${IDB_COMPANION_EXECUTABLE} ` +\n    `process${companionPids.length === 1 ? '' : 'es'}`);\n  await tpExec('kill', ['-2', ...companionPids]);\n};\n\n/**\n * Execute the given idb command.\n *\n * @param {Array.<string>} cmd - The actual idb command without arguments/params.\n * @param {Array<string>} args - Optional command arguments.\n * @param {Object} opts - Additional options mapping. See\n *                        {@link https://github.com/appium/node-teen_process}\n *                        for more details.\n * @return {string} - Command's stdout.\n * @throws {Error} If the command returned non-zero exit code.\n */\nsystemCallMethods.exec = async function exec (cmd, args = [], opts = {}) {\n  if (!cmd) {\n    throw new Error('You need to pass in a command to exec()');\n  }\n  cmd = _.isArray(cmd) ? cmd : [cmd];\n\n  opts = _.cloneDeep(opts);\n  // setting default timeout for each command to prevent infinite wait.\n  opts.timeout = opts.timeout || this.execTimeout || DEFAULT_IDB_EXEC_TIMEOUT;\n  opts.timeoutCapName = opts.timeoutCapName || 'execTimeout'; // For error message\n\n  const fullArgs = [...cmd, ...this.executable.defaultArgs, ...args];\n  log.debug(`Running '${this.executable.path} ${util.quote(fullArgs)}'`);\n  try {\n    const {stdout} = await tpExec(this.executable.path, fullArgs, opts);\n    return stdout;\n  } catch (e) {\n    if (util.hasValue(e.code)) {\n      e.message = `Error executing ${IDB_EXECUTABLE}. Original error: '${e.message}'; ` +\n        `Stdout: '${(e.stdout || '').trim()}'; ` +\n        `Stderr: '${(e.stderr || '').trim()}'; ` +\n        `Code: '${e.code}'`;\n    } else {\n      e.message = `Error executing ${IDB_EXECUTABLE}. Original error: '${e.message}'. ` +\n        `Try to increase the ${opts.timeout}ms ${IDB_EXECUTABLE} execution timeout represented by '${opts.timeoutCapName}' capability`;\n    }\n    throw e;\n  }\n};\n\n/**\n * Creates SubProcess instance of idb for background\n * execution.\n *\n * @param {Array<String>} command desired idb command (e.g.: [\"launch\"], [\"xctest\", \"run\", \"ui\"])\n * @param {Array<String>} args additional idb arguments\n * @returns {SubProcess}\n */\nsystemCallMethods.createSubProcess = function createSubProcess (command = [], args = [], opts = {}) {\n  const idbArgs = [...command, ...this.executable.defaultArgs, ...args];\n  log.debug(`Creating ${IDB_EXECUTABLE} subprocess with args: ${util.quote(args)}`);\n  return new SubProcess(this.executable.path, idbArgs, opts);\n};\n\nexport default systemCallMethods;\n"],"mappings":"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"}