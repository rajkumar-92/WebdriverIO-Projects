"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bundleWDASim = bundleWDASim;
exports.checkForDependencies = checkForDependencies;
require("source-map-support/register");
var _support = require("appium/support");
var _lodash = _interopRequireDefault(require("lodash"));
var _teen_process = require("teen_process");
var _path = _interopRequireDefault(require("path"));
var _xcodebuild = _interopRequireDefault(require("./xcodebuild"));
var _constants = require("./constants");
var _utils = require("./utils");
var _logger = _interopRequireDefault(require("./logger"));
async function buildWDASim() {
  const args = ['-project', _path.default.join(_utils.BOOTSTRAP_PATH, 'WebDriverAgent.xcodeproj'), '-scheme', _constants.WDA_SCHEME, '-sdk', _constants.SDK_SIMULATOR, 'CODE_SIGN_IDENTITY=""', 'CODE_SIGNING_REQUIRED="NO"', 'GCC_TREAT_WARNINGS_AS_ERRORS=0'];
  await (0, _teen_process.exec)('xcodebuild', args);
}

async function checkForDependencies() {
  _logger.default.debug('Dependencies are up to date');
  return false;
}
async function bundleWDASim(xcodebuild, opts = {}) {
  if (xcodebuild && !_lodash.default.isFunction(xcodebuild.retrieveDerivedDataPath)) {
    xcodebuild = new _xcodebuild.default();
    opts = xcodebuild;
  }
  const derivedDataPath = await xcodebuild.retrieveDerivedDataPath();
  const wdaBundlePath = _path.default.join(derivedDataPath, 'Build', 'Products', 'Debug-iphonesimulator', _constants.WDA_RUNNER_APP);
  if (await _support.fs.exists(wdaBundlePath)) {
    return wdaBundlePath;
  }
  await buildWDASim(xcodebuild, opts);
  return wdaBundlePath;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJidWlsZFdEQVNpbSIsImFyZ3MiLCJwYXRoIiwiam9pbiIsIkJPT1RTVFJBUF9QQVRIIiwiV0RBX1NDSEVNRSIsIlNES19TSU1VTEFUT1IiLCJleGVjIiwiY2hlY2tGb3JEZXBlbmRlbmNpZXMiLCJsb2ciLCJkZWJ1ZyIsImJ1bmRsZVdEQVNpbSIsInhjb2RlYnVpbGQiLCJvcHRzIiwiXyIsImlzRnVuY3Rpb24iLCJyZXRyaWV2ZURlcml2ZWREYXRhUGF0aCIsIlhjb2RlQnVpbGQiLCJkZXJpdmVkRGF0YVBhdGgiLCJ3ZGFCdW5kbGVQYXRoIiwiV0RBX1JVTk5FUl9BUFAiLCJmcyIsImV4aXN0cyJdLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9jaGVjay1kZXBlbmRlbmNpZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZnMgfSBmcm9tICdhcHBpdW0vc3VwcG9ydCc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgZXhlYyB9IGZyb20gJ3RlZW5fcHJvY2Vzcyc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBYY29kZUJ1aWxkIGZyb20gJy4veGNvZGVidWlsZCc7XG5pbXBvcnQge1xuICBXREFfU0NIRU1FLCBTREtfU0lNVUxBVE9SLCBXREFfUlVOTkVSX0FQUFxufSBmcm9tICcuL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBCT09UU1RSQVBfUEFUSCB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IGxvZyBmcm9tICcuL2xvZ2dlcic7XG5cbmFzeW5jIGZ1bmN0aW9uIGJ1aWxkV0RBU2ltICgpIHtcbiAgY29uc3QgYXJncyA9IFtcbiAgICAnLXByb2plY3QnLCBwYXRoLmpvaW4oQk9PVFNUUkFQX1BBVEgsICdXZWJEcml2ZXJBZ2VudC54Y29kZXByb2onKSxcbiAgICAnLXNjaGVtZScsIFdEQV9TQ0hFTUUsXG4gICAgJy1zZGsnLCBTREtfU0lNVUxBVE9SLFxuICAgICdDT0RFX1NJR05fSURFTlRJVFk9XCJcIicsXG4gICAgJ0NPREVfU0lHTklOR19SRVFVSVJFRD1cIk5PXCInLFxuICAgICdHQ0NfVFJFQVRfV0FSTklOR1NfQVNfRVJST1JTPTAnLFxuICBdO1xuICBhd2FpdCBleGVjKCd4Y29kZWJ1aWxkJywgYXJncyk7XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZXF1aXJlLWF3YWl0XG5hc3luYyBmdW5jdGlvbiBjaGVja0ZvckRlcGVuZGVuY2llcyAoKSB7XG4gIGxvZy5kZWJ1ZygnRGVwZW5kZW5jaWVzIGFyZSB1cCB0byBkYXRlJyk7XG4gIHJldHVybiBmYWxzZTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gYnVuZGxlV0RBU2ltICh4Y29kZWJ1aWxkLCBvcHRzID0ge30pIHtcbiAgaWYgKHhjb2RlYnVpbGQgJiYgIV8uaXNGdW5jdGlvbih4Y29kZWJ1aWxkLnJldHJpZXZlRGVyaXZlZERhdGFQYXRoKSkge1xuICAgIHhjb2RlYnVpbGQgPSBuZXcgWGNvZGVCdWlsZCgpO1xuICAgIG9wdHMgPSB4Y29kZWJ1aWxkO1xuICB9XG5cbiAgY29uc3QgZGVyaXZlZERhdGFQYXRoID0gYXdhaXQgeGNvZGVidWlsZC5yZXRyaWV2ZURlcml2ZWREYXRhUGF0aCgpO1xuICBjb25zdCB3ZGFCdW5kbGVQYXRoID0gcGF0aC5qb2luKGRlcml2ZWREYXRhUGF0aCwgJ0J1aWxkJywgJ1Byb2R1Y3RzJywgJ0RlYnVnLWlwaG9uZXNpbXVsYXRvcicsIFdEQV9SVU5ORVJfQVBQKTtcbiAgaWYgKGF3YWl0IGZzLmV4aXN0cyh3ZGFCdW5kbGVQYXRoKSkge1xuICAgIHJldHVybiB3ZGFCdW5kbGVQYXRoO1xuICB9XG4gIGF3YWl0IGJ1aWxkV0RBU2ltKHhjb2RlYnVpbGQsIG9wdHMpO1xuICByZXR1cm4gd2RhQnVuZGxlUGF0aDtcbn1cblxuZXhwb3J0IHsgY2hlY2tGb3JEZXBlbmRlbmNpZXMsIGJ1bmRsZVdEQVNpbSB9O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBRUEsZUFBZUEsV0FBVyxHQUFJO0VBQzVCLE1BQU1DLElBQUksR0FBRyxDQUNYLFVBQVUsRUFBRUMsYUFBSSxDQUFDQyxJQUFJLENBQUNDLHFCQUFjLEVBQUUsMEJBQTBCLENBQUMsRUFDakUsU0FBUyxFQUFFQyxxQkFBVSxFQUNyQixNQUFNLEVBQUVDLHdCQUFhLEVBQ3JCLHVCQUF1QixFQUN2Qiw0QkFBNEIsRUFDNUIsZ0NBQWdDLENBQ2pDO0VBQ0QsTUFBTSxJQUFBQyxrQkFBSSxFQUFDLFlBQVksRUFBRU4sSUFBSSxDQUFDO0FBQ2hDOztBQUdBLGVBQWVPLG9CQUFvQixHQUFJO0VBQ3JDQyxlQUFHLENBQUNDLEtBQUssQ0FBQyw2QkFBNkIsQ0FBQztFQUN4QyxPQUFPLEtBQUs7QUFDZDtBQUVBLGVBQWVDLFlBQVksQ0FBRUMsVUFBVSxFQUFFQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLEVBQUU7RUFDbEQsSUFBSUQsVUFBVSxJQUFJLENBQUNFLGVBQUMsQ0FBQ0MsVUFBVSxDQUFDSCxVQUFVLENBQUNJLHVCQUF1QixDQUFDLEVBQUU7SUFDbkVKLFVBQVUsR0FBRyxJQUFJSyxtQkFBVSxFQUFFO0lBQzdCSixJQUFJLEdBQUdELFVBQVU7RUFDbkI7RUFFQSxNQUFNTSxlQUFlLEdBQUcsTUFBTU4sVUFBVSxDQUFDSSx1QkFBdUIsRUFBRTtFQUNsRSxNQUFNRyxhQUFhLEdBQUdqQixhQUFJLENBQUNDLElBQUksQ0FBQ2UsZUFBZSxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsdUJBQXVCLEVBQUVFLHlCQUFjLENBQUM7RUFDOUcsSUFBSSxNQUFNQyxXQUFFLENBQUNDLE1BQU0sQ0FBQ0gsYUFBYSxDQUFDLEVBQUU7SUFDbEMsT0FBT0EsYUFBYTtFQUN0QjtFQUNBLE1BQU1uQixXQUFXLENBQUNZLFVBQVUsRUFBRUMsSUFBSSxDQUFDO0VBQ25DLE9BQU9NLGFBQWE7QUFDdEIifQ==