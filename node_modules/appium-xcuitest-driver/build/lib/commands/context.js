"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("source-map-support/register");
var _appiumRemoteDebugger = require("appium-remote-debugger");
var _driver = require("appium/driver");
var _support = require("appium/support");
var _bluebird = _interopRequireDefault(require("bluebird"));
var _iosPerformanceLog = _interopRequireDefault(require("../device-log/ios-performance-log"));
var _lodash = _interopRequireDefault(require("lodash"));
const NATIVE_WIN = 'NATIVE_APP';
const WEBVIEW_WIN = 'WEBVIEW';
const WEBVIEW_BASE = `${WEBVIEW_WIN}_`;
const RECENT_WEBVIEW_DETECTION_TIMEOUT_MS = 90000;
const commands = {},
  helpers = {},
  extensions = {};
commands.getCurrentContext = async function getCurrentContext() {
  if (this.curContext && this.curContext !== NATIVE_WIN) {
    return `${WEBVIEW_BASE}${this.curContext}`;
  }
  return NATIVE_WIN;
};
extensions.getContextsAndViews = async function getContextsAndViews(useUrl = true) {
  this.log.debug('Retrieving contexts and views');
  let webviews = await this.listWebFrames(useUrl);
  let ctxs = [{
    id: NATIVE_WIN,
    view: {}
  }];
  this.contexts = [NATIVE_WIN];
  for (let view of webviews) {
    ctxs.push({
      id: `${WEBVIEW_BASE}${view.id}`,
      view
    });
    this.contexts.push(view.id.toString());
  }
  return ctxs;
};

extensions.useNewSafari = function useNewSafari() {
  return !this.isRealDevice() && this.opts.safari;
};
extensions.activateRecentWebview = async function activateRecentWebview() {
  this.log.debug('Activating a recent webview');
  const timer = new _support.timing.Timer().start();
  const spinTimeMs = 500;
  const spinHandles = async () => {
    let contextId;
    try {
      contextId = await this.getRecentWebviewContextId(/.*/, /.*/);
    } catch (err) {
      if (!err.message.includes('Could not connect to a valid app after')) {
        const error = new Error(`Could not navigate to webview! Err: ${err.message}`);
        error.stack += `\nCaused by: ${err.stack}`;
        throw error;
      }
      this.log.debug('Could not navigate to webview. Retrying if possible.');
    }
    if (contextId) {
      this.log.debug(`Picking webview '${contextId}'`);
      await this.setContext(contextId);
      await this.remote.cancelPageLoad();
      return;
    }

    if (timer.getDuration().asMilliSeconds >= RECENT_WEBVIEW_DETECTION_TIMEOUT_MS) {
      throw new Error('Could not navigate to webview; there are none!');
    }
    this.log.warn('Could not find any webviews yet, refreshing/retrying');
    if (this.isRealDevice() || !this.opts.safari) {
      await _bluebird.default.delay(spinTimeMs);
      return await spinHandles();
    }

    let element;
    try {
      this.log.debug('Finding and tapping reload button');
      element = await this.findUIElementOrElements('accessibility id', 'ReloadButton', '', false);
      await this.nativeClick(element);
    } catch (err) {
      this.log.warn(`Error finding and tapping reload button: ${err.message}`);
      this.log.warn('Retrying.');
      await _bluebird.default.delay(spinTimeMs);
    }

    return await spinHandles();
  };
  await spinHandles();
};
helpers.stopRemote = async function stopRemote(closeWindowBeforeDisconnecting = false) {
  if (!this.remote) {
    this.log.errorAndThrow('Tried to leave a web frame but were not in one');
  }
  if (closeWindowBeforeDisconnecting) {
    await this.closeWindow();
  }
  await this.remote.disconnect();
  this.curContext = null;
  this.curWebFrames = [];
  this.curWebCoords = null;
  this.remote = null;
};
helpers.setCurrentUrl = function setCurrentUrl(url) {
  this._currentUrl = url;
};
helpers.getCurrentUrl = function getCurrentUrl() {
  return this._currentUrl;
};
extensions.getRecentWebviewContextId = async function getRecentWebviewContextId(titleRegExp, urlRegExp) {
  var _contexts$find;
  if (!_lodash.default.isRegExp(titleRegExp) && !_lodash.default.isRegExp(urlRegExp)) {
    throw new _driver.errors.InvalidArgumentError('A regular expression for either web view title or url must be provided');
  }
  const currentUrl = this.getCurrentUrl();
  const contexts = _lodash.default.filter(await this.getContextsAndViews(false), 'view');
  if (currentUrl) {
    const ctx = contexts.find(({
      view
    }) => (view.url || '') === currentUrl);
    if (ctx) {
      return ctx.id;
    }
  }
  return (_contexts$find = contexts.find(({
    view
  }) => view.title && (titleRegExp === null || titleRegExp === void 0 ? void 0 : titleRegExp.test(view.title)) || view.url && (urlRegExp === null || urlRegExp === void 0 ? void 0 : urlRegExp.test(view.url)))) === null || _contexts$find === void 0 ? void 0 : _contexts$find.id;
};
extensions.isWebContext = function isWebContext() {
  return !!this.curContext && this.curContext !== NATIVE_WIN;
};
extensions.isWebview = function isWebview() {
  return this.isWebContext();
};
extensions.getNewRemoteDebugger = async function getNewRemoteDebugger() {
  let socketPath;
  if (!this.isRealDevice()) {
    socketPath = await this.opts.device.getWebInspectorSocket();
  }
  return (0, _appiumRemoteDebugger.createRemoteDebugger)({
    bundleId: this.opts.bundleId,
    additionalBundleIds: this.opts.additionalWebviewBundleIds,
    isSafari: this.isSafari(),
    includeSafari: this.opts.includeSafariInWebviews,
    useNewSafari: this.useNewSafari(),
    pageLoadMs: this.pageLoadMs,
    platformVersion: this.opts.platformVersion,
    socketPath,
    remoteDebugProxy: this.opts.remoteDebugProxy,
    garbageCollectOnExecute: _support.util.hasValue(this.opts.safariGarbageCollect) ? !!this.opts.safariGarbageCollect : false,
    udid: this.opts.udid,
    logAllCommunication: this.opts.safariLogAllCommunication,
    logAllCommunicationHexDump: this.opts.safariLogAllCommunicationHexDump,
    socketChunkSize: this.opts.safariSocketChunkSize,
    webInspectorMaxFrameLength: this.opts.safariWebInspectorMaxFrameLength
  }, this.isRealDevice());
};

commands.setContext = async function setContext(name, callback, skipReadyCheck) {
  function alreadyInContext(desired, current) {
    return desired === current || desired === null && current === NATIVE_WIN || desired === NATIVE_WIN && current === null;
  }
  function isNativeContext(context) {
    return context === NATIVE_WIN || context === null;
  }

  if (name && name.id) {
    name = name.id;
  }
  this.log.debug(`Attempting to set context to '${name || NATIVE_WIN}' from '${this.curContext ? this.curContext : NATIVE_WIN}'`);
  if (alreadyInContext(name, this.curContext) || alreadyInContext(_lodash.default.replace(name, WEBVIEW_BASE, ''), this.curContext)) {
    this.log.debug(`Already in '${name || NATIVE_WIN}' context. Doing nothing.`);
    return;
  }
  if (isNativeContext(name)) {
    this.curContext = null;
    return;
  }

  if (_lodash.default.isUndefined(this.contexts)) {
    await this.getContexts();
  }
  let contextId = _lodash.default.replace(name, WEBVIEW_BASE, '');
  if (contextId === '') {
    contextId = this.contexts[1];
  }
  if (!_lodash.default.includes(this.contexts, contextId)) {
    throw new _driver.errors.NoSuchContextError();
  }
  const oldContext = this.curContext;
  this.curContext = this.curWindowHandle = contextId;

  const [appIdKey, pageIdKey] = _lodash.default.map(contextId.split('.'), id => parseInt(id, 10));
  try {
    this.selectingNewPage = true;
    await this.remote.selectPage(appIdKey, pageIdKey, skipReadyCheck);
  } catch (err) {
    this.curContext = this.curWindowHandle = oldContext;
    throw err;
  } finally {
    this.selectingNewPage = false;
  }

  if (this.opts.enablePerformanceLogging && this.remote) {
    this.log.debug(`Starting performance log on '${this.curContext}'`);
    this.logs.performance = new _iosPerformanceLog.default(this.remote);
    await this.logs.performance.startCapture();
  }

  if (name && name !== NATIVE_WIN && this.logs) {
    if (this.logs.safariConsole) {
      await this.remote.startConsole(this.logs.safariConsole.addLogLine.bind(this.logs.safariConsole));
    }
    if (this.logs.safariNetwork) {
      await this.remote.startNetwork(this.logs.safariNetwork.addLogLine.bind(this.logs.safariNetwork));
    }
  }
};
extensions.connectToRemoteDebugger = async function connectToRemoteDebugger() {
  this.remote = await this.getNewRemoteDebugger();
  this.remote.on(_appiumRemoteDebugger.RemoteDebugger.EVENT_PAGE_CHANGE, this.onPageChange.bind(this));
  this.remote.on(_appiumRemoteDebugger.RemoteDebugger.EVENT_FRAMES_DETACHED, () => {
    if (!_lodash.default.isEmpty(this.curWebFrames)) {
      this.log.debug(`Clearing ${_support.util.pluralize('frame', this.curWebFrames.length, true)}: ${this.curWebFrames.join(', ')}`);
    }
    this.curWebFrames = [];
  });
  await this.remote.connect(this.opts.webviewConnectTimeout);
};
extensions.listWebFrames = async function listWebFrames(useUrl = true) {
  useUrl = useUrl && !this.isRealDevice() && !!this.getCurrentUrl();
  this.log.debug(`Selecting by url: ${useUrl}${useUrl ? ` (expected url: '${this.getCurrentUrl()}')` : ''}`);
  if (!this.remote) {
    await this.connectToRemoteDebugger();
    if (!this.remote.appIdKey) {
      await this.remote.setConnectionKey();
    }
  }
  const getWebviewPages = async () => {
    try {
      return await this.remote.selectApp(useUrl ? this.getCurrentUrl() : undefined, this.opts.webviewConnectRetries, this.opts.ignoreAboutBlankUrl);
    } catch (err) {
      this.log.debug(`No available web pages: ${err.message}`);
      return [];
    }
  };
  const pageArray = await getWebviewPages();
  if (_lodash.default.isEmpty(pageArray)) {
    this.log.debug('No web frames found.');
  }
  return pageArray;
};
commands.getContexts = async function getContexts() {
  this.log.debug('Getting list of available contexts');
  const contexts = await this.getContextsAndViews(false);
  const mapFn = this.opts.fullContextList ? function (context) {
    return {
      id: context.id.toString(),
      title: context.view.title,
      url: context.view.url,
      bundleId: context.view.bundleId
    };
  } : context => context.id.toString();
  return contexts.map(mapFn);
};

extensions.mobileGetContexts = async function mobileGetContexts(opts = {}) {
  let {
    waitForWebviewMs = 0
  } = opts;

  if (!_lodash.default.isNumber(waitForWebviewMs)) {
    waitForWebviewMs = parseInt(waitForWebviewMs, 10);
    if (isNaN(waitForWebviewMs)) {
      waitForWebviewMs = 0;
    }
  }
  const curOpt = this.opts.fullContextList;
  this.opts.fullContextList = true;
  const timer = new _support.timing.Timer().start();
  try {
    let contexts;
    do {
      contexts = await this.getContexts();
      if (contexts.length >= 2) {
        this.log.debug(`Found webview context after ${timer.getDuration().asMilliSeconds.toFixed(0)}ms`);
        return contexts;
      }
      this.log.debug(`No webviews found in ${timer.getDuration().asMilliSeconds.toFixed(0)}ms`);
    } while (timer.getDuration().asMilliSeconds < waitForWebviewMs);
    return contexts;
  } finally {
    this.opts.fullContextList = curOpt;
  }
};
commands.setWindow = async function setWindow(name, skipReadyCheck) {
  try {
    await this.setContext(name, _lodash.default.noop, skipReadyCheck);
  } catch (err) {
    throw (0, _driver.isErrorType)(err, _driver.errors.NoSuchContextError) ? new _driver.errors.NoSuchWindowError() : err;
  }
};
commands.getWindowHandle = async function getWindowHandle() {
  if (!this.isWebContext()) {
    throw new _driver.errors.NotImplementedError();
  }
  this.log.debug(`Getting current window handle`);
  return this.curContext;
};
commands.getWindowHandles = async function getWindowHandles() {
  if (!this.isWebContext()) {
    throw new _driver.errors.NotImplementedError();
  }
  this.log.debug('Getting list of available window handles');
  const contexts = await this.getContextsAndViews(false);
  return contexts
  .filter(context => context.id !== NATIVE_WIN)
  .map(context => context.view.id.toString());
};
extensions.onPageChange = async function onPageChange(pageChangeNotification) {
  this.log.debug(`Remote debugger notified us of a new page listing: ${JSON.stringify(pageChangeNotification)}`);
  if (this.selectingNewPage) {
    this.log.debug('We are in the middle of selecting a page, ignoring');
    return;
  }
  if (!this.remote || !this.remote.isConnected) {
    this.log.debug('We have not yet connected, ignoring');
    return;
  }
  const {
    appIdKey,
    pageArray
  } = pageChangeNotification;
  let newIds = [];
  let newPages = [];
  let keyId = null;

  function isUrlIgnored(url, safariIgnoreWebHostnames) {
    const ignoredHosts = (safariIgnoreWebHostnames || '').split(',').map(b => b.trim()).filter(b => !_lodash.default.isEmpty(b));
    for (const ignoredHost of ignoredHosts) {
      if (ignoredHost === 'about:blank' && url === 'about:blank') {
        return true;
      } else {
        try {
          const hostname = new URL(url).hostname;
          if (hostname === ignoredHost) {
            return true;
          }
        } catch (ign) {
        }
      }
    }
    return false;
  }
  for (const page of pageArray) {
    const id = page.id.toString();
    newIds.push(id);
    if (page.isKey) {
      keyId = id;
    }
    const contextId = `${appIdKey}.${id}`;

    if (!_lodash.default.includes(this.contexts, contextId)) {
      if (isUrlIgnored(page.url, this.opts.safariIgnoreWebHostnames)) {
        this.log.info(`Not tracking '${page.url}' page because it is blacklisted. ` + `'safariIgnoreWebHostnames'=${this.opts.safariIgnoreWebHostnames}`);
      } else {
        newPages.push(id);
        this.contexts.push(contextId);
      }
    }
  }
  if (!keyId) {
    this.log.debug('No key id found. Choosing first id from page array');
    keyId = newIds[0] || null;
  }
  if (!_support.util.hasValue(this.curContext)) {
    this.log.debug('We do not appear to have window set yet, ignoring');
    return;
  }
  const [curAppIdKey, curPageIdKey] = this.curContext.split('.');
  if (curAppIdKey !== appIdKey) {
    this.log.debug('Page change not referring to currently selected app, ignoring.');
    return;
  }
  let newPage = null;
  if (newPages.length) {
    newPage = _lodash.default.last(newPages);
    this.log.debug(`We have new pages, selecting page '${newPage}'`);
  } else if (!_lodash.default.includes(newIds, curPageIdKey)) {
    this.log.debug('New page listing from remote debugger does not contain ' + 'current window; assuming it is closed');
    if (!_support.util.hasValue(keyId)) {
      this.log.error('Do not have our current window anymore, and there ' + 'are not any more to load! Doing nothing...');
      this.setCurrentUrl(undefined);
      return;
    }
    this.log.debug(`Debugger already selected page '${keyId}', ` + `confirming that choice.`);
    this.curContext = `${appIdKey}.${keyId}`;
    newPage = keyId;
  } else {
    this.log.debug('Checking if page needs to load');
    const needsPageLoad = (() => {
      const contextArray = _lodash.default.map(pageArray, page => `${appIdKey}.${page.id}`);
      return !_lodash.default.isEqual(_lodash.default.find(this.contexts, this.curContext), _lodash.default.find(contextArray, this.curContext));
    })();
    if (needsPageLoad) {
      this.log.debug('Page load needed. Loading...');
      await this.remote.pageLoad();
    }
    this.log.debug('New page listing is same as old, doing nothing');
  }

  if (_support.util.hasValue(this.curContext)) {
    let currentPageId = parseInt(_lodash.default.last(this.curContext.split('.')), 10);
    let page = _lodash.default.find(pageArray, p => parseInt(p.id, 10) === currentPageId);
    if (page && page.url !== this.getCurrentUrl()) {
      this.log.debug(`Redirected from '${this.getCurrentUrl()}' to '${page.url}'`);
      this.setCurrentUrl(page.url);
    }
  }
  if (_support.util.hasValue(newPage)) {
    this.selectingNewPage = true;
    const oldContext = this.curContext;
    this.curContext = `${appIdKey}.${newPage}`;
    this.remote.selectPage(appIdKey, parseInt(newPage, 10)).catch(err => {
      this.log.warn(`Failed to select page: ${err.message}`);
      this.curContext = oldContext;
    });
    this.selectingNewPage = false;
  }
  this.windowHandleCache = pageArray;
};
Object.assign(commands, extensions, helpers);
var _default = commands;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,