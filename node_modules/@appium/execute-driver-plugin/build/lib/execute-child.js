"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.W3C_ELEMENT_KEY = exports.MJSONWP_ELEMENT_KEY = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _vm = require("vm2");

var _support = require("appium/support");

var _webdriverio = require("webdriverio");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const log = _support.logger.getLogger('ExecuteDriver Child');

let send;
const W3C_ELEMENT_KEY = _support.util.W3C_WEB_ELEMENT_IDENTIFIER;
exports.W3C_ELEMENT_KEY = W3C_ELEMENT_KEY;
const MJSONWP_ELEMENT_KEY = 'ELEMENT';
exports.MJSONWP_ELEMENT_KEY = MJSONWP_ELEMENT_KEY;

async function runScript(driverOpts, script, timeoutMs) {
  if (!_lodash.default.isNumber(timeoutMs)) {
    throw new TypeError('Timeout parameter must be a number');
  }

  const logLevels = ['error', 'warn', 'log'];
  const logs = {};
  const consoleFns = {};

  for (const level of logLevels) {
    logs[level] = [];

    consoleFns[level] = (...logMsgs) => logs[level].push(...logMsgs);
  }

  const driver = await (0, _webdriverio.attach)(driverOpts);
  const fullScript = buildScript(script);
  log.info('Running driver script in Node vm');
  const vmCtx = new _vm.NodeVM({
    timeout: timeoutMs
  });
  const vmFn = vmCtx.run(fullScript);
  let result = await vmFn(driver, consoleFns, _bluebird.default);
  result = coerceScriptResult(result);
  log.info('Successfully ensured driver script result is appropriate type for return');
  return {
    result,
    logs
  };
}

function buildScript(script) {
  return `module.exports = async function execute (driver, console, Promise) {
    ${script}
  }`;
}

function coerceScriptResult(obj) {
  try {
    obj = JSON.parse(JSON.stringify(obj));
  } catch (e) {
    log.warn('Could not convert executeDriverScript to safe response!' + `Result was: ${JSON.stringify(obj)}. Will make it null`);
    return null;
  }

  let res;

  if (_lodash.default.isPlainObject(obj)) {
    res = {};

    if (obj[MJSONWP_ELEMENT_KEY] || obj[W3C_ELEMENT_KEY]) {
      if (obj[MJSONWP_ELEMENT_KEY]) {
        res[MJSONWP_ELEMENT_KEY] = obj[MJSONWP_ELEMENT_KEY];
      }

      if (obj[W3C_ELEMENT_KEY]) {
        res[W3C_ELEMENT_KEY] = obj[W3C_ELEMENT_KEY];
      }

      return res;
    }

    for (const key of Object.keys(obj)) {
      res[key] = coerceScriptResult(obj[key]);
    }

    return res;
  }

  if (_lodash.default.isArray(obj)) {
    return obj.map(coerceScriptResult);
  }

  return obj;
}

async function main(driverOpts, script, timeoutMs) {
  let res;

  try {
    res = {
      success: await runScript(driverOpts, script, timeoutMs)
    };
  } catch (error) {
    res = {
      error: {
        message: error.message,
        stack: error.stack
      }
    };
  }

  await send(res);
}

if (require.main === module && _lodash.default.isFunction(process.send)) {
  send = _bluebird.default.promisify(process.send, {
    context: process
  });
  log.info('Running driver execution in child process');
  process.on('message', ({
    driverOpts,
    script,
    timeoutMs
  }) => {
    log.info('Parameters received from parent process');
    main(driverOpts, script, timeoutMs);
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,