"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ExecuteDriverPlugin = void 0;

require("source-map-support/register");

var _plugin = require("appium/plugin");

var _lodash = _interopRequireDefault(require("lodash"));

var _child_process = _interopRequireDefault(require("child_process"));

var _support = require("appium/support");

var _bluebird = _interopRequireDefault(require("bluebird"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const FEAT_FLAG = 'execute_driver_script';
const DEFAULT_SCRIPT_TIMEOUT_MS = 1000 * 60 * 60;
const SCRIPT_TYPE_WDIO = 'webdriverio';

class ExecuteDriverPlugin extends _plugin.BasePlugin {
  static newMethodMap = {
    '/session/:sessionId/appium/execute_driver': {
      POST: {
        command: 'executeDriverScript',
        payloadParams: {
          required: ['script'],
          optional: ['type', 'timeout']
        }
      }
    }
  };

  async executeDriverScript(next, driver, script, scriptType = 'webdriverio', timeoutMs = DEFAULT_SCRIPT_TIMEOUT_MS) {
    if (!driver.isFeatureEnabled(FEAT_FLAG)) {
      throw new Error(`Execute driver script functionality is not available ` + `unless server is started with --allow-insecure including ` + `the '${FEAT_FLAG}' flag, e.g., --allow-insecure=${FEAT_FLAG}`);
    }

    if (scriptType !== SCRIPT_TYPE_WDIO) {
      throw new TypeError(`Only the '${SCRIPT_TYPE_WDIO}' script type is currently supported`);
    }

    if (!driver.serverHost || !driver.serverPort) {
      throw new Error('Address or port of running server were not defined; this ' + 'is required. This is probably a programming error in the driver');
    }

    if (!_lodash.default.isNumber(timeoutMs)) {
      throw new TypeError('Timeout parameter must be a number');
    }

    const driverOpts = {
      sessionId: driver.sessionId,
      protocol: 'http',
      hostname: driver.serverHost,
      port: driver.serverPort,
      path: driver.serverPath,
      isW3C: true,
      isMobile: true,
      capabilities: driver.caps
    };
    this.logger.info(`Constructed webdriverio driver options; W3C mode is ${driverOpts.isW3C ? 'on' : 'off'}`);

    const childScript = require.resolve('./execute-child.js');

    this.logger.info(`Forking process to run webdriver script as child using ${childScript}`);

    const scriptProc = _child_process.default.fork(childScript);

    let timeoutCanceled = false;

    try {
      const timer = new _support.timing.Timer();
      timer.start();

      const waitForResult = async () => {
        const res = await new _bluebird.default(res => {
          scriptProc.on('message', res);
        });
        this.logger.info('Received execute driver script result from child process, shutting it down');

        if (res.error) {
          throw new Error(res.error.message);
        }

        return res.success;
      };

      const waitForTimeout = async () => {
        while (!timeoutCanceled && timer.getDuration().asMilliSeconds < timeoutMs) {
          await _bluebird.default.delay(500);
        }

        if (timeoutCanceled) {
          return;
        }

        throw new Error(`Execute driver script timed out after ${timeoutMs}ms. ` + `You can adjust this with the 'timeout' parameter.`);
      };

      this.logger.info('Sending driver and script data to child');
      scriptProc.send({
        driverOpts,
        script,
        timeoutMs
      });
      return await _bluebird.default.race([waitForResult(), waitForTimeout()]);
    } catch (err) {
      throw new Error(`Could not execute driver script. Original error was: ${err}`);
    } finally {
      timeoutCanceled = true;

      if (scriptProc.connected) {
        this.logger.info('Disconnecting from child proc');
        scriptProc.disconnect();
      }

      if (scriptProc.exitCode === null) {
        this.logger.info('Disconnecting from and killing driver script child proc');
        scriptProc.kill();
      } else {
        this.logger.info('Script already ended on its own, no need to kill it');
      }
    }
  }

}

exports.ExecuteDriverPlugin = exports.default = ExecuteDriverPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,