"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getImageOccurrence = getImageOccurrence;
exports.getImagesMatches = getImagesMatches;
exports.getImagesSimilarity = getImagesSimilarity;
exports.initOpenCv = initOpenCv;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _jimp = _interopRequireDefault(require("jimp"));

var _buffer = require("buffer");

var _bluebird = _interopRequireDefault(require("bluebird"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let cv;
const DEFAULT_MATCH_THRESHOLD = 0.5;
const MATCH_NEIGHBOUR_THRESHOLD = 10;
const AVAILABLE_DETECTORS = {
  AKAZE: 'AKAZE',
  AGAST: 'AgastFeatureDetector',
  BRISK: 'BRISK',
  FAST: 'FastFeatureDetector',
  GFTT: 'GFTTDetector',
  KAZE: 'KAZE',
  MSER: 'MSER',
  ORB: 'ORB'
};
const AVAILABLE_MATCHING_FUNCTIONS = {
  FlannBased: 'FlannBased',
  BruteForce: 'BruteForce',
  BruteForceL1: 'BruteForce-L1',
  BruteForceHamming: 'BruteForce-Hamming',
  BruteForceHammingLut: 'BruteForce-HammingLUT',
  BruteForceSL2: 'BruteForce-SL2'
};
const MATCHING_METHODS = ['TM_CCOEFF', 'TM_CCOEFF_NORMED', 'TM_CCORR', 'TM_CCORR_NORMED', 'TM_SQDIFF', 'TM_SQDIFF_NORMED'];
const DEFAULT_MATCHING_METHOD = 'TM_CCOEFF_NORMED';

function toMatchingMethod(name) {
  if (!MATCHING_METHODS.includes(name)) {
    throw new Error(`The matching method '${name}' is unknown. ` + `Only the following matching methods are supported: ${MATCHING_METHODS}`);
  }

  return cv[name];
}

async function initOpenCv() {
  cv = require('opencv-bindings');

  while (!cv.getBuildInformation) {
    await _bluebird.default.delay(500);
  }

  process.removeAllListeners('unhandledRejection');
}

function detectAndCompute(img, detector) {
  const keyPoints = new cv.KeyPointVector();
  const descriptor = new cv.Mat();
  detector.detect(img, keyPoints);
  detector.compute(img, keyPoints, descriptor);
  return {
    keyPoints,
    descriptor
  };
}

function calculateMatchedRect(matchedPoints) {
  if (matchedPoints.length < 2) {
    return {
      x: 0,
      y: 0,
      width: 0,
      height: 0
    };
  }

  const pointsSortedByDistance = matchedPoints.map(point => [Math.sqrt(point.x * point.x + point.y * point.y), point]).sort((pair1, pair2) => pair1[0] >= pair2[0]).map(pair => pair[1]);

  const firstPoint = _lodash.default.head(pointsSortedByDistance);

  const lastPoint = _lodash.default.last(pointsSortedByDistance);

  const topLeftPoint = {
    x: firstPoint.x <= lastPoint.x ? firstPoint.x : lastPoint.x,
    y: firstPoint.y <= lastPoint.y ? firstPoint.y : lastPoint.y
  };
  const bottomRightPoint = {
    x: firstPoint.x >= lastPoint.x ? firstPoint.x : lastPoint.x,
    y: firstPoint.y >= lastPoint.y ? firstPoint.y : lastPoint.y
  };
  return {
    x: topLeftPoint.x,
    y: topLeftPoint.y,
    width: bottomRightPoint.x - topLeftPoint.x,
    height: bottomRightPoint.y - topLeftPoint.y
  };
}

function highlightRegion(mat, region) {
  if (region.width <= 0 || region.height <= 0) {
    return;
  }

  const color = new cv.Scalar(255, 0, 0, 255);
  const thickness = 2;
  const topLeft = new cv.Point(region.x, region.y);
  const botRight = new cv.Point(region.x + region.width, region.y + region.height);
  cv.rectangle(mat, topLeft, botRight, color, thickness, cv.LINE_8, 0);
  return mat;
}

async function getImagesMatches(img1Data, img2Data, options = {}) {
  await initOpenCv();
  let img1, img2, detector, result1, result2, matcher, matchesVec;

  try {
    const {
      detectorName = 'ORB',
      visualize = false,
      goodMatchesFactor,
      matchFunc = 'BruteForce'
    } = options;

    if (!_lodash.default.includes(_lodash.default.keys(AVAILABLE_DETECTORS), detectorName)) {
      throw new Error(`'${detectorName}' detector is unknown. ` + `Only ${JSON.stringify(_lodash.default.keys(AVAILABLE_DETECTORS))} detectors are supported.`);
    }

    if (!_lodash.default.includes(_lodash.default.keys(AVAILABLE_MATCHING_FUNCTIONS), matchFunc)) {
      throw new Error(`'${matchFunc}' matching function is unknown. ` + `Only ${JSON.stringify(_lodash.default.keys(AVAILABLE_MATCHING_FUNCTIONS))} matching functions are supported.`);
    }

    detector = new cv[AVAILABLE_DETECTORS[detectorName]]();
    [img1, img2] = await _bluebird.default.all([cvMatFromImage(img1Data), cvMatFromImage(img2Data)]);
    result1 = detectAndCompute(img1, detector);
    result2 = detectAndCompute(img2, detector);
    matcher = new cv.DescriptorMatcher(AVAILABLE_MATCHING_FUNCTIONS[matchFunc]);
    matchesVec = new cv.DMatchVector();
    let matches = [];
    matcher.match(result1.descriptor, result2.descriptor, matchesVec);
    const totalCount = matchesVec.size();

    if (totalCount < 1) {
      throw new Error(`Could not find any matches between images. Double-check orientation, ` + `resolution, or use another detector or matching function.`);
    }

    for (let i = 0; i < totalCount; i++) {
      matches.push(matchesVec.get(i));
    }

    const hasGoodMatchesFactor = _lodash.default.isFunction(goodMatchesFactor) || _lodash.default.isNumber(goodMatchesFactor) && !_lodash.default.isNaN(goodMatchesFactor);

    if (hasGoodMatchesFactor) {
      if (_lodash.default.isFunction(goodMatchesFactor)) {
        const distances = matches.map(match => match.distance);

        const minDistance = _lodash.default.min(distances);

        const maxDistance = _lodash.default.max(distances);

        matches = matches.filter(match => goodMatchesFactor(match.distance, minDistance, maxDistance));
      } else {
        if (matches.length > goodMatchesFactor) {
          matches = matches.sort((match1, match2) => match1.distance - match2.distance).slice(0, goodMatchesFactor);
        }
      }
    }

    const extractPoint = (keyPoints, indexPropertyName) => match => {
      const {
        pt,
        point
      } = keyPoints.get(match[indexPropertyName]);
      return pt || point;
    };

    const points1 = matches.map(extractPoint(result1.keyPoints, 'queryIdx'));
    const rect1 = calculateMatchedRect(points1);
    const points2 = matches.map(extractPoint(result2.keyPoints, 'trainIdx'));
    const rect2 = calculateMatchedRect(points2);
    const result = {
      points1,
      rect1,
      points2,
      rect2,
      totalCount,
      count: matches.length
    };

    if (visualize) {
      const goodMatchesVec = new cv.DMatchVector();

      for (let i = 0; i < matches.length; i++) {
        goodMatchesVec.push_back(matches[i]);
      }

      const visualization = new cv.Mat();
      const color = new cv.Scalar(0, 255, 0, 255);
      cv.drawMatches(img1, result1.keyPoints, img2, result2.keyPoints, goodMatchesVec, visualization, color);
      highlightRegion(visualization, rect1);
      highlightRegion(visualization, {
        x: img1.cols + rect2.x,
        y: rect2.y,
        width: rect2.width,
        height: rect2.height
      });
      result.visualization = await jimpImgFromCvMat(visualization).getBufferAsync(_jimp.default.MIME_PNG);
    }

    return result;
  } finally {
    try {
      img1.delete();
      img2.delete();
      detector.delete();
      result1.keyPoints.delete();
      result1.descriptor.delete();
      result2.keyPoints.delete();
      result2.descriptor.delete();
      matcher.delete();
      matchesVec.delete();
    } catch (ign) {}
  }
}

async function getImagesSimilarity(img1Data, img2Data, options = {}) {
  await initOpenCv();
  const {
    method = DEFAULT_MATCHING_METHOD,
    visualize = false
  } = options;
  let template, reference, matched;

  try {
    [template, reference] = await _bluebird.default.all([cvMatFromImage(img1Data), cvMatFromImage(img2Data)]);

    if (template.rows !== reference.rows || template.cols !== reference.cols) {
      throw new Error('Both images are expected to have the same size in order to ' + 'calculate the similarity score.');
    }

    template.convertTo(template, cv.CV_8UC3);
    reference.convertTo(reference, cv.CV_8UC3);
    matched = new cv.Mat();
    cv.matchTemplate(reference, template, matched, toMatchingMethod(method));
    const minMax = cv.minMaxLoc(matched);
    const result = {
      score: minMax.maxVal
    };

    if (visualize) {
      let bothImages, resultMat, mask, contours, hierarchy;

      try {
        resultMat = new cv.Mat(template.rows, template.cols * 2, cv.CV_8UC3);
        bothImages = new cv.MatVector();
        bothImages.push_back(reference);
        bothImages.push_back(template);
        cv.hconcat(bothImages, resultMat);
        mask = new cv.Mat();
        cv.absdiff(reference, template, mask);
        cv.cvtColor(mask, mask, cv.COLOR_BGR2GRAY, 0);
        cv.threshold(mask, mask, 128, 255, cv.THRESH_BINARY | cv.THRESH_OTSU);
        contours = new cv.MatVector();
        hierarchy = new cv.Mat();
        cv.findContours(mask, contours, hierarchy, cv.RETR_EXTERNAL, cv.CHAIN_APPROX_SIMPLE);

        for (let i = 0; i < contours.size(); i++) {
          const boundingRect = cv.boundingRect(contours.get(i));
          highlightRegion(resultMat, boundingRect);
          highlightRegion(resultMat, {
            x: reference.cols + boundingRect.x,
            y: boundingRect.y,
            width: boundingRect.width,
            height: boundingRect.height
          });
        }

        result.visualization = await jimpImgFromCvMat(resultMat).getBufferAsync(_jimp.default.MIME_PNG);
      } finally {
        try {
          bothImages.delete();
          resultMat.delete();
          mask.delete();
          contours.delete();
          hierarchy.delete();
        } catch (ign) {}
      }
    }

    return result;
  } finally {
    try {
      template.delete();
      reference.delete();
      matched.delete();
    } catch (ign) {}
  }
}

async function getImageOccurrence(fullImgData, partialImgData, options = {}) {
  await initOpenCv();
  const {
    visualize = false,
    threshold = DEFAULT_MATCH_THRESHOLD,
    multiple = false,
    matchNeighbourThreshold = MATCH_NEIGHBOUR_THRESHOLD,
    method = DEFAULT_MATCHING_METHOD
  } = options;
  let fullImg, partialImg, matched;

  try {
    [fullImg, partialImg] = await _bluebird.default.all([cvMatFromImage(fullImgData), cvMatFromImage(partialImgData)]);
    matched = new cv.Mat();
    const results = [];
    let visualization = null;

    try {
      cv.matchTemplate(fullImg, partialImg, matched, toMatchingMethod(method));
      const minMax = cv.minMaxLoc(matched);

      if (multiple) {
        const matches = [];

        for (let row = 0; row < matched.rows; row++) {
          for (let col = 0; col < matched.cols; col++) {
            const score = matched.floatAt(row, col);

            if (score >= threshold) {
              matches.push({
                score,
                x: col,
                y: row
              });
            }
          }
        }

        const nearMatches = filterNearMatches(matches, matchNeighbourThreshold);

        for (const {
          x,
          y,
          score
        } of nearMatches) {
          results.push({
            score,
            rect: {
              x,
              y,
              width: partialImg.cols,
              height: partialImg.rows
            }
          });
        }
      } else if (minMax.maxVal >= threshold) {
        const {
          x,
          y
        } = method.includes('SQDIFF') ? minMax.minLoc : minMax.maxLoc;
        results.push({
          score: minMax.maxVal,
          rect: {
            x,
            y,
            width: partialImg.cols,
            height: partialImg.rows
          }
        });
      }

      if (_lodash.default.isEmpty(results)) {
        throw new Error(`Match threshold: ${threshold}. Highest match value ` + `found was ${minMax.maxVal}`);
      }
    } catch (e) {
      throw new Error(`Cannot find any occurrences of the partial image in the full image. ` + `Original error: ${e.message}`);
    }

    if (visualize) {
      const fullHighlightedImage = fullImg.clone();

      for (const result of results) {
        const singleHighlightedImage = fullImg.clone();
        highlightRegion(singleHighlightedImage, result.rect);
        highlightRegion(fullHighlightedImage, result.rect);
        result.visualization = await jimpImgFromCvMat(singleHighlightedImage).getBufferAsync(_jimp.default.MIME_PNG);
      }

      visualization = await jimpImgFromCvMat(fullHighlightedImage).getBufferAsync(_jimp.default.MIME_PNG);
    }

    return {
      rect: results[0].rect,
      score: results[0].score,
      visualization,
      multiple: results
    };
  } finally {
    try {
      fullImg.delete();
      partialImg.delete();
      matched.delete();
    } catch (ign) {}
  }
}

function jimpImgFromCvMat(mat) {
  return new _jimp.default({
    width: mat.cols,
    height: mat.rows,
    data: _buffer.Buffer.from(mat.data)
  });
}

async function cvMatFromImage(img) {
  const jimpImg = await _jimp.default.read(img);
  return cv.matFromImageData(jimpImg.bitmap);
}

function filterNearMatches(nonZeroMatchResults, matchNeighbourThreshold) {
  return nonZeroMatchResults.reduce((acc, element) => {
    if (!acc.some(match => distance(match, element) <= matchNeighbourThreshold)) {
      acc.push(element);
    }

    return acc;
  }, []);
}

function distance(point1, point2) {
  const a2 = Math.pow(point1.x - point2.x, 2);
  const b2 = Math.pow(point1.y - point2.y, 2);
  return Math.sqrt(a2 + b2);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,