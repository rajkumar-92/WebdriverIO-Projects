{"version":3,"file":"index.js","names":["cv","DEFAULT_MATCH_THRESHOLD","MATCH_NEIGHBOUR_THRESHOLD","AVAILABLE_DETECTORS","AKAZE","AGAST","BRISK","FAST","GFTT","KAZE","MSER","ORB","AVAILABLE_MATCHING_FUNCTIONS","FlannBased","BruteForce","BruteForceL1","BruteForceHamming","BruteForceHammingLut","BruteForceSL2","MATCHING_METHODS","DEFAULT_MATCHING_METHOD","toMatchingMethod","name","includes","Error","initOpenCv","require","getBuildInformation","B","delay","process","removeAllListeners","detectAndCompute","img","detector","keyPoints","KeyPointVector","descriptor","Mat","detect","compute","calculateMatchedRect","matchedPoints","length","x","y","width","height","pointsSortedByDistance","map","point","Math","sqrt","sort","pair1","pair2","pair","firstPoint","_","head","lastPoint","last","topLeftPoint","bottomRightPoint","highlightRegion","mat","region","color","Scalar","thickness","topLeft","Point","botRight","rectangle","LINE_8","getImagesMatches","img1Data","img2Data","options","img1","img2","result1","result2","matcher","matchesVec","detectorName","visualize","goodMatchesFactor","matchFunc","keys","JSON","stringify","all","cvMatFromImage","DescriptorMatcher","DMatchVector","matches","match","totalCount","size","i","push","get","hasGoodMatchesFactor","isFunction","isNumber","isNaN","distances","distance","minDistance","min","maxDistance","max","filter","match1","match2","slice","extractPoint","indexPropertyName","pt","points1","rect1","points2","rect2","result","count","goodMatchesVec","push_back","visualization","drawMatches","cols","jimpImgFromCvMat","getBufferAsync","Jimp","MIME_PNG","delete","ign","getImagesSimilarity","method","template","reference","matched","rows","convertTo","CV_8UC3","matchTemplate","minMax","minMaxLoc","score","maxVal","bothImages","resultMat","mask","contours","hierarchy","MatVector","hconcat","absdiff","cvtColor","COLOR_BGR2GRAY","threshold","THRESH_BINARY","THRESH_OTSU","findContours","RETR_EXTERNAL","CHAIN_APPROX_SIMPLE","boundingRect","getImageOccurrence","fullImgData","partialImgData","multiple","matchNeighbourThreshold","fullImg","partialImg","results","row","col","floatAt","nearMatches","filterNearMatches","rect","minLoc","maxLoc","isEmpty","e","message","fullHighlightedImage","clone","singleHighlightedImage","data","Buffer","from","jimpImg","read","matFromImageData","bitmap","nonZeroMatchResults","reduce","acc","element","some","point1","point2","a2","pow","b2"],"sources":["../../lib/index.js"],"sourcesContent":["import _ from 'lodash';\nimport Jimp from 'jimp';\nimport {Buffer} from 'buffer';\nimport B from 'bluebird';\n\n/** @type {any} */\nlet cv;\n\n/**\n * @typedef Region\n * @property {number} left - The offset from the left side\n * @property {number} top - The offset from the top\n * @property {number} width - The width\n * @property {number} height - The height\n */\n\n/**\n * @typedef Point\n * @property {number} x - The x coordinate\n * @property {number} y - The y coordinate\n */\n\n/**\n * @typedef Rect\n * @property {number} x - The top left coordinate\n * @property {number} y - The bottom right coordinate\n * @property {number} width - The width\n * @property {number} height - The height\n */\n\nconst DEFAULT_MATCH_THRESHOLD = 0.5;\nconst MATCH_NEIGHBOUR_THRESHOLD = 10;\n\nconst AVAILABLE_DETECTORS = {\n  AKAZE: 'AKAZE',\n  AGAST: 'AgastFeatureDetector',\n  BRISK: 'BRISK',\n  FAST: 'FastFeatureDetector',\n  GFTT: 'GFTTDetector',\n  KAZE: 'KAZE',\n  MSER: 'MSER',\n  ORB: 'ORB',\n};\n\nconst AVAILABLE_MATCHING_FUNCTIONS = {\n  FlannBased: 'FlannBased',\n  BruteForce: 'BruteForce',\n  BruteForceL1: 'BruteForce-L1',\n  BruteForceHamming: 'BruteForce-Hamming',\n  BruteForceHammingLut: 'BruteForce-HammingLUT',\n  BruteForceSL2: 'BruteForce-SL2',\n};\n\nconst MATCHING_METHODS = [\n  'TM_CCOEFF',\n  'TM_CCOEFF_NORMED',\n  'TM_CCORR',\n  'TM_CCORR_NORMED',\n  'TM_SQDIFF',\n  'TM_SQDIFF_NORMED',\n];\nconst DEFAULT_MATCHING_METHOD = 'TM_CCOEFF_NORMED';\n\n/**\n * Transforms matching method name to the actual\n * constant value from OpenCV library\n *\n * @param {string} name One of supported method names\n * (see MATCHING_METHODS array above)\n * @returns {number} The method value\n * @throws {Error} if an unsupported method name is given\n */\nfunction toMatchingMethod(name) {\n  if (!MATCHING_METHODS.includes(name)) {\n    throw new Error(\n      `The matching method '${name}' is unknown. ` +\n        `Only the following matching methods are supported: ${MATCHING_METHODS}`\n    );\n  }\n  return cv[name];\n}\n\n/**\n * Spins until the opencv-bindings module is fully loaded\n */\nasync function initOpenCv() {\n  cv = require('opencv-bindings');\n  while (!cv.getBuildInformation) {\n    await B.delay(500);\n  }\n  // opencv-bindings sets a global unhandledRejection handler of an abort, which we don't want, so\n  // undo it here. https://github.com/opencv/opencv/issues/21481\n  process.removeAllListeners('unhandledRejection');\n}\n\n/**\n * @typedef MatchComputationResult\n * @property {OpenCVBindings['Mat']} descriptor - OpenCV match descriptor\n * @property {OpenCVBindings['KeyPointVector']} keyPoints - The array of key points\n */\n\n/**\n * Calculates an OpenCV match descriptor of an image, which can be used\n * for brute-force matching.\n * Read https://docs.opencv.org/3.0-beta/doc/py_tutorials/py_feature2d/py_matcher/py_matcher.html\n * for more details.\n *\n * @param {OpenCVBindings['Mat']} img Image data\n * @param {OpenCVBindings['FeatureDetector']} detector OpenCV feature detector instance\n *\n * @returns {MatchComputationResult}\n */\nfunction detectAndCompute(img, detector) {\n  const keyPoints = new cv.KeyPointVector();\n  const descriptor = new cv.Mat();\n  detector.detect(img, keyPoints);\n  detector.compute(img, keyPoints, descriptor);\n  return {\n    keyPoints,\n    descriptor,\n  };\n}\n\n/**\n * Calculated the bounding rect coordinates for the array of matching points\n *\n * @param {Array<Point>} matchedPoints Array of matching points\n * @returns {Rect} The matching bounding rect or a zero rect if no match\n * can be found.\n */\nfunction calculateMatchedRect(matchedPoints) {\n  if (matchedPoints.length < 2) {\n    return {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0,\n    };\n  }\n\n  const pointsSortedByDistance = matchedPoints\n    .map((point) => [Math.sqrt(point.x * point.x + point.y * point.y), point])\n    .sort((pair1, pair2) => pair1[0] >= pair2[0])\n    .map((pair) => pair[1]);\n  const firstPoint = _.head(pointsSortedByDistance);\n  const lastPoint = _.last(pointsSortedByDistance);\n  const topLeftPoint = {\n    x: firstPoint.x <= lastPoint.x ? firstPoint.x : lastPoint.x,\n    y: firstPoint.y <= lastPoint.y ? firstPoint.y : lastPoint.y,\n  };\n  const bottomRightPoint = {\n    x: firstPoint.x >= lastPoint.x ? firstPoint.x : lastPoint.x,\n    y: firstPoint.y >= lastPoint.y ? firstPoint.y : lastPoint.y,\n  };\n  return {\n    x: topLeftPoint.x,\n    y: topLeftPoint.y,\n    width: bottomRightPoint.x - topLeftPoint.x,\n    height: bottomRightPoint.y - topLeftPoint.y,\n  };\n}\n\n/**\n * Draws a rectanngle on the given image matrix\n *\n * @param {cv.Mat} mat The source image\n * @param {Rect} region The region to highlight\n *\n * @returns {cv.Mat} The same image with the rectangle on it\n */\nfunction highlightRegion(mat, region) {\n  if (region.width <= 0 || region.height <= 0) {\n    return;\n  }\n\n  // highlight in red\n  const color = new cv.Scalar(255, 0, 0, 255);\n  const thickness = 2;\n  const topLeft = new cv.Point(region.x, region.y);\n  const botRight = new cv.Point(region.x + region.width, region.y + region.height);\n  cv.rectangle(mat, topLeft, botRight, color, thickness, cv.LINE_8, 0);\n  return mat;\n}\n\n/**\n * @typedef MatchingOptions\n * @property {?string} detectorName ['ORB'] One of possible OpenCV feature detector names\n * from keys of the `AVAILABLE_DETECTORS` object.\n * Some of these methods (FAST, AGAST, GFTT, FAST, SIFT and MSER) are not available\n * in the default OpenCV installation and have to be enabled manually before\n * library compilation.\n * @property {?string} matchFunc ['BruteForce'] The name of the matching function.\n * Should be one of the keys of the `AVAILABLE_MATCHING_FUNCTIONS` object.\n * @property {?number|Function} goodMatchesFactor The maximum count of \"good\" matches\n * (e. g. with minimal distances) or a function, which accepts 3 arguments: the current distance,\n * minimal distance, maximum distance and returns true or false to include or exclude the match.\n * @property {?boolean} visualize [false] Whether to return the resulting visalization\n * as an image (useful for debugging purposes)\n */\n\n/**\n * @typedef MatchingResult\n * @property {number} count The count of matched edges on both images.\n * The more matching edges there are no both images the more similar they are.\n * @property {number} totalCount The total count of matched edges on both images.\n * It is equal to `count` if `goodMatchesFactor` does not limit the matches,\n * otherwise it contains the total count of matches before `goodMatchesFactor` is\n * applied.\n * @property {?Buffer} visualization The visualization of the matching result\n * represented as PNG image buffer. This visualization looks like\n * https://user-images.githubusercontent.com/31125521/29702731-c79e3142-8972-11e7-947e-db109d415469.jpg\n * @property {Array<Point>} points1 The array of matching points on the first image\n * @property {Rect} rect1 The bounding rect for the `matchedPoints1` set or a zero rect\n * if not enough matching points are found\n * @property {Array<Point>} points2 The array of matching points on the second image\n * @property {Rect} rect2 The bounding rect for the `matchedPoints2` set or a zero rect\n * if not enough matching points are found\n */\n\n/**\n * Calculates the count of common edges between two images.\n * The images might be rotated or resized relatively to each other.\n *\n * @param {Buffer} img1Data The data of the first image packed into a NodeJS buffer\n * @param {Buffer} img2Data The data of the second image packed into a NodeJS buffer\n * @param {?MatchingOptions} options [{}] Set of matching options\n *\n * @returns {MatchingResult} Maching result\n * @throws {Error} If `detectorName` value is unknown.\n */\nasync function getImagesMatches(img1Data, img2Data, options = {}) {\n  await initOpenCv();\n\n  let img1, img2, detector, result1, result2, matcher, matchesVec;\n  try {\n    const {\n      detectorName = 'ORB',\n      visualize = false,\n      goodMatchesFactor,\n      matchFunc = 'BruteForce',\n    } = options;\n    if (!_.includes(_.keys(AVAILABLE_DETECTORS), detectorName)) {\n      throw new Error(\n        `'${detectorName}' detector is unknown. ` +\n          `Only ${JSON.stringify(_.keys(AVAILABLE_DETECTORS))} detectors are supported.`\n      );\n    }\n    if (!_.includes(_.keys(AVAILABLE_MATCHING_FUNCTIONS), matchFunc)) {\n      throw new Error(\n        `'${matchFunc}' matching function is unknown. ` +\n          `Only ${JSON.stringify(\n            _.keys(AVAILABLE_MATCHING_FUNCTIONS)\n          )} matching functions are supported.`\n      );\n    }\n\n    detector = new cv[AVAILABLE_DETECTORS[detectorName]]();\n    [img1, img2] = await B.all([cvMatFromImage(img1Data), cvMatFromImage(img2Data)]);\n    result1 = detectAndCompute(img1, detector);\n    result2 = detectAndCompute(img2, detector);\n    matcher = new cv.DescriptorMatcher(AVAILABLE_MATCHING_FUNCTIONS[matchFunc]);\n    matchesVec = new cv.DMatchVector();\n    let matches = [];\n    matcher.match(result1.descriptor, result2.descriptor, matchesVec);\n    const totalCount = matchesVec.size();\n    if (totalCount < 1) {\n      throw new Error(\n        `Could not find any matches between images. Double-check orientation, ` +\n          `resolution, or use another detector or matching function.`\n      );\n    }\n    for (let i = 0; i < totalCount; i++) {\n      matches.push(matchesVec.get(i));\n    }\n\n    const hasGoodMatchesFactor =\n      _.isFunction(goodMatchesFactor) ||\n      (_.isNumber(goodMatchesFactor) && !_.isNaN(goodMatchesFactor));\n\n    if (hasGoodMatchesFactor) {\n      if (_.isFunction(goodMatchesFactor)) {\n        const distances = matches.map((match) => match.distance);\n        const minDistance = _.min(distances);\n        const maxDistance = _.max(distances);\n        matches = matches.filter((match) =>\n          goodMatchesFactor(match.distance, minDistance, maxDistance)\n        );\n      } else {\n        if (matches.length > goodMatchesFactor) {\n          matches = matches\n            .sort((match1, match2) => match1.distance - match2.distance)\n            .slice(0, goodMatchesFactor);\n        }\n      }\n    }\n\n    const extractPoint = (keyPoints, indexPropertyName) => (match) => {\n      const {pt, point} = keyPoints.get(match[indexPropertyName]);\n      // https://github.com/justadudewhohacks/opencv4nodejs/issues/584\n      return pt || point;\n    };\n    const points1 = matches.map(extractPoint(result1.keyPoints, 'queryIdx'));\n    const rect1 = calculateMatchedRect(points1);\n    const points2 = matches.map(extractPoint(result2.keyPoints, 'trainIdx'));\n    const rect2 = calculateMatchedRect(points2);\n\n    const result = {\n      points1,\n      rect1,\n      points2,\n      rect2,\n      totalCount,\n      count: matches.length,\n    };\n    if (visualize) {\n      const goodMatchesVec = new cv.DMatchVector();\n      for (let i = 0; i < matches.length; i++) {\n        goodMatchesVec.push_back(matches[i]);\n      }\n      const visualization = new cv.Mat();\n      const color = new cv.Scalar(0, 255, 0, 255);\n      cv.drawMatches(\n        img1,\n        result1.keyPoints,\n        img2,\n        result2.keyPoints,\n        goodMatchesVec,\n        visualization,\n        color\n      );\n      highlightRegion(visualization, rect1);\n      highlightRegion(visualization, {\n        x: img1.cols + rect2.x,\n        y: rect2.y,\n        width: rect2.width,\n        height: rect2.height,\n      });\n      result.visualization = await jimpImgFromCvMat(visualization).getBufferAsync(Jimp.MIME_PNG);\n    }\n\n    return result;\n  } finally {\n    try {\n      img1.delete();\n      img2.delete();\n      detector.delete();\n      result1.keyPoints.delete();\n      result1.descriptor.delete();\n      result2.keyPoints.delete();\n      result2.descriptor.delete();\n      matcher.delete();\n      matchesVec.delete();\n    } catch (ign) {}\n  }\n}\n\n/**\n * @typedef SimilarityOptions\n * @property {?boolean} visualize [false] Whether to return the resulting visalization\n * as an image (useful for debugging purposes)\n * @property {string} method [TM_CCOEFF_NORMED] The name of the template matching method.\n * Acceptable values are:\n * - TM_CCOEFF\n * - TM_CCOEFF_NORMED (default)\n * - TM_CCORR\n * - TM_CCORR_NORMED\n * - TM_SQDIFF\n * - TM_SQDIFF_NORMED\n * Read https://docs.opencv.org/3.0-beta/doc/py_tutorials/py_imgproc/py_template_matching/py_template_matching.html\n * for more details.\n */\n\n/**\n * @typedef SimilarityResult\n * @property {number} score The similarity score as a float number in range [0.0, 1.0].\n * 1.0 is the highest score (means both images are totally equal).\n * @property {?Buffer} visualization The visualization of the matching result\n * represented as PNG image buffer. This image includes both input pictures where\n * difference regions are highlighted with rectangles.\n */\n\n/**\n * Calculates the similarity score between two images.\n * It is expected, that both images have the same resolution.\n *\n * @param {Buffer} img1Data The data of the first image packed into a NodeJS buffer\n * @param {Buffer} img2Data The data of the second image packed into a NodeJS buffer\n * @param {?SimilarityOptions} options [{}] Set of similarity calculation options\n *\n * @returns {SimilarityResult} The calculation result\n * @throws {Error} If the given images have different resolution.\n */\nasync function getImagesSimilarity(img1Data, img2Data, options = {}) {\n  await initOpenCv();\n\n  const {method = DEFAULT_MATCHING_METHOD, visualize = false} = options;\n\n  let template, reference, matched;\n  try {\n    [template, reference] = await B.all([cvMatFromImage(img1Data), cvMatFromImage(img2Data)]);\n    if (template.rows !== reference.rows || template.cols !== reference.cols) {\n      throw new Error(\n        'Both images are expected to have the same size in order to ' +\n          'calculate the similarity score.'\n      );\n    }\n    template.convertTo(template, cv.CV_8UC3);\n    reference.convertTo(reference, cv.CV_8UC3);\n\n    matched = new cv.Mat();\n    cv.matchTemplate(reference, template, matched, toMatchingMethod(method));\n    const minMax = cv.minMaxLoc(matched);\n    const result = {\n      score: minMax.maxVal,\n    };\n\n    if (visualize) {\n      let bothImages, resultMat, mask, contours, hierarchy;\n      try {\n        resultMat = new cv.Mat(template.rows, template.cols * 2, cv.CV_8UC3);\n        bothImages = new cv.MatVector();\n        bothImages.push_back(reference);\n        bothImages.push_back(template);\n        cv.hconcat(bothImages, resultMat);\n\n        mask = new cv.Mat();\n        cv.absdiff(reference, template, mask);\n        cv.cvtColor(mask, mask, cv.COLOR_BGR2GRAY, 0);\n\n        cv.threshold(mask, mask, 128, 255, cv.THRESH_BINARY | cv.THRESH_OTSU);\n        contours = new cv.MatVector();\n        hierarchy = new cv.Mat();\n        cv.findContours(mask, contours, hierarchy, cv.RETR_EXTERNAL, cv.CHAIN_APPROX_SIMPLE);\n\n        for (let i = 0; i < contours.size(); i++) {\n          const boundingRect = cv.boundingRect(contours.get(i));\n          highlightRegion(resultMat, boundingRect);\n          highlightRegion(resultMat, {\n            x: reference.cols + boundingRect.x,\n            y: boundingRect.y,\n            width: boundingRect.width,\n            height: boundingRect.height,\n          });\n        }\n        result.visualization = await jimpImgFromCvMat(resultMat).getBufferAsync(Jimp.MIME_PNG);\n      } finally {\n        try {\n          bothImages.delete();\n          resultMat.delete();\n          mask.delete();\n          contours.delete();\n          hierarchy.delete();\n        } catch (ign) {}\n      }\n    }\n    return result;\n  } finally {\n    try {\n      template.delete();\n      reference.delete();\n      matched.delete();\n    } catch (ign) {}\n  }\n}\n\n/**\n * @typedef OccurrenceOptions\n * @property {boolean} [visualize=false] Whether to return the resulting visalization\n * as an image (useful for debugging purposes)\n * @property {number} [threshold=0.5] At what normalized threshold to reject\n * a match\n * @property {number|boolean} [multiple=false] find multiple matches in the image\n * @property {number} [matchNeighbourThreshold=10] The pixel distance between matches we consider\n * to be part of the same template match\n */\n\n/**\n * @typedef {'TM_CCOEFF'|'TM_CCOEFF_NORMED|'TM_CCORR'|'TM_CCORR_NORMED'|'TM_SQDIFF'|'TMSQDIFF_NORMED'} OccurrenceResultMethod\n */\n\n/**\n * @typedef OccurrenceResult\n * @property {import('@appium/types').Rect} rect The region of the partial image occurence\n * on the full image\n * @property {Buffer} visualization The visualization of the matching result\n * represented as PNG image buffer. On this image the matching\n * region is highlighted with a rectangle. If the multiple option is passed,\n * all results are highlighted here.\n * @property {number} score The similarity score as a float number in range [0.0, 1.0].\n * 1.0 is the highest score (means both images are totally equal).\n * @property {OccurrenceResult[]} multiple The array of matching OccurenceResults\n * - only when multiple option is passed\n * @property {OccurrenceResultMethod} [method='TM_CCOEFF_NORMED'] The name of the template matching method.\n * Acceptable values are:\n * - TM_CCOEFF\n * - TM_CCOEFF_NORMED (default)\n * - TM_CCORR\n * - TM_CCORR_NORMED\n * - TM_SQDIFF\n * - TM_SQDIFF_NORMED\n * Read https://docs.opencv.org/3.0-beta/doc/py_tutorials/py_imgproc/py_template_matching/py_template_matching.html\n * for more details.\n */\n\n/**\n * Calculates the occurrence position of a partial image in the full\n * image.\n *\n * @param {Buffer} fullImgData The data of the full image packed into a NodeJS buffer\n * @param {Buffer} partialImgData The data of the partial image packed into a NodeJS buffer\n * @param {OccurrenceOptions?} [options] Set of occurrence calculation options\n *\n * @returns {OccurrenceResult}\n * @throws {Error} If no occurrences of the partial image can be found in the full image\n */\nasync function getImageOccurrence(fullImgData, partialImgData, options = {}) {\n  await initOpenCv();\n\n  const {\n    visualize = false,\n    threshold = DEFAULT_MATCH_THRESHOLD,\n    multiple = false,\n    matchNeighbourThreshold = MATCH_NEIGHBOUR_THRESHOLD,\n    method = DEFAULT_MATCHING_METHOD,\n  } = options;\n\n  let fullImg, partialImg, matched;\n\n  try {\n    [fullImg, partialImg] = await B.all([\n      cvMatFromImage(fullImgData),\n      cvMatFromImage(partialImgData),\n    ]);\n    matched = new cv.Mat();\n    const results = [];\n    let visualization = null;\n\n    try {\n      cv.matchTemplate(fullImg, partialImg, matched, toMatchingMethod(method));\n      const minMax = cv.minMaxLoc(matched);\n\n      if (multiple) {\n        const matches = [];\n        for (let row = 0; row < matched.rows; row++) {\n          for (let col = 0; col < matched.cols; col++) {\n            const score = matched.floatAt(row, col);\n            if (score >= threshold) {\n              matches.push({score, x: col, y: row});\n            }\n          }\n        }\n\n        const nearMatches = filterNearMatches(matches, matchNeighbourThreshold);\n\n        for (const {x, y, score} of nearMatches) {\n          results.push({\n            score,\n            rect: {\n              x,\n              y,\n              width: partialImg.cols,\n              height: partialImg.rows,\n            },\n          });\n        }\n      } else if (minMax.maxVal >= threshold) {\n        const {x, y} = method.includes('SQDIFF') ? minMax.minLoc : minMax.maxLoc;\n        results.push({\n          score: minMax.maxVal,\n          rect: {\n            x,\n            y,\n            width: partialImg.cols,\n            height: partialImg.rows,\n          },\n        });\n      }\n\n      if (_.isEmpty(results)) {\n        // Below error message, `Cannot find any occurrences` is referenced in find by image\n        throw new Error(\n          `Match threshold: ${threshold}. Highest match value ` + `found was ${minMax.maxVal}`\n        );\n      }\n    } catch (e) {\n      // Below error message, `Cannot find any occurrences` is referenced in find by image\n      throw new Error(\n        `Cannot find any occurrences of the partial image in the full image. ` +\n          `Original error: ${e.message}`\n      );\n    }\n\n    if (visualize) {\n      const fullHighlightedImage = fullImg.clone();\n\n      for (const result of results) {\n        const singleHighlightedImage = fullImg.clone();\n\n        highlightRegion(singleHighlightedImage, result.rect);\n        highlightRegion(fullHighlightedImage, result.rect);\n        result.visualization = await jimpImgFromCvMat(singleHighlightedImage).getBufferAsync(\n          Jimp.MIME_PNG\n        );\n      }\n      visualization = await jimpImgFromCvMat(fullHighlightedImage).getBufferAsync(Jimp.MIME_PNG);\n    }\n    return {\n      rect: results[0].rect,\n      score: results[0].score,\n      visualization,\n      multiple: results,\n    };\n  } finally {\n    try {\n      fullImg.delete();\n      partialImg.delete();\n      matched.delete();\n    } catch (ign) {}\n  }\n}\n\n/**\n * Convert an opencv image matrix into a Jimp image object\n *\n * @param {cv.Mat} mat the image matrix\n * @return {Jimp} the Jimp image\n */\nfunction jimpImgFromCvMat(mat) {\n  return new Jimp({\n    width: mat.cols,\n    height: mat.rows,\n    data: Buffer.from(mat.data),\n  });\n}\n\n/**\n * Take a binary image buffer and return a cv.Mat\n *\n * @param {Buffer} img the image data buffer\n * @return {cv.Mat} the opencv matrix\n */\nasync function cvMatFromImage(img) {\n  const jimpImg = await Jimp.read(img);\n  return cv.matFromImageData(jimpImg.bitmap);\n}\n\n/**\n * Filter out match results which have a matched neighbour\n *\n * @param {Array<Point>} nonZeroMatchResults matrix of image match results\n * @param {number} matchNeighbourThreshold The pixel distance within which we\n * consider an element being a neighbour of an existing match\n * @return {Array<Point>} the filtered array of matched points\n */\nfunction filterNearMatches(nonZeroMatchResults, matchNeighbourThreshold) {\n  return nonZeroMatchResults.reduce((acc, element) => {\n    if (!acc.some((match) => distance(match, element) <= matchNeighbourThreshold)) {\n      acc.push(element);\n    }\n    return acc;\n  }, []);\n}\n\n/**\n * Find the distance between two points\n *\n * @param {Point} point1 The first point\n * @param {Point} point2 The second point\n * @return {number} the distance\n */\nfunction distance(point1, point2) {\n  const a2 = Math.pow(point1.x - point2.x, 2);\n  const b2 = Math.pow(point1.y - point2.y, 2);\n  return Math.sqrt(a2 + b2);\n}\n\nexport {getImagesMatches, getImagesSimilarity, getImageOccurrence, initOpenCv};\n\n/**\n * @typedef OpenCVBindings\n * @property {any} Mat\n * @property {any} KeyPointVector\n * @property {any} FeatureDetector\n */\n"],"mappings":"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"}