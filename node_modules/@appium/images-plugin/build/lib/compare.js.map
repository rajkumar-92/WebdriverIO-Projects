{"version":3,"file":"compare.js","names":["MATCH_FEATURES_MODE","GET_SIMILARITY_MODE","MATCH_TEMPLATE_MODE","DEFAULT_MATCH_THRESHOLD","compareImages","mode","firstImage","secondImage","options","img1","Buffer","from","img2","result","_","toLower","toLowerCase","getImagesMatches","err","count","getImagesSimilarity","getImageOccurrence","multiple","map","convertVisualizationToBase64","errors","InvalidArgumentError","JSON","stringify","element","isEmpty","visualization","toString"],"sources":["../../lib/compare.js"],"sourcesContent":["import _ from 'lodash';\nimport {errors} from 'appium/driver';\nimport {getImagesMatches, getImagesSimilarity, getImageOccurrence} from '@appium/opencv';\n\nconst MATCH_FEATURES_MODE = 'matchFeatures';\nconst GET_SIMILARITY_MODE = 'getSimilarity';\nconst MATCH_TEMPLATE_MODE = 'matchTemplate';\n\nconst DEFAULT_MATCH_THRESHOLD = 0.4;\n\n/**\n * Performs images comparison using OpenCV framework features.\n * It is expected that both OpenCV framework and opencv4nodejs\n * module are installed on the machine where Appium server is running.\n *\n * @param {string} mode - One of possible comparison modes:\n * matchFeatures, getSimilarity, matchTemplate\n * @param {string} firstImage - Base64-encoded image file.\n * All image formats, that OpenCV library itself accepts, are supported.\n * @param {string} secondImage - Base64-encoded image file.\n * All image formats, that OpenCV library itself accepts, are supported.\n * @param {object} [options] - The content of this dictionary depends\n * on the actual `mode` value. See the documentation on `@appium/support`\n * module for more details.\n * @returns {Promise<object|object[]>} The content of the resulting dictionary depends\n * on the actual `mode` and `options` values. See the documentation on\n * `@appium/support` module for more details.\n * @throws {Error} If required OpenCV modules are not installed or\n * if `mode` value is incorrect or if there was an unexpected issue while\n * matching the images.\n */\nasync function compareImages(mode, firstImage, secondImage, options = {}) {\n  const img1 = Buffer.from(firstImage, 'base64');\n  const img2 = Buffer.from(secondImage, 'base64');\n  let result = null;\n  switch (_.toLower(mode)) {\n    case MATCH_FEATURES_MODE.toLowerCase():\n      try {\n        result = await getImagesMatches(img1, img2, options);\n      } catch (err) {\n        // might throw if no matches\n        result = {count: 0};\n      }\n      break;\n    case GET_SIMILARITY_MODE.toLowerCase():\n      result = await getImagesSimilarity(img1, img2, options);\n      break;\n    case MATCH_TEMPLATE_MODE.toLowerCase():\n      // firstImage/img1 is the full image and secondImage/img2 is the partial one\n      result = await getImageOccurrence(img1, img2, options);\n      if (options.multiple) {\n        return result.multiple.map(convertVisualizationToBase64);\n      }\n      break;\n    default:\n      throw new errors.InvalidArgumentError(\n        `'${mode}' images comparison mode is unknown. ` +\n          `Only ${JSON.stringify([\n            MATCH_FEATURES_MODE,\n            GET_SIMILARITY_MODE,\n            MATCH_TEMPLATE_MODE,\n          ])} modes are supported.`\n      );\n  }\n  return convertVisualizationToBase64(result);\n}\n\n/**\n * base64 encodes the visualization part of the result\n * (if necessary)\n *\n * @param {OccurrenceResult} element - occurrence result\n *\n **/\nfunction convertVisualizationToBase64(element) {\n  if (!_.isEmpty(element.visualization)) {\n    element.visualization = element.visualization.toString('base64');\n  }\n\n  return element;\n}\n\nexport {\n  compareImages,\n  DEFAULT_MATCH_THRESHOLD,\n  MATCH_TEMPLATE_MODE,\n  MATCH_FEATURES_MODE,\n  GET_SIMILARITY_MODE,\n};\n\n/**\n * @typedef {import('@appium/opencv').OccurrenceResult} OccurrenceResult\n */\n"],"mappings":";;;;;;;;;;AAAA;;AACA;;AACA;;;;AAEA,MAAMA,mBAAmB,GAAG,eAA5B;;AACA,MAAMC,mBAAmB,GAAG,eAA5B;;AACA,MAAMC,mBAAmB,GAAG,eAA5B;;AAEA,MAAMC,uBAAuB,GAAG,GAAhC;;;AAuBA,eAAeC,aAAf,CAA6BC,IAA7B,EAAmCC,UAAnC,EAA+CC,WAA/C,EAA4DC,OAAO,GAAG,EAAtE,EAA0E;EACxE,MAAMC,IAAI,GAAGC,MAAM,CAACC,IAAP,CAAYL,UAAZ,EAAwB,QAAxB,CAAb;EACA,MAAMM,IAAI,GAAGF,MAAM,CAACC,IAAP,CAAYJ,WAAZ,EAAyB,QAAzB,CAAb;EACA,IAAIM,MAAM,GAAG,IAAb;;EACA,QAAQC,eAAA,CAAEC,OAAF,CAAUV,IAAV,CAAR;IACE,KAAKL,mBAAmB,CAACgB,WAApB,EAAL;MACE,IAAI;QACFH,MAAM,GAAG,MAAM,IAAAI,wBAAA,EAAiBR,IAAjB,EAAuBG,IAAvB,EAA6BJ,OAA7B,CAAf;MACD,CAFD,CAEE,OAAOU,GAAP,EAAY;QAEZL,MAAM,GAAG;UAACM,KAAK,EAAE;QAAR,CAAT;MACD;;MACD;;IACF,KAAKlB,mBAAmB,CAACe,WAApB,EAAL;MACEH,MAAM,GAAG,MAAM,IAAAO,2BAAA,EAAoBX,IAApB,EAA0BG,IAA1B,EAAgCJ,OAAhC,CAAf;MACA;;IACF,KAAKN,mBAAmB,CAACc,WAApB,EAAL;MAEEH,MAAM,GAAG,MAAM,IAAAQ,0BAAA,EAAmBZ,IAAnB,EAAyBG,IAAzB,EAA+BJ,OAA/B,CAAf;;MACA,IAAIA,OAAO,CAACc,QAAZ,EAAsB;QACpB,OAAOT,MAAM,CAACS,QAAP,CAAgBC,GAAhB,CAAoBC,4BAApB,CAAP;MACD;;MACD;;IACF;MACE,MAAM,IAAIC,cAAA,CAAOC,oBAAX,CACH,IAAGrB,IAAK,uCAAT,GACG,QAAOsB,IAAI,CAACC,SAAL,CAAe,CACrB5B,mBADqB,EAErBC,mBAFqB,EAGrBC,mBAHqB,CAAf,CAIL,uBAND,CAAN;EApBJ;;EA6BA,OAAOsB,4BAA4B,CAACX,MAAD,CAAnC;AACD;;AASD,SAASW,4BAAT,CAAsCK,OAAtC,EAA+C;EAC7C,IAAI,CAACf,eAAA,CAAEgB,OAAF,CAAUD,OAAO,CAACE,aAAlB,CAAL,EAAuC;IACrCF,OAAO,CAACE,aAAR,GAAwBF,OAAO,CAACE,aAAR,CAAsBC,QAAtB,CAA+B,QAA/B,CAAxB;EACD;;EAED,OAAOH,OAAP;AACD"}