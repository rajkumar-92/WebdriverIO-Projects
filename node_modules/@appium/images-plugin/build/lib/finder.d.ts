export default class ImageElementFinder {
    /**
     *
     * @param {ExternalDriver} driver
     * @param {number} [maxSize]
     */
    constructor(driver: ExternalDriver, maxSize?: number | undefined);
    /** @type {ExternalDriver} */
    driver: ExternalDriver;
    /** @type {LRU<string,ImageElement>} */
    imgElCache: LRU<string, ImageElement>;
    setDriver(driver: any): void;
    /**
     * @param {ImageElement} imgEl
     * @returns {Element}
     */
    registerImageElement(imgEl: ImageElement): Element;
    /**
     * @typedef FindByImageOptions
     * @property {boolean} [shouldCheckStaleness=false] - whether this call to find an
     * image is merely to check staleness. If so we can bypass a lot of logic
     * @property {boolean} [multiple=false] - Whether we are finding one element or
     * multiple
     * @property {boolean} [ignoreDefaultImageTemplateScale=false] - Whether we
     * ignore defaultImageTemplateScale. It can be used when you would like to
     * scale b64Template with defaultImageTemplateScale setting.
     */
    /**
     * Find a screen rect represented by an ImageElement corresponding to an image
     * template sent in by the client
     *
     * @param {string} b64Template - base64-encoded image used as a template to be
     * matched in the screenshot
     * @param {FindByImageOptions} opts - additional options
     *
     * @returns {Promise<Element|Element[]|ImageElement>} - WebDriver element with a special id prefix
     */
    findByImage(b64Template: string, { shouldCheckStaleness, multiple, ignoreDefaultImageTemplateScale }: {
        /**
         * - whether this call to find an
         * image is merely to check staleness. If so we can bypass a lot of logic
         */
        shouldCheckStaleness?: boolean | undefined;
        /**
         * - Whether we are finding one element or
         * multiple
         */
        multiple?: boolean | undefined;
        /**
         * - Whether we
         * ignore defaultImageTemplateScale. It can be used when you would like to
         * scale b64Template with defaultImageTemplateScale setting.
         */
        ignoreDefaultImageTemplateScale?: boolean | undefined;
    }): Promise<Element | Element[] | ImageElement>;
    /**
     * Ensure that the image template sent in for a find is of a suitable size
     *
     * @param {string} b64Template - base64-encoded image
     * @param {number} screenWidth - width of screen
     * @param {number} screenHeight - height of screen
     *
     * @returns {Promise<string>} base64-encoded image, potentially resized
     */
    ensureTemplateSize(b64Template: string, screenWidth: number, screenHeight: number): Promise<string>;
    /**
     * Get the screenshot image that will be used for find by element, potentially
     * altering it in various ways based on user-requested settings
     *
     * @param {number} screenWidth - width of screen
     * @param {number} screenHeight - height of screen
     *
     * @returns {Promise<Screenshot & {scale?: ScreenshotScale}>} base64-encoded screenshot and ScreenshotScale
     */
    getScreenshotForImageFind(screenWidth: number, screenHeight: number): Promise<Screenshot & {
        scale?: ScreenshotScale | undefined;
    }>;
    /**
     * @typedef ImageTemplateSettings
     * @property {boolean} fixImageTemplateScale - fixImageTemplateScale in device-settings
     * @property {number} defaultImageTemplateScale - defaultImageTemplateScale in device-settings
     * @property {boolean} ignoreDefaultImageTemplateScale - Ignore defaultImageTemplateScale if it has true.
     * If b64Template has been scaled to defaultImageTemplateScale or should ignore the scale,
     * this parameter should be true. e.g. click in image-element module
     * @property {number} xScale - Scale ratio for width
     * @property {number} yScale - Scale ratio for height
  
     */
    /**
     * Get a image that will be used for template maching.
     * Returns scaled image if scale ratio is provided.
     *
     *
     * @param {string} b64Template - base64-encoded image used as a template to be
     * matched in the screenshot
     * @param {ImageTemplateSettings} opts - Image template scale related options
     *
     * @returns {Promise<string>} base64-encoded scaled template screenshot
     */
    fixImageTemplateScale(b64Template: string, opts: {
        /**
         * - fixImageTemplateScale in device-settings
         */
        fixImageTemplateScale: boolean;
        /**
         * - defaultImageTemplateScale in device-settings
         */
        defaultImageTemplateScale: number;
        /**
         * - Ignore defaultImageTemplateScale if it has true.
         * If b64Template has been scaled to defaultImageTemplateScale or should ignore the scale,
         * this parameter should be true. e.g. click in image-element module
         */
        ignoreDefaultImageTemplateScale: boolean;
        /**
         * - Scale ratio for width
         */
        xScale: number;
        /**
         * - Scale ratio for height
         */
        yScale: number;
    }): Promise<string>;
}
export type ExternalDriver = import('@appium/types').ExternalDriver;
export type Element = import('@appium/types').Element;
export type Screenshot = {
    /**
     * - base64 based screenshot string
     */
    b64Screenshot: string;
};
export type ScreenshotScale = {
    /**
     * - Scale ratio for width
     */
    xScale: number;
    /**
     * - Scale ratio for height
     */
    yScale: number;
};
import LRU from "lru-cache";
import { ImageElement } from "./image-element";
export const W3C_ELEMENT_KEY: "element-6066-11e4-a52e-4f735466cecf";
export const MJSONWP_ELEMENT_KEY: "ELEMENT";
export namespace DEFAULT_SETTINGS {
    export { DEFAULT_MATCH_THRESHOLD as imageMatchThreshold };
    export const imageMatchMethod: string;
    export const fixImageFindScreenshotDims: boolean;
    export const fixImageTemplateSize: boolean;
    export const fixImageTemplateScale: boolean;
    export { DEFAULT_TEMPLATE_IMAGE_SCALE as defaultImageTemplateScale };
    export const checkForImageElementStaleness: boolean;
    export const autoUpdateImageElementPosition: boolean;
    export { IMAGE_EL_TAP_STRATEGY_W3C as imageElementTapStrategy };
    export const getMatchedImageResult: boolean;
}
export const DEFAULT_FIX_IMAGE_TEMPLATE_SCALE: 1;
import { DEFAULT_MATCH_THRESHOLD } from "./compare";
import { DEFAULT_TEMPLATE_IMAGE_SCALE } from "./image-element";
import { IMAGE_EL_TAP_STRATEGY_W3C } from "./image-element";
//# sourceMappingURL=finder.d.ts.map