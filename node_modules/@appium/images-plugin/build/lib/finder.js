"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.W3C_ELEMENT_KEY = exports.MJSONWP_ELEMENT_KEY = exports.DEFAULT_SETTINGS = exports.DEFAULT_FIX_IMAGE_TEMPLATE_SCALE = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _lruCache = _interopRequireDefault(require("lru-cache"));

var _driver = require("appium/driver");

var _support = require("appium/support");

var _imageElement = require("./image-element");

var _compare = require("./compare");

var _logger = _interopRequireDefault(require("./logger"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const MJSONWP_ELEMENT_KEY = 'ELEMENT';
exports.MJSONWP_ELEMENT_KEY = MJSONWP_ELEMENT_KEY;
const W3C_ELEMENT_KEY = _support.util.W3C_WEB_ELEMENT_IDENTIFIER;
exports.W3C_ELEMENT_KEY = W3C_ELEMENT_KEY;
const DEFAULT_FIX_IMAGE_TEMPLATE_SCALE = 1;
exports.DEFAULT_FIX_IMAGE_TEMPLATE_SCALE = DEFAULT_FIX_IMAGE_TEMPLATE_SCALE;
const FLOAT_PRECISION = 100000;
const MAX_CACHE_ITEMS = 100;
const MAX_CACHE_SIZE_BYTES = 1024 * 1024 * 40;
const DEFAULT_SETTINGS = {
  imageMatchThreshold: _compare.DEFAULT_MATCH_THRESHOLD,
  imageMatchMethod: '',
  fixImageFindScreenshotDims: true,
  fixImageTemplateSize: false,
  fixImageTemplateScale: false,
  defaultImageTemplateScale: _imageElement.DEFAULT_TEMPLATE_IMAGE_SCALE,
  checkForImageElementStaleness: true,
  autoUpdateImageElementPosition: false,
  imageElementTapStrategy: _imageElement.IMAGE_EL_TAP_STRATEGY_W3C,
  getMatchedImageResult: false
};
exports.DEFAULT_SETTINGS = DEFAULT_SETTINGS;

class ImageElementFinder {
  driver;
  imgElCache;

  constructor(driver, maxSize = MAX_CACHE_SIZE_BYTES) {
    this.driver = driver;
    this.imgElCache = new _lruCache.default({
      max: MAX_CACHE_ITEMS,
      maxSize,
      sizeCalculation: el => el.template.length
    });
  }

  setDriver(driver) {
    this.driver = driver;
  }

  registerImageElement(imgEl) {
    this.imgElCache.set(imgEl.id, imgEl);
    const protoKey = this.driver.isW3CProtocol() ? W3C_ELEMENT_KEY : MJSONWP_ELEMENT_KEY;
    return imgEl.asElement(protoKey);
  }

  async findByImage(b64Template, {
    shouldCheckStaleness = false,
    multiple = false,
    ignoreDefaultImageTemplateScale = false
  }) {
    if (!this.driver) {
      throw new Error(`Can't find without a driver!`);
    }

    const settings = { ...DEFAULT_SETTINGS,
      ...this.driver.settings.getSettings()
    };
    const {
      imageMatchThreshold: threshold,
      imageMatchMethod,
      fixImageTemplateSize,
      fixImageTemplateScale,
      defaultImageTemplateScale,
      getMatchedImageResult: visualize
    } = settings;

    _logger.default.info(`Finding image element with match threshold ${threshold}`);

    if (!this.driver.getWindowSize) {
      throw new Error("This driver does not support the required 'getWindowSize' command");
    }

    const {
      width: screenWidth,
      height: screenHeight
    } = await this.driver.getWindowSize();

    if (fixImageTemplateSize) {
      b64Template = await this.ensureTemplateSize(b64Template, screenWidth, screenHeight);
    }

    const results = [];

    const condition = async () => {
      try {
        const {
          b64Screenshot,
          scale
        } = await this.getScreenshotForImageFind(screenWidth, screenHeight);
        b64Template = await this.fixImageTemplateScale(b64Template, {
          defaultImageTemplateScale,
          ignoreDefaultImageTemplateScale,
          fixImageTemplateScale,
          ...scale
        });
        const comparisonOpts = {
          threshold,
          visualize,
          multiple
        };

        if (imageMatchMethod) {
          comparisonOpts.method = imageMatchMethod;
        }

        if (multiple) {
          results.push(...(await (0, _compare.compareImages)(_compare.MATCH_TEMPLATE_MODE, b64Screenshot, b64Template, comparisonOpts)));
        } else {
          results.push(await (0, _compare.compareImages)(_compare.MATCH_TEMPLATE_MODE, b64Screenshot, b64Template, comparisonOpts));
        }

        return true;
      } catch (err) {
        if (err.message.match(/Cannot find any occurrences/)) {
          return false;
        }

        throw err;
      }
    };

    try {
      await this.driver.implicitWaitForCondition(condition);
    } catch (err) {
      if (!err.message.match(/Condition unmet/)) {
        throw err;
      }
    }

    if (_lodash.default.isEmpty(results)) {
      if (multiple) {
        return [];
      }

      throw new _driver.errors.NoSuchElementError();
    }

    const elements = results.map(({
      rect,
      score,
      visualization
    }) => {
      _logger.default.info(`Image template matched: ${JSON.stringify(rect)}`);

      return new _imageElement.ImageElement(b64Template, rect, score, visualization, this);
    });

    if (shouldCheckStaleness) {
      return elements[0];
    }

    const registeredElements = elements.map(imgEl => this.registerImageElement(imgEl));
    return multiple ? registeredElements : registeredElements[0];
  }

  async ensureTemplateSize(b64Template, screenWidth, screenHeight) {
    let imgObj = await _support.imageUtil.getJimpImage(b64Template);
    let {
      width: tplWidth,
      height: tplHeight
    } = imgObj.bitmap;

    _logger.default.info(`Template image is ${tplWidth}x${tplHeight}. Screen size is ${screenWidth}x${screenHeight}`);

    if (tplWidth <= screenWidth && tplHeight <= screenHeight) {
      return b64Template;
    }

    _logger.default.info(`Scaling template image from ${tplWidth}x${tplHeight} to match ` + `screen at ${screenWidth}x${screenHeight}`);

    imgObj = imgObj.scaleToFit(screenWidth, screenHeight);
    return (await imgObj.getBuffer(_support.imageUtil.MIME_PNG)).toString('base64');
  }

  async getScreenshotForImageFind(screenWidth, screenHeight) {
    if (!this.driver.getScreenshot) {
      throw new Error("This driver does not support the required 'getScreenshot' command");
    }

    const settings = Object.assign({}, DEFAULT_SETTINGS, this.driver.settings.getSettings());
    const {
      fixImageFindScreenshotDims
    } = settings;
    let b64Screenshot = await this.driver.getScreenshot();

    if (!fixImageFindScreenshotDims) {
      _logger.default.info(`Not verifying screenshot dimensions match screen`);

      return {
        b64Screenshot
      };
    }

    if (screenWidth < 1 || screenHeight < 1) {
      _logger.default.warn(`The retrieved screen size ${screenWidth}x${screenHeight} does ` + `not seem to be valid. No changes will be applied to the screenshot`);

      return {
        b64Screenshot
      };
    }

    _logger.default.info('Verifying screenshot size and aspect ratio');

    let imgObj = await _support.imageUtil.getJimpImage(b64Screenshot);
    let {
      width: shotWidth,
      height: shotHeight
    } = imgObj.bitmap;

    if (shotWidth < 1 || shotHeight < 1) {
      _logger.default.warn(`The retrieved screenshot size ${shotWidth}x${shotHeight} does ` + `not seem to be valid. No changes will be applied to the screenshot`);

      return {
        b64Screenshot
      };
    }

    if (screenWidth === shotWidth && screenHeight === shotHeight) {
      _logger.default.info('Screenshot size matched screen size');

      return {
        b64Screenshot
      };
    }

    const scale = {
      xScale: 1.0,
      yScale: 1.0
    };
    const screenAR = screenWidth / screenHeight;
    const shotAR = shotWidth / shotHeight;

    if (Math.round(screenAR * FLOAT_PRECISION) === Math.round(shotAR * FLOAT_PRECISION)) {
      _logger.default.info(`Screenshot aspect ratio '${shotAR}' (${shotWidth}x${shotHeight}) matched ` + `screen aspect ratio '${screenAR}' (${screenWidth}x${screenHeight})`);
    } else {
      _logger.default.warn(`When trying to find an element, determined that the screen ` + `aspect ratio and screenshot aspect ratio are different. Screen ` + `is ${screenWidth}x${screenHeight} whereas screenshot is ` + `${shotWidth}x${shotHeight}.`);

      const xScale = 1.0 * shotWidth / screenWidth;
      const yScale = 1.0 * shotHeight / screenHeight;
      const scaleFactor = xScale >= yScale ? yScale : xScale;

      _logger.default.warn(`Resizing screenshot to ${shotWidth * scaleFactor}x${shotHeight * scaleFactor} to match ` + `screen aspect ratio so that image element coordinates have a ` + `greater chance of being correct.`);

      imgObj = imgObj.resize(shotWidth * scaleFactor, shotHeight * scaleFactor);
      scale.xScale *= scaleFactor;
      scale.yScale *= scaleFactor;
      shotWidth = imgObj.bitmap.width;
      shotHeight = imgObj.bitmap.height;
    }

    if (screenWidth !== shotWidth && screenHeight !== shotHeight) {
      _logger.default.info(`Scaling screenshot from ${shotWidth}x${shotHeight} to match ` + `screen at ${screenWidth}x${screenHeight}`);

      imgObj = imgObj.resize(screenWidth, screenHeight);
      scale.xScale *= 1.0 * screenWidth / shotWidth;
      scale.yScale *= 1.0 * screenHeight / shotHeight;
    }

    b64Screenshot = (await imgObj.getBuffer(_support.imageUtil.MIME_PNG)).toString('base64');
    return {
      b64Screenshot,
      scale
    };
  }

  async fixImageTemplateScale(b64Template, opts) {
    if (!opts) {
      return b64Template;
    }

    let {
      fixImageTemplateScale = false,
      defaultImageTemplateScale = _imageElement.DEFAULT_TEMPLATE_IMAGE_SCALE,
      ignoreDefaultImageTemplateScale = false,
      xScale = DEFAULT_FIX_IMAGE_TEMPLATE_SCALE,
      yScale = DEFAULT_FIX_IMAGE_TEMPLATE_SCALE
    } = opts;

    if (ignoreDefaultImageTemplateScale) {
      defaultImageTemplateScale = _imageElement.DEFAULT_TEMPLATE_IMAGE_SCALE;
    }

    if (defaultImageTemplateScale === _imageElement.DEFAULT_TEMPLATE_IMAGE_SCALE && !fixImageTemplateScale) {
      return b64Template;
    }

    if (fixImageTemplateScale) {
      xScale *= defaultImageTemplateScale;
      yScale *= defaultImageTemplateScale;
    } else {
      xScale = yScale = 1 * defaultImageTemplateScale;
    }

    if (!parseFloat(String(xScale)) || !parseFloat(String(yScale))) {
      return b64Template;
    }

    if (Math.round(xScale * FLOAT_PRECISION) === Math.round(DEFAULT_FIX_IMAGE_TEMPLATE_SCALE * FLOAT_PRECISION) && Math.round(Number(yScale * FLOAT_PRECISION === Math.round(DEFAULT_FIX_IMAGE_TEMPLATE_SCALE * FLOAT_PRECISION)))) {
      return b64Template;
    }

    let imgTempObj = await _support.imageUtil.getJimpImage(b64Template);
    let {
      width: baseTempWidth,
      height: baseTempHeigh
    } = imgTempObj.bitmap;
    const scaledWidth = baseTempWidth * xScale;
    const scaledHeight = baseTempHeigh * yScale;

    _logger.default.info(`Scaling template image from ${baseTempWidth}x${baseTempHeigh}` + ` to ${scaledWidth}x${scaledHeight}`);

    _logger.default.info(`The ratio is ${xScale} and ${yScale}`);

    imgTempObj = await imgTempObj.resize(scaledWidth, scaledHeight);
    return (await imgTempObj.getBuffer(_support.imageUtil.MIME_PNG)).toString('base64');
  }

}

exports.default = ImageElementFinder;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,