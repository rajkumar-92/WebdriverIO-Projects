"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ImageElementPlugin = exports.IMAGE_STRATEGY = void 0;
exports.getImgElFromArgs = getImgElFromArgs;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _driver = require("appium/driver");

var _plugin = _interopRequireDefault(require("appium/plugin"));

var _compare = require("./compare");

var _finder = _interopRequireDefault(require("./finder"));

var _imageElement = require("./image-element");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const IMAGE_STRATEGY = '-image';
exports.IMAGE_STRATEGY = IMAGE_STRATEGY;

function getImgElFromArgs(args) {
  for (let arg of args) {
    if (_lodash.default.isString(arg) && arg.startsWith(_imageElement.IMAGE_ELEMENT_PREFIX)) {
      return arg;
    }
  }
}

class ImageElementPlugin extends _plugin.default {
  constructor(pluginName) {
    super(pluginName);
    this.finder = new _finder.default();
  }

  static newMethodMap = {
    '/session/:sessionId/appium/compare_images': {
      POST: {
        command: 'compareImages',
        payloadParams: {
          required: ['mode', 'firstImage', 'secondImage'],
          optional: ['options']
        },
        neverProxy: true
      }
    }
  };

  async compareImages(next, driver, ...args) {
    return await (0, _compare.compareImages)(...args);
  }

  async findElement(next, driver, ...args) {
    return await this._find(false, next, driver, ...args);
  }

  async findElements(next, driver, ...args) {
    return await this._find(true, next, driver, ...args);
  }

  async _find(multiple, next, driver, ...args) {
    const [strategy, selector] = args;

    if (strategy !== IMAGE_STRATEGY) {
      return await next();
    }

    this.finder.setDriver(driver);
    return await this.finder.findByImage(selector, {
      multiple
    });
  }

  async handle(next, driver, cmdName, ...args) {
    const imgElId = getImgElFromArgs(args);

    if (imgElId) {
      if (!this.finder.imgElCache.has(imgElId)) {
        throw new _driver.errors.NoSuchElementError();
      }

      const imgEl = this.finder.imgElCache.get(imgElId);
      return await _imageElement.ImageElement.execute(driver, imgEl, cmdName, ...args);
    }

    return await next();
  }

}

exports.ImageElementPlugin = exports.default = ImageElementPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJJTUFHRV9TVFJBVEVHWSIsImdldEltZ0VsRnJvbUFyZ3MiLCJhcmdzIiwiYXJnIiwiXyIsImlzU3RyaW5nIiwic3RhcnRzV2l0aCIsIklNQUdFX0VMRU1FTlRfUFJFRklYIiwiSW1hZ2VFbGVtZW50UGx1Z2luIiwiQmFzZVBsdWdpbiIsImNvbnN0cnVjdG9yIiwicGx1Z2luTmFtZSIsImZpbmRlciIsIkltYWdlRWxlbWVudEZpbmRlciIsIm5ld01ldGhvZE1hcCIsIlBPU1QiLCJjb21tYW5kIiwicGF5bG9hZFBhcmFtcyIsInJlcXVpcmVkIiwib3B0aW9uYWwiLCJuZXZlclByb3h5IiwiY29tcGFyZUltYWdlcyIsIm5leHQiLCJkcml2ZXIiLCJmaW5kRWxlbWVudCIsIl9maW5kIiwiZmluZEVsZW1lbnRzIiwibXVsdGlwbGUiLCJzdHJhdGVneSIsInNlbGVjdG9yIiwic2V0RHJpdmVyIiwiZmluZEJ5SW1hZ2UiLCJoYW5kbGUiLCJjbWROYW1lIiwiaW1nRWxJZCIsImltZ0VsQ2FjaGUiLCJoYXMiLCJlcnJvcnMiLCJOb1N1Y2hFbGVtZW50RXJyb3IiLCJpbWdFbCIsImdldCIsIkltYWdlRWxlbWVudCIsImV4ZWN1dGUiXSwic291cmNlcyI6WyIuLi8uLi9saWIvcGx1Z2luLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIG5vLWNhc2UtZGVjbGFyYXRpb25zICovXG5cbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQge2Vycm9yc30gZnJvbSAnYXBwaXVtL2RyaXZlcic7XG5pbXBvcnQgQmFzZVBsdWdpbiBmcm9tICdhcHBpdW0vcGx1Z2luJztcbmltcG9ydCB7Y29tcGFyZUltYWdlc30gZnJvbSAnLi9jb21wYXJlJztcbmltcG9ydCBJbWFnZUVsZW1lbnRGaW5kZXIgZnJvbSAnLi9maW5kZXInO1xuaW1wb3J0IHtJbWFnZUVsZW1lbnQsIElNQUdFX0VMRU1FTlRfUFJFRklYfSBmcm9tICcuL2ltYWdlLWVsZW1lbnQnO1xuXG5jb25zdCBJTUFHRV9TVFJBVEVHWSA9ICctaW1hZ2UnO1xuXG5mdW5jdGlvbiBnZXRJbWdFbEZyb21BcmdzKGFyZ3MpIHtcbiAgZm9yIChsZXQgYXJnIG9mIGFyZ3MpIHtcbiAgICBpZiAoXy5pc1N0cmluZyhhcmcpICYmIGFyZy5zdGFydHNXaXRoKElNQUdFX0VMRU1FTlRfUFJFRklYKSkge1xuICAgICAgcmV0dXJuIGFyZztcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW1hZ2VFbGVtZW50UGx1Z2luIGV4dGVuZHMgQmFzZVBsdWdpbiB7XG4gIGNvbnN0cnVjdG9yKHBsdWdpbk5hbWUpIHtcbiAgICBzdXBlcihwbHVnaW5OYW1lKTtcbiAgICB0aGlzLmZpbmRlciA9IG5ldyBJbWFnZUVsZW1lbnRGaW5kZXIoKTtcbiAgfVxuXG4gIC8vIHRoaXMgcGx1Z2luIHN1cHBvcnRzIGEgbm9uLXN0YW5kYXJkICdjb21wYXJlIGltYWdlcycgY29tbWFuZFxuICBzdGF0aWMgbmV3TWV0aG9kTWFwID0ge1xuICAgICcvc2Vzc2lvbi86c2Vzc2lvbklkL2FwcGl1bS9jb21wYXJlX2ltYWdlcyc6IHtcbiAgICAgIFBPU1Q6IHtcbiAgICAgICAgY29tbWFuZDogJ2NvbXBhcmVJbWFnZXMnLFxuICAgICAgICBwYXlsb2FkUGFyYW1zOiB7XG4gICAgICAgICAgcmVxdWlyZWQ6IFsnbW9kZScsICdmaXJzdEltYWdlJywgJ3NlY29uZEltYWdlJ10sXG4gICAgICAgICAgb3B0aW9uYWw6IFsnb3B0aW9ucyddLFxuICAgICAgICB9LFxuICAgICAgICBuZXZlclByb3h5OiB0cnVlLFxuICAgICAgfSxcbiAgICB9LFxuICB9O1xuXG4gIGFzeW5jIGNvbXBhcmVJbWFnZXMobmV4dCwgZHJpdmVyLCAuLi5hcmdzKSB7XG4gICAgcmV0dXJuIGF3YWl0IGNvbXBhcmVJbWFnZXMoLi4uYXJncyk7XG4gIH1cblxuICBhc3luYyBmaW5kRWxlbWVudChuZXh0LCBkcml2ZXIsIC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5fZmluZChmYWxzZSwgbmV4dCwgZHJpdmVyLCAuLi5hcmdzKTtcbiAgfVxuXG4gIGFzeW5jIGZpbmRFbGVtZW50cyhuZXh0LCBkcml2ZXIsIC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5fZmluZCh0cnVlLCBuZXh0LCBkcml2ZXIsIC4uLmFyZ3MpO1xuICB9XG5cbiAgYXN5bmMgX2ZpbmQobXVsdGlwbGUsIG5leHQsIGRyaXZlciwgLi4uYXJncykge1xuICAgIGNvbnN0IFtzdHJhdGVneSwgc2VsZWN0b3JdID0gYXJncztcblxuICAgIC8vIGlmIHdlJ3JlIG5vdCBhY3R1YWxseSBmaW5kaW5nIGJ5IGltYWdlLCBqdXN0IGRvIHRoZSBub3JtYWwgdGhpbmdcbiAgICBpZiAoc3RyYXRlZ3kgIT09IElNQUdFX1NUUkFURUdZKSB7XG4gICAgICByZXR1cm4gYXdhaXQgbmV4dCgpO1xuICAgIH1cblxuICAgIHRoaXMuZmluZGVyLnNldERyaXZlcihkcml2ZXIpO1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmZpbmRlci5maW5kQnlJbWFnZShzZWxlY3Rvciwge211bHRpcGxlfSk7XG4gIH1cblxuICBhc3luYyBoYW5kbGUobmV4dCwgZHJpdmVyLCBjbWROYW1lLCAuLi5hcmdzKSB7XG4gICAgLy8gaWYgd2UgaGF2ZSBhIGNvbW1hbmQgdGhhdCBpbnZvbHZlcyBhbiBpbWFnZSBlbGVtZW50IGlkLCBhdHRlbXB0IHRvIGZpbmQgdGhlIGltYWdlIGVsZW1lbnRcbiAgICAvLyBhbmQgZXhlY3V0ZSB0aGUgY29tbWFuZCBvbiBpdFxuICAgIGNvbnN0IGltZ0VsSWQgPSBnZXRJbWdFbEZyb21BcmdzKGFyZ3MpO1xuICAgIGlmIChpbWdFbElkKSB7XG4gICAgICBpZiAoIXRoaXMuZmluZGVyLmltZ0VsQ2FjaGUuaGFzKGltZ0VsSWQpKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnMuTm9TdWNoRWxlbWVudEVycm9yKCk7XG4gICAgICB9XG4gICAgICBjb25zdCBpbWdFbCA9IHRoaXMuZmluZGVyLmltZ0VsQ2FjaGUuZ2V0KGltZ0VsSWQpO1xuICAgICAgcmV0dXJuIGF3YWl0IEltYWdlRWxlbWVudC5leGVjdXRlKGRyaXZlciwgaW1nRWwsIGNtZE5hbWUsIC4uLmFyZ3MpO1xuICAgIH1cblxuICAgIC8vIG90aGVyd2lzZSBqdXN0IGRvIHRoZSBub3JtYWwgdGhpbmdcbiAgICByZXR1cm4gYXdhaXQgbmV4dCgpO1xuICB9XG59XG5cbmV4cG9ydCB7SW1hZ2VFbGVtZW50UGx1Z2luLCBnZXRJbWdFbEZyb21BcmdzLCBJTUFHRV9TVFJBVEVHWX07XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQUVBLE1BQU1BLGNBQWMsR0FBRyxRQUF2Qjs7O0FBRUEsU0FBU0MsZ0JBQVQsQ0FBMEJDLElBQTFCLEVBQWdDO0VBQzlCLEtBQUssSUFBSUMsR0FBVCxJQUFnQkQsSUFBaEIsRUFBc0I7SUFDcEIsSUFBSUUsZUFBQSxDQUFFQyxRQUFGLENBQVdGLEdBQVgsS0FBbUJBLEdBQUcsQ0FBQ0csVUFBSixDQUFlQyxrQ0FBZixDQUF2QixFQUE2RDtNQUMzRCxPQUFPSixHQUFQO0lBQ0Q7RUFDRjtBQUNGOztBQUVjLE1BQU1LLGtCQUFOLFNBQWlDQyxlQUFqQyxDQUE0QztFQUN6REMsV0FBVyxDQUFDQyxVQUFELEVBQWE7SUFDdEIsTUFBTUEsVUFBTjtJQUNBLEtBQUtDLE1BQUwsR0FBYyxJQUFJQyxlQUFKLEVBQWQ7RUFDRDs7RUFHa0IsT0FBWkMsWUFBWSxHQUFHO0lBQ3BCLDZDQUE2QztNQUMzQ0MsSUFBSSxFQUFFO1FBQ0pDLE9BQU8sRUFBRSxlQURMO1FBRUpDLGFBQWEsRUFBRTtVQUNiQyxRQUFRLEVBQUUsQ0FBQyxNQUFELEVBQVMsWUFBVCxFQUF1QixhQUF2QixDQURHO1VBRWJDLFFBQVEsRUFBRSxDQUFDLFNBQUQ7UUFGRyxDQUZYO1FBTUpDLFVBQVUsRUFBRTtNQU5SO0lBRHFDO0VBRHpCLENBQUg7O0VBYUEsTUFBYkMsYUFBYSxDQUFDQyxJQUFELEVBQU9DLE1BQVAsRUFBZSxHQUFHckIsSUFBbEIsRUFBd0I7SUFDekMsT0FBTyxNQUFNLElBQUFtQixzQkFBQSxFQUFjLEdBQUduQixJQUFqQixDQUFiO0VBQ0Q7O0VBRWdCLE1BQVhzQixXQUFXLENBQUNGLElBQUQsRUFBT0MsTUFBUCxFQUFlLEdBQUdyQixJQUFsQixFQUF3QjtJQUN2QyxPQUFPLE1BQU0sS0FBS3VCLEtBQUwsQ0FBVyxLQUFYLEVBQWtCSCxJQUFsQixFQUF3QkMsTUFBeEIsRUFBZ0MsR0FBR3JCLElBQW5DLENBQWI7RUFDRDs7RUFFaUIsTUFBWndCLFlBQVksQ0FBQ0osSUFBRCxFQUFPQyxNQUFQLEVBQWUsR0FBR3JCLElBQWxCLEVBQXdCO0lBQ3hDLE9BQU8sTUFBTSxLQUFLdUIsS0FBTCxDQUFXLElBQVgsRUFBaUJILElBQWpCLEVBQXVCQyxNQUF2QixFQUErQixHQUFHckIsSUFBbEMsQ0FBYjtFQUNEOztFQUVVLE1BQUx1QixLQUFLLENBQUNFLFFBQUQsRUFBV0wsSUFBWCxFQUFpQkMsTUFBakIsRUFBeUIsR0FBR3JCLElBQTVCLEVBQWtDO0lBQzNDLE1BQU0sQ0FBQzBCLFFBQUQsRUFBV0MsUUFBWCxJQUF1QjNCLElBQTdCOztJQUdBLElBQUkwQixRQUFRLEtBQUs1QixjQUFqQixFQUFpQztNQUMvQixPQUFPLE1BQU1zQixJQUFJLEVBQWpCO0lBQ0Q7O0lBRUQsS0FBS1YsTUFBTCxDQUFZa0IsU0FBWixDQUFzQlAsTUFBdEI7SUFDQSxPQUFPLE1BQU0sS0FBS1gsTUFBTCxDQUFZbUIsV0FBWixDQUF3QkYsUUFBeEIsRUFBa0M7TUFBQ0Y7SUFBRCxDQUFsQyxDQUFiO0VBQ0Q7O0VBRVcsTUFBTkssTUFBTSxDQUFDVixJQUFELEVBQU9DLE1BQVAsRUFBZVUsT0FBZixFQUF3QixHQUFHL0IsSUFBM0IsRUFBaUM7SUFHM0MsTUFBTWdDLE9BQU8sR0FBR2pDLGdCQUFnQixDQUFDQyxJQUFELENBQWhDOztJQUNBLElBQUlnQyxPQUFKLEVBQWE7TUFDWCxJQUFJLENBQUMsS0FBS3RCLE1BQUwsQ0FBWXVCLFVBQVosQ0FBdUJDLEdBQXZCLENBQTJCRixPQUEzQixDQUFMLEVBQTBDO1FBQ3hDLE1BQU0sSUFBSUcsY0FBQSxDQUFPQyxrQkFBWCxFQUFOO01BQ0Q7O01BQ0QsTUFBTUMsS0FBSyxHQUFHLEtBQUszQixNQUFMLENBQVl1QixVQUFaLENBQXVCSyxHQUF2QixDQUEyQk4sT0FBM0IsQ0FBZDtNQUNBLE9BQU8sTUFBTU8sMEJBQUEsQ0FBYUMsT0FBYixDQUFxQm5CLE1BQXJCLEVBQTZCZ0IsS0FBN0IsRUFBb0NOLE9BQXBDLEVBQTZDLEdBQUcvQixJQUFoRCxDQUFiO0lBQ0Q7O0lBR0QsT0FBTyxNQUFNb0IsSUFBSSxFQUFqQjtFQUNEOztBQTFEd0QifQ==