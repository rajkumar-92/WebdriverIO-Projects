/**
 * @typedef Dimension
 * @property {number} width - width of rect
 * @property {number} height - height of rect
 */
/**
 * @typedef Position
 * @property {number} x - x coordinate
 * @property {number} y - y coordinate
 */
/**
 * Representation of an "image element", which is simply a set of coordinates
 * and methods that can be used on that set of coordinates via the driver
 */
export default class ImageElement {
    /**
     * Handle various Appium commands that involve an image element
     *
     * @param {import('appium/driver').BaseDriver} driver - the driver to use for commands
     * @param {string} cmd - the name of the driver command
     * @param {string} imgElId - the id of the ImageElement to work with
     * @param {string[]} args - Rest of arguments for executeScripts
     *
     * @returns {object} - the result of running a command
     */
    static execute(driver: import('appium/driver').BaseDriver, imgEl: any, cmd: string, ...args: string[]): object;
    /**
     * @param {string} b64Template - the base64-encoded image which was used to
     *                               find this ImageElement
     * @param {Rect} rect - bounds of matched image element
     * @param {number} score The similarity score as a float number in range [0.0, 1.0].
     * 1.0 is the highest score (means both images are totally equal).
     * @param {string?} b64Result - the base64-encoded image which has matched marks.
     *                              Defaults to null.
     * @param {import('./finder').default?} finder - the finder we can use to re-check stale elements
     */
    constructor(b64Template: string, rect: Rect, score: number, b64Result?: string | null, finder?: import('./finder').default | null);
    template: string;
    rect: import("@appium/types").Rect;
    id: string;
    b64MatchedImage: string | null;
    score: number;
    finder: import("./finder").default | null;
    /**
     * @returns {Dimension} - dimension of element
     */
    get size(): Dimension;
    /**
     * @returns {Position} - coordinates of top-left corner of element
     */
    get location(): Position;
    /**
     * @returns {Position} - coordinates of center of element
     */
    get center(): Position;
    /**
     * @returns {?string} - the base64-encoded image which has matched marks
     */
    get matchedImage(): string | null;
    /**
     * @param {string} protocolKey - the protocol-specific JSON key for
     * a WebElement
     *
     * @returns {Element} - this image element as a WebElement
     */
    asElement(protocolKey: string): Element;
    /**
     * @param {ImageElement} other - an ImageElement to compare with this one
     *
     * @returns {boolean} - whether the other element and this one have the same
     * properties
     */
    equals(other: ImageElement): boolean;
    /**
     * Use a driver to tap the screen at the center of this ImageElement's
     * position
     *
     * @param {BaseDriver} driver - driver for calling actions with
     */
    click(driver: BaseDriver): Promise<any>;
}
export type Dimension = {
    /**
     * - width of rect
     */
    width: number;
    /**
     * - height of rect
     */
    height: number;
};
export type Position = {
    /**
     * - x coordinate
     */
    x: number;
    /**
     * - y coordinate
     */
    y: number;
};
export type Rect = import('@appium/types').Rect;
export type Element = import('@appium/types').Element;
export const IMAGE_EL_TAP_STRATEGY_MJSONWP: "touchActions";
export const IMAGE_EL_TAP_STRATEGY_W3C: "w3cActions";
export const DEFAULT_TEMPLATE_IMAGE_SCALE: 1;
export const IMAGE_ELEMENT_PREFIX: "appium-image-element-";
//# sourceMappingURL=image-element.d.ts.map