{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/proxy/index.ts"],"names":[],"mappings":";;;;;;AAAA,oBAAoB;AACpB,oDAA2B;AAC3B,4CAA0B;AAE1B,4CAA2C;AAGpC,KAAK,UAAU,GAAG;IACrB,MAAM,MAAM,GAAG,gBAAM,CAAC,SAAS,CAAC,gBAAgB,CAAC,wBAAY,CAAC,CAAA;IAC9D,OAAO,CAAC,GAAG,CAAC,oCAAoC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC;IAE/D,MAAM,EAAE,GAAG,IAAI,YAAS,CAAC,kBAAkB,MAAM,CAAC,IAAI,EAAE,CAAC,CAAA;IACzD,EAAE,CAAC,EAAE,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAC,CAAA;IAC7D,EAAE,CAAC,EAAE,CAAC,SAAS,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE;QAC5B,IAAI;YACA,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAA;YAC/B,OAAO,CAAC,GAAG,CAAC,4BAA4B,OAAO,EAAE,CAAC,CAAC;YACnD,gBAAM,CAAC,MAAM,CAAA;YAEb,MAAM,EAAE,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAkB,CAAA;YAEvE,IAAI;gBACA,IAAI,MAAM,GAAG,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,EAAE,gBAAM,EAAE,GAAG,MAAM,CAAC,CAAA;gBACzD,IAAI,OAAO,MAAM,KAAK,QAAQ,IAAI,OAAO,MAAM,CAAC,IAAI,KAAK,UAAU,EAAE;oBACjE,MAAM,GAAG,MAAM,MAAM,CAAA;iBACxB;gBAED,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAiB,EAAE,EAAE,EAAE,MAAM,EAAE,CAAC,CAAA;gBAC/D,OAAO,CAAC,GAAG,CAAC,2BAA2B,QAAQ,EAAE,CAAC,CAAC;gBAEnD,OAAO,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;aAC3B;YAAC,OAAO,GAAQ,EAAE;gBACf,OAAO,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAiB,EAAE,EAAE,EAAE,KAAK,EAAE,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC,CAAA;aAC7E;SACJ;QAAC,OAAO,GAAQ,EAAE;YACf,OAAO,CAAC,KAAK,CAAC,8BAA8B,GAAG,CAAC,OAAO,EAAE,CAAC,CAAA;SAC7D;IACL,CAAC,CAAC,CAAA;IAEF,OAAO,IAAI,OAAO,CAAC,GAAG,EAAE,GAAE,CAAC,CAAC,CAAA;AAChC,CAAC;AAjCD,kBAiCC","sourcesContent":["/* eslint-disable */\nimport vscode from 'vscode'\nimport WebSocket from 'ws'\n\nimport { SETTINGS_KEY } from '../constants'\nimport type { RemoteCommand, RemoteResponse } from '../types'\n\nexport async function run(): Promise<void> {\n    const config = vscode.workspace.getConfiguration(SETTINGS_KEY)\n    console.log(`Connect to service proxy on port ${config.port}`);\n\n    const ws = new WebSocket(`ws://localhost:${config.port}`)\n    ws.on('open', () => console.log('WebSocket proxy connected'))\n    ws.on('message', async (data) => {\n        try {\n            const message = data.toString()\n            console.log(`Received remote command: ${message}`);\n            vscode.window\n\n            const { id, fn, params } = JSON.parse(data.toString()) as RemoteCommand\n\n            try {\n                let result = eval(fn).call(globalThis, vscode, ...params)\n                if (typeof result === 'object' && typeof result.then === 'function') {\n                    result = await result\n                }\n\n                const response = JSON.stringify(<RemoteResponse>{ id, result })\n                console.log(`Return remote response: ${response}`);\n\n                return ws.send(response)\n            } catch (err: any) {\n                return ws.send(JSON.stringify(<RemoteResponse>{ id, error: err.message }))\n            }\n        } catch (err: any) {\n            console.error(`Failed run remote command: ${err.message}`)\n        }\n    })\n\n    return new Promise(() => {})\n}\n"]}