"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.run = void 0;
/* eslint-disable */
const vscode_1 = __importDefault(require("vscode"));
const ws_1 = __importDefault(require("ws"));
const constants_1 = require("../constants");
async function run() {
    const config = vscode_1.default.workspace.getConfiguration(constants_1.SETTINGS_KEY);
    console.log(`Connect to service proxy on port ${config.port}`);
    const ws = new ws_1.default(`ws://localhost:${config.port}`);
    ws.on('open', () => console.log('WebSocket proxy connected'));
    ws.on('message', async (data) => {
        try {
            const message = data.toString();
            console.log(`Received remote command: ${message}`);
            vscode_1.default.window;
            const { id, fn, params } = JSON.parse(data.toString());
            try {
                let result = eval(fn).call(globalThis, vscode_1.default, ...params);
                if (typeof result === 'object' && typeof result.then === 'function') {
                    result = await result;
                }
                const response = JSON.stringify({ id, result });
                console.log(`Return remote response: ${response}`);
                return ws.send(response);
            }
            catch (err) {
                return ws.send(JSON.stringify({ id, error: err.message }));
            }
        }
        catch (err) {
            console.error(`Failed run remote command: ${err.message}`);
        }
    });
    return new Promise(() => { });
}
exports.run = run;
//# sourceMappingURL=index.js.map