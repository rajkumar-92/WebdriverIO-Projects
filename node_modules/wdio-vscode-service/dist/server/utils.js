"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.scanForExtensions = exports.getWorkbenchOptions = void 0;
const promises_1 = __importDefault(require("fs/promises"));
const path_1 = __importDefault(require("path"));
const vscode_uri_1 = require("vscode-uri");
const constants_1 = require("./constants");
async function getWorkbenchOptions(ctx, config) {
    const options = {};
    if (config.extensionPaths) {
        const extensionPromises = config.extensionPaths.map((extensionPath, index) => scanForExtensions(extensionPath, {
            scheme: ctx.protocol,
            authority: ctx.host,
            path: `/static/extensions/${index}`
        }));
        options.additionalBuiltinExtensions = (await Promise.all(extensionPromises)).flat();
    }
    if (config.extensionIds) {
        if (!options.additionalBuiltinExtensions) {
            options.additionalBuiltinExtensions = [];
        }
        options.additionalBuiltinExtensions.push(...config.extensionIds);
    }
    if (config.extensionDevelopmentPath) {
        const developmentOptions = options.developmentOptions = {};
        developmentOptions.extensions = await scanForExtensions(config.extensionDevelopmentPath, { scheme: ctx.protocol, authority: ctx.host, path: '/static/devextensions' });
        if (config.extensionTestsPath) {
            let relativePath = path_1.default.relative(config.extensionDevelopmentPath, config.extensionTestsPath);
            if (process.platform === 'win32') {
                relativePath = relativePath.replace(/\\/g, '/');
            }
            developmentOptions.extensionTestsPath = {
                scheme: ctx.protocol,
                authority: ctx.host,
                path: path_1.default.posix.join('/static/devextensions', relativePath)
            };
        }
    }
    if (config.folderMountPath) {
        if (!options.additionalBuiltinExtensions) {
            options.additionalBuiltinExtensions = [];
        }
        options.additionalBuiltinExtensions.push({
            scheme: ctx.protocol,
            authority: ctx.host,
            path: constants_1.fsProviderExtensionPrefix
        });
        options.folderUri = vscode_uri_1.URI.parse(constants_1.fsProviderFolderUri);
    }
    else if (config.folderUri) {
        options.folderUri = vscode_uri_1.URI.parse(config.folderUri);
    }
    else {
        options.workspaceUri = vscode_uri_1.URI.from({ scheme: 'tmp', path: '/default.code-workspace' });
    }
    options.productConfiguration = { enableTelemetry: false };
    return options;
}
exports.getWorkbenchOptions = getWorkbenchOptions;
async function scanForExtensions(rootPath, serverURI) {
    const result = [];
    async function getExtension(relativePosixFolderPath) {
        try {
            const packageJSONPath = path_1.default.join(rootPath, relativePosixFolderPath, 'package.json');
            if ((await promises_1.default.stat(packageJSONPath)).isFile()) {
                return {
                    scheme: serverURI.scheme,
                    authority: serverURI.authority,
                    path: path_1.default.posix.join(serverURI.path, relativePosixFolderPath)
                };
            }
        }
        catch {
            return undefined;
        }
        return undefined;
    }
    async function processFolder(relativePosixFolderPath) {
        const extension = await getExtension(relativePosixFolderPath);
        if (extension) {
            result.push(extension);
        }
        else {
            const folderPath = path_1.default.join(rootPath, relativePosixFolderPath);
            const entries = await promises_1.default.readdir(folderPath, { withFileTypes: true });
            for (const entry of entries) {
                if (entry.isDirectory() && entry.name.charAt(0) !== '.') {
                    await processFolder(path_1.default.posix.join(relativePosixFolderPath, entry.name));
                }
            }
        }
    }
    await processFolder('');
    return result;
}
exports.scanForExtensions = scanForExtensions;
//# sourceMappingURL=utils.js.map