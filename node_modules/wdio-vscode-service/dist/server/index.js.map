{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/server/index.ts"],"names":[],"mappings":"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","sourcesContent":["import fs from 'fs/promises'\nimport path from 'path'\n\nimport logger from '@wdio/logger'\nimport getPort from 'get-port'\nimport fastify, { FastifyRequest } from 'fastify'\nimport fastifyCors from '@fastify/cors'\nimport fastifyStatic from '@fastify/static'\nimport { request } from 'undici'\n\nimport getWorkbench from './workbench.tpl'\nimport { getWorkbenchOptions } from './utils'\nimport { getFileType } from '../utils'\nimport { fsProviderExtensionPrefix } from './constants'\nimport { DEFAULT_VSCODE_WEB_PORT, DEFAULT_CHANNEL, DEFAULT_VSCODE_WEB_HOSTNAME } from '../constants'\nimport type { VSCodeOptions, Bundle } from '../types'\n\nconst log = logger('wdio-vscode-service/server')\n\nconst mountPrefix = '/static/mount'\nconst webviewHostRegexp = /^https:\\/\\/[^.]+\\.vscode-webview\\.net$/\n\ntype COIRequest = FastifyRequest<{\n    Querystring: {\n        'vscode-coi': '1' | '2' | '3'\n    }\n}>\n\n/**\n * ToDo(Christian): missing capabilities:\n *   - allow serve VSCode sources from path location or CDN\n *   - allow to include additional extensions (#20)\n */\nexport default async function startServer (standalone: Bundle, options: VSCodeOptions) {\n    const app = fastify({ logger: true })\n    const port = await getPort({ port: options.serverOptions?.port || DEFAULT_VSCODE_WEB_PORT })\n    await app.register(fastifyCors, {\n        methods: ['GET'],\n        credentials: true,\n        origin: (origin, cb) => cb(null, webviewHostRegexp.test(origin))\n    })\n\n    app.addHook('preHandler', async (req: COIRequest, reply) => {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        reply.header('Access-Control-Allow-Origin', '*')\n\n        const value = req.query['vscode-coi']\n        if (value === '1') {\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            reply.header('Cross-Origin-Opener-Policy', 'same-origin')\n        } else if (value === '2') {\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            reply.header('Cross-Origin-Embedder-Policy', 'require-corp')\n        } else if (value === '3' || value === '') {\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            reply.header('Cross-Origin-Opener-Policy', 'same-origin')\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            reply.header('Cross-Origin-Embedder-Policy', 'require-corp')\n        }\n    })\n\n    if (options.extensionPath) {\n        log.info(`Serving dev extensions from ${options.extensionPath}`)\n        await app.register(fastifyStatic, {\n            prefix: '/static/devextensions',\n            root: options.extensionPath\n        })\n    }\n\n    await app.register(fastifyStatic, {\n        prefix: '/static/build',\n        root: standalone.path,\n        decorateReply: false // the reply decorator has been added by the first plugin registration\n    })\n\n    if (options.workspacePath) {\n        log.info(`Serve workspace from ${options.workspacePath}`)\n        app.addHook('preHandler', async (req, reply) => {\n            const filePath = (req.params as { '*': string })['*']\n            const queries = Object.keys(req.query as Record<string, string>)\n\n            if (!options.workspacePath || !filePath || !req.url.startsWith(mountPrefix)) {\n                return null\n            }\n\n            const p = path.join(\n                options.workspacePath,\n                filePath === mountPrefix.slice(1)\n                    ? filePath.slice(mountPrefix.length - 1)\n                    : filePath\n            )\n            if (queries.includes('stat')) {\n                try {\n                    const stats = await fs.stat(p)\n                    // eslint-disable-next-line @typescript-eslint/return-await\n                    return reply.send(JSON.stringify({\n                        type: getFileType(stats),\n                        ctime: stats.ctime.getTime(),\n                        mtime: stats.mtime.getTime(),\n                        size: stats.size\n                    }))\n                } catch (e: any) {\n                    log.warn(e.stack)\n                    return reply.send(JSON.stringify({\n                        error: (e as NodeJS.ErrnoException).code\n                    }))\n                }\n            }\n\n            if (queries.includes('readdir')) {\n                try {\n                    const entries = await fs.readdir(p, { withFileTypes: true })\n                    // eslint-disable-next-line @typescript-eslint/return-await\n                    return reply.send(JSON.stringify(\n                        entries.map((d) => ({ name: d.name, type: getFileType(d) }))\n                    ))\n                } catch (e: any) {\n                    log.warn(e.stack)\n                    return reply.send(JSON.stringify({\n                        error: (e as NodeJS.ErrnoException).code\n                    }))\n                }\n            }\n\n            return null\n        })\n\n        await app.register(fastifyStatic, {\n            prefix: `${mountPrefix}/`,\n            root: options.workspacePath,\n            dotfiles: 'allow',\n            decorateReply: false // the reply decorator has been added by the first plugin registration\n        })\n        await app.register(fastifyStatic, {\n            prefix: fsProviderExtensionPrefix,\n            root: path.join(__dirname, '..', '..', 'src', 'server', 'fs-provider'),\n            decorateReply: false // the reply decorator has been added by the first plugin registration\n        })\n    }\n\n    /**\n     * mount additional extensions here, e.g.:\n     * ```\n     * if (config.extensionPaths) {\n     *   config.extensionPaths.forEach((extensionPath, index) => {\n     *     console.log('Serving additional built-in extensions from ' + extensionPath);\n     *     app.use(kmount(`/static/extensions/${index}`, kstatic(extensionPath, serveOptions)));\n     *   });\n     * }\n     * ```\n     * when working on https://github.com/webdriverio-community/wdio-vscode-service/issues/20\n     */\n\n    /**\n     * Workbench\n     */\n    app.get('/callback', async (req, reply) => {\n        const host = `${req.protocol}://${req.hostname || DEFAULT_VSCODE_WEB_HOSTNAME}:${port}`\n        const url = `${host}/${req.url}/out/vs/code/browser/workbench/callback.html`\n        const { body } = await request(url, {})\n        await reply.send(body)\n    })\n\n    app.get('/', async (req, reply) => {\n        const hostname = req.hostname || DEFAULT_VSCODE_WEB_HOSTNAME\n        const host = `${req.protocol}://${hostname}`\n        const webConfiguration = await getWorkbenchOptions(\n            { protocol: req.protocol, host: hostname },\n            {\n                /**\n                 * modify when support additional extension\n                 */\n                extensionPaths: [],\n                extensionIds: [], // GalleryExtensionInfo[] | undefined\n                extensionDevelopmentPath: options.extensionPath,\n                build: {\n                    type: 'static' as const,\n                    location: standalone.path,\n                    quality: (options.version || DEFAULT_CHANNEL) as 'stable' | 'insider',\n                    version: standalone.version\n                },\n                extensionTestsPath: undefined,\n                folderUri: undefined,\n                folderMountPath: options.workspacePath,\n                printServerLog: true\n            }\n        )\n\n        const template = getWorkbench({\n            baseUrl: `${host}/static/build`,\n            webConfiguration: JSON.stringify(webConfiguration).replace(/\"/g, '&quot;'),\n            authSession: '',\n            builtinExtensions: '[]'\n        })\n\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        reply.header('Content-Type', 'text/html')\n        return reply.send(template)\n    })\n\n    await app.listen(port)\n    log.info(`VSCode server started on port ${port}`)\n    return port\n}\n"]}