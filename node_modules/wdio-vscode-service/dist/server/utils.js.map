{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/server/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import fs from 'fs/promises'\nimport path from 'path'\nimport { URI } from 'vscode-uri'\n\nimport { fsProviderExtensionPrefix, fsProviderFolderUri } from './constants'\n\nexport interface IConfig {\n    readonly extensionPaths: string[] | undefined\n    readonly extensionIds: GalleryExtensionInfo[] | undefined\n    readonly extensionDevelopmentPath: string | undefined\n    readonly extensionTestsPath: string | undefined\n    readonly build: Sources | Static | CDN\n    readonly folderUri: string | undefined\n    readonly folderMountPath: string | undefined\n    readonly printServerLog: boolean\n}\n\nexport interface GalleryExtensionInfo {\n    readonly id: string\n    readonly preRelease?: boolean\n}\n\nexport interface Sources {\n    readonly type: 'sources'\n    readonly location: string\n}\n\nexport interface Static {\n    readonly type: 'static'\n    readonly location: string\n    readonly quality: 'stable' | 'insider'\n    readonly version: string\n}\n\nexport interface CDN {\n    readonly type: 'cdn'\n    readonly uri: string\n}\n\ninterface IDevelopmentOptions {\n    extensionTestsPath?: URIComponents\n    extensions?: URIComponents[]\n}\n\ninterface URIComponents {\n    scheme: string\n    authority: string\n    path: string\n}\n\ninterface IWorkbenchOptions {\n    additionalBuiltinExtensions?: (string | URIComponents | GalleryExtensionInfo)[]\n    developmentOptions?: IDevelopmentOptions\n    productConfiguration?: { [key: string]: any }\n\n    // options of the builtin workbench (vs/code/browser/workbench/workbench)\n    folderUri?: URIComponents\n    workspaceUri?: URIComponents\n}\n\nexport async function getWorkbenchOptions (\n    ctx: { protocol: string, host: string },\n    config: IConfig\n): Promise<IWorkbenchOptions> {\n    const options: IWorkbenchOptions = {}\n    if (config.extensionPaths) {\n        const extensionPromises = config.extensionPaths.map(\n            (extensionPath, index) => scanForExtensions(extensionPath, {\n                scheme: ctx.protocol,\n                authority: ctx.host,\n                path: `/static/extensions/${index}`\n            })\n        )\n        options.additionalBuiltinExtensions = (await Promise.all(extensionPromises)).flat()\n    }\n    if (config.extensionIds) {\n        if (!options.additionalBuiltinExtensions) {\n            options.additionalBuiltinExtensions = []\n        }\n\n        options.additionalBuiltinExtensions.push(...config.extensionIds)\n    }\n    if (config.extensionDevelopmentPath) {\n        const developmentOptions: IDevelopmentOptions = options.developmentOptions = {}\n\n        developmentOptions.extensions = await scanForExtensions(\n            config.extensionDevelopmentPath,\n            { scheme: ctx.protocol, authority: ctx.host, path: '/static/devextensions' }\n        )\n        if (config.extensionTestsPath) {\n            let relativePath = path.relative(config.extensionDevelopmentPath, config.extensionTestsPath)\n            if (process.platform === 'win32') {\n                relativePath = relativePath.replace(/\\\\/g, '/')\n            }\n            developmentOptions.extensionTestsPath = {\n                scheme: ctx.protocol,\n                authority: ctx.host,\n                path: path.posix.join('/static/devextensions', relativePath)\n            }\n        }\n    }\n    if (config.folderMountPath) {\n        if (!options.additionalBuiltinExtensions) {\n            options.additionalBuiltinExtensions = []\n        }\n        options.additionalBuiltinExtensions.push({\n            scheme: ctx.protocol,\n            authority: ctx.host,\n            path: fsProviderExtensionPrefix\n        })\n        options.folderUri = URI.parse(fsProviderFolderUri)\n    } else if (config.folderUri) {\n        options.folderUri = URI.parse(config.folderUri)\n    } else {\n        options.workspaceUri = URI.from({ scheme: 'tmp', path: '/default.code-workspace' })\n    }\n    options.productConfiguration = { enableTelemetry: false }\n    return options\n}\n\nexport async function scanForExtensions (\n    rootPath: string,\n    serverURI: URIComponents\n): Promise<URIComponents[]> {\n    const result: URIComponents[] = []\n    async function getExtension (relativePosixFolderPath: string): Promise<URIComponents | undefined> {\n        try {\n            const packageJSONPath = path.join(rootPath, relativePosixFolderPath, 'package.json')\n            if ((await fs.stat(packageJSONPath)).isFile()) {\n                return {\n                    scheme: serverURI.scheme,\n                    authority: serverURI.authority,\n                    path: path.posix.join(serverURI.path, relativePosixFolderPath)\n                }\n            }\n        } catch {\n            return undefined\n        }\n\n        return undefined\n    }\n\n    async function processFolder (relativePosixFolderPath: string) {\n        const extension = await getExtension(relativePosixFolderPath)\n        if (extension) {\n            result.push(extension)\n        } else {\n            const folderPath = path.join(rootPath, relativePosixFolderPath)\n            const entries = await fs.readdir(folderPath, { withFileTypes: true })\n            for (const entry of entries) {\n                if (entry.isDirectory() && entry.name.charAt(0) !== '.') {\n                    await processFolder(path.posix.join(relativePosixFolderPath, entry.name))\n                }\n            }\n        }\n    }\n\n    await processFolder('')\n    return result\n}\n"]}