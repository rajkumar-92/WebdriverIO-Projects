{"version":3,"file":"SettingsEditor.js","sourceRoot":"","sources":["../../../src/pageobjects/editor/SettingsEditor.ts"],"names":[],"mappings":";;;;;;;;;AAAA,qCAAiD;AAEjD,0BAA4C;AAE5C,oCAEiB;AACjB,mDAAgF;AAGhF;;;;GAIG;AAEI,IAAM,cAAc,GAApB,MAAM,cAAe,SAAQ,eAAsB;IAOtD,YACI,QAA0B,EAC1B,IAA+B;QAE/B,KAAK,CAAC,QAAQ,EAAE,IAAI,EAAE,IAAI,CAAC,CAAA;QAV/B;;WAEG;QACI,eAAU,GAAG,gBAAyB,CAAA;QAQzC,IAAI,CAAC,IAAI,GAAG,IAAI,IAAI,IAAI,cAAU,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA;IACvD,CAAC;IAED;;;;;;;;;;;OAWG;IACH,KAAK,CAAC,WAAW,CAAE,KAAa,EAAE,GAAG,UAAoB;QACrD,MAAM,QAAQ,GAAG,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;QACvC,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,SAAmB,CAAC,CAAA;QAC/E,MAAM,SAAS,CAAC,QAAQ,CAAC,GAAG,QAAQ,KAAK,KAAK,EAAE,CAAC,CAAA;QAEjD,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,UAAU,CAAA;QACnC,IAAI,SAAS,GAAG,MAAM,KAAK,CAAC,OAAO,EAAE,CAAA;QAErC,MAAM,OAAO,CAAC,SAAS,CAAC,KAAK,IAAI,EAAE;YAC/B,MAAM,IAAA,aAAK,EAAC,IAAI,CAAC,CAAA;YACjB,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,OAAO,EAAE,CAAA;YAClC,IAAI,IAAI,KAAK,SAAS,EAAE;gBACpB,SAAS,GAAG,IAAI,CAAA;gBAChB,OAAO,KAAK,CAAA;aACf;YACD,OAAO,IAAI,CAAA;QACf,CAAC,CAAC,CAAA;QAEF,IAAI,OAAiB,CAAA;QACrB,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,SAAS,CAAA;QAClC,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;YACtB,IAAI;gBACA,OAAO,MAAM,CAAC,MAAM,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC,IAAI,EAAE,CAAA;aACxE;YAAC,OAAO,GAAG,EAAE;gBACV,SAAS;aACZ;SACJ;QACD,OAAO,OAAO,CAAA;IAClB,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,mBAAmB,CAAE,WAAiC;QACxD,MAAM,IAAI,CAAC,OAAO;aACb,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;aACrB,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC;aACxB,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;aACpC,KAAK,EAAE,CAAA;IAChB,CAAC;IAED;;OAEG;IACH,eAAe;QACX,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAA;IAC9C,CAAC;IAEO,KAAK,CAAC,aAAa,CAAE,OAA4B,EAAE,KAAa,EAAE,QAAgB;QACtF,IAAI,CAAC,MAAM,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC,UAAU,EAAE,EAAE;YAClF,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAA;SACvC;QAED,sBAAsB;QACtB,IAAI,MAAM,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,UAAU,EAAE,EAAE;YAC1D,OAAO,IAAI,YAAY,CAAC,IAAI,CAAC,UAAU,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAA;SAClE;QAED,mBAAmB;QACnB,IAAI,MAAM,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,UAAU,EAAE,EAAE;YACzD,OAAO,IAAI,WAAW,CAAC,IAAI,CAAC,UAAU,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAA;SACjE;QAED,uBAAuB;QACvB,IAAI,MAAM,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC,UAAU,EAAE,EAAE;YAC7D,OAAO,IAAI,eAAe,CAAC,IAAI,CAAC,UAAU,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAA;SACrE;QAED,mBAAmB;QACnB,IAAI,MAAM,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,UAAU,EAAE,EAAE;YACxD,OAAO,IAAI,WAAW,CAAC,IAAI,CAAC,UAAU,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAA;SACjE;QAED,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAA;IACjD,CAAC;CACJ,CAAA;AA1GY,cAAc;IAD1B,IAAA,qBAAa,EAAC,wBAAsB,CAAC;GACzB,cAAc,CA0G1B;AA1GY,wCAAc;AA6G3B;;;;;GAKG;AACH,MAAsB,OAAQ,SAAQ,gBAAuC;IAIzE,YACI,QAA0B,EAC1B,KAAa,EACb,QAAgB,EACT,QAAwB;QAE/B,KAAK,CAAC,QAAQ,EAAG,QAAQ,CAAC,cAAc,CAAC,kBAA+B,CAAC,KAAK,EAAE,QAAQ,CAAW,CAAC,CAAA;QAF7F,aAAQ,GAAR,QAAQ,CAAgB;QAG/B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAA;QAClB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAA;IAC5B,CAAC;IAgBD;;;OAGG;IACH,WAAW;QACP,OAAO,IAAI,CAAC,QAAQ,CAAA;IACxB,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,cAAc;QAChB,OAAO,IAAI,CAAC,mBAAmB,CAAC,OAAO,EAAE,CAAA;IAC7C,CAAC;IAED;;OAEG;IACH,QAAQ;QACJ,OAAO,IAAI,CAAC,KAAK,CAAA;IACrB,CAAC;CACJ;AAnDD,0BAmDC;AAED;;;;GAIG;AAEI,IAAM,YAAY,GAAlB,MAAM,YAAa,SAAQ,OAAO;IAAlC;;QACH;;WAEG;QACI,eAAU,GAAG,gBAAyB,CAAA;IA0DjD,CAAC;IAxDG,QAAQ;QACJ,OAAO,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,OAAO,CAAC,CAAA;IACnD,CAAC;IAED,KAAK,CAAC,QAAQ,CAAE,KAAa;QACzB,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,UAAU,EAAE,CAAA;QACpC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;YACrC,IAAI,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;gBAC/D,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,OAAO,EAAE,CAAA;gBACjE,IAAI,KAAK,KAAK,IAAI,EAAE;oBAChB,MAAM,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAA;oBACrB,OAAM;iBACT;aACJ;SACJ;IACL,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,SAAS;QACX,MAAM,MAAM,GAAG,EAAE,CAAA;QACjB,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,UAAU,EAAE,CAAA;QAEpC,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE;YACpB,MAAM,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,OAAO,EAAE,CAAC,CAAA;SAChE;QACD,OAAO,MAAM,CAAA;IACjB,CAAC;IAEO,KAAK,CAAC,UAAU;QACpB,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,SAAS,EAAE,CAAA;QACnC,OAAO,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAA;IACzC,CAAC;IAEO,KAAK,CAAC,SAAS;QACnB,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,aAAa,CAAA;QACtC,MAAM,SAAS,GAAG,MAAM,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,IAAc,CAAC,CAAA;QAC3E,MAAM,KAAK,GAAG,MAAM,SAAS,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,WAAqB,CAAC,CAAA;QACnF,IAAI,IAA0B,CAAA;QAE9B,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;YAClB,MAAM,KAAK,CAAC,KAAK,EAAE,CAAA;YACnB,IAAI,GAAG,MAAM,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,WAAqB,CAAC,CAAA;YAC3E,OAAO,IAAI,CAAA;SACd;QACD,IAAI,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,EAAE;YAC9B,MAAM,KAAK,CAAC,KAAK,EAAE,CAAA;YACnB,yCAAyC;YACzC,MAAM,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;SAC3B;QACD,MAAM,KAAK,CAAC,KAAK,EAAE,CAAA;QACnB,IAAI,GAAG,MAAM,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,WAAqB,CAAC,CAAA;QAC3E,OAAO,IAAI,CAAA;IACf,CAAC;CACJ,CAAA;AA9DY,YAAY;IADxB,IAAA,qBAAa,EAAC,wBAAsB,CAAC;GACzB,YAAY,CA8DxB;AA9DY,oCAAY;AAiEzB;;;;GAIG;AAEI,IAAM,WAAW,GAAjB,MAAM,WAAY,SAAQ,OAAO;IAAjC;;QACH;;WAEG;QACI,eAAU,GAAG,gBAAyB,CAAA;IAUjD,CAAC;IARG,KAAK,CAAC,QAAQ;QACV,OAAO,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,OAAO,CAAC,CAAA;IAClD,CAAC;IAED,KAAK,CAAC,QAAQ,CAAE,KAAa;QACzB,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,YAAY,CAAA;QACrC,MAAM,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAA;IAC/B,CAAC;CACJ,CAAA;AAdY,WAAW;IADvB,IAAA,qBAAa,EAAC,wBAAsB,CAAC;GACzB,WAAW,CAcvB;AAdY,kCAAW;AAiBxB;;;;GAIG;AAEI,IAAM,eAAe,GAArB,MAAM,eAAgB,SAAQ,OAAO;IAArC;;QACH;;WAEG;QACI,eAAU,GAAG,gBAAyB,CAAA;IAejD,CAAC;IAbG,KAAK,CAAC,QAAQ;QACV,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAA;QACvF,IAAI,OAAO,KAAK,MAAM,EAAE;YACpB,OAAO,IAAI,CAAA;SACd;QACD,OAAO,KAAK,CAAA;IAChB,CAAC;IAED,KAAK,CAAC,QAAQ,CAAE,KAAc;QAC1B,IAAI,MAAM,IAAI,CAAC,QAAQ,EAAE,KAAK,KAAK,EAAE;YACjC,MAAM,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAA;SACtC;IACL,CAAC;CACJ,CAAA;AAnBY,eAAe;IAD3B,IAAA,qBAAa,EAAC,wBAAsB,CAAC;GACzB,eAAe,CAmB3B;AAnBY,0CAAe;AAsB5B;;;;GAIG;AAEI,IAAM,WAAW,GAAjB,MAAM,WAAY,SAAQ,OAAO;IAAjC;;QACH;;WAEG;QACI,eAAU,GAAG,gBAAyB,CAAA;IAiBjD,CAAC;IAfG,QAAQ;QACJ,MAAM,IAAI,KAAK,CAAC,kDAAkD,CAAC,CAAA;IACvE,CAAC;IAED,QAAQ;QACJ,MAAM,IAAI,KAAK,CAAC,kDAAkD,CAAC,CAAA;IACvE,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,QAAQ;QACV,MAAM,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAA;IAClC,CAAC;CACJ,CAAA;AArBY,WAAW;IADvB,IAAA,qBAAa,EAAC,wBAAsB,CAAC;GACzB,WAAW,CAqBvB;AArBY,kCAAW","sourcesContent":["import { Editor, EditorLocators } from './Editor'\nimport { ContextMenu } from '../menu/ContextMenu'\nimport { EditorView, EditorGroup } from '..'\n\nimport {\n    PageDecorator, IPageDecorator, BasePage, VSCodeLocatorMap, sleep\n} from '../utils'\nimport { SettingsEditor as SettingsEditorLocators } from '../../locators/1.73.0'\n\nexport interface SettingsEditor extends IPageDecorator<EditorLocators> {}\n/**\n * Page object representing the internal VSCode settings editor\n *\n * @category Editor\n */\n@PageDecorator(SettingsEditorLocators)\nexport class SettingsEditor extends Editor<EditorLocators> {\n    /**\n     * @private\n     */\n    public locatorKey = 'SettingsEditor' as const\n    public view: EditorView | EditorGroup\n\n    constructor (\n        locators: VSCodeLocatorMap,\n        view?: EditorView | EditorGroup\n    ) {\n        super(locators, view?.elem)\n        this.view = view || new EditorView(this.locatorMap)\n    }\n\n    /**\n     * Search for a setting with a particular title and category.\n     * Returns an appropriate Setting object if the label is found,\n     * undefined otherwise.\n     *\n     * If your setting has nested categories (i.e `example.general.test`),\n     * pass in each category as a separate string.\n     *\n     * @param title title of the setting\n     * @param categories category of the setting\n     * @returns Promise resolving to a Setting object if found, undefined otherwise\n     */\n    async findSetting (title: string, ...categories: string[]): Promise<Setting> {\n        const category = categories.join(' â€º ')\n        const searchBox = await this.elem.$(this.locatorMap.Editor.inputArea as string)\n        await searchBox.setValue(`${category}: ${title}`)\n\n        const count = await this.itemCount$\n        let textCount = await count.getText()\n\n        await browser.waitUntil(async () => {\n            await sleep(1500)\n            const text = await count.getText()\n            if (text !== textCount) {\n                textCount = text\n                return false\n            }\n            return true\n        })\n\n        let setting!: Setting\n        const items = await this.itemRow$$\n        for (const item of items) {\n            try {\n                return await (await this.createSetting(item, title, category)).wait()\n            } catch (err) {\n                // ignore\n            }\n        }\n        return setting\n    }\n\n    /**\n     * Switch between settings perspectives\n     * Works only if your vscode instance has both user and workspace settings available\n     *\n     * @param perspective User or Workspace\n     * @returns Promise that resolves when the appropriate button is clicked\n     */\n    async switchToPerspective (perspective: 'User' | 'Workspace'): Promise<void> {\n        await this.header$\n            .$(this.locators.tabs)\n            .$(this.locators.actions)\n            .$(this.locators.action(perspective))\n            .click()\n    }\n\n    /**\n     * Context menu is disabled in this editor, throw an error\n     */\n    openContextMenu (): Promise<ContextMenu> {\n        throw new Error('Operation not supported')\n    }\n\n    private async createSetting (element: WebdriverIO.Element, title: string, category: string): Promise<Setting> {\n        if (!await element.$(this.locators.settingConstructor(title, category)).isExisting()) {\n            throw new Error('Setting not found')\n        }\n\n        // try a combo setting\n        if (await element.$(this.locators.comboSetting).isExisting()) {\n            return new ComboSetting(this.locatorMap, title, category, this)\n        }\n\n        // try text setting\n        if (await element.$(this.locators.textSetting).isExisting()) {\n            return new TextSetting(this.locatorMap, title, category, this)\n        }\n\n        // try checkbox setting\n        if (await element.$(this.locators.checkboxSetting).isExisting()) {\n            return new CheckboxSetting(this.locatorMap, title, category, this)\n        }\n\n        // try link setting\n        if (await element.$(this.locators.linkButton).isExisting()) {\n            return new LinkSetting(this.locatorMap, title, category, this)\n        }\n\n        throw new Error('Setting type not supported')\n    }\n}\n\nexport interface Setting extends IPageDecorator<typeof SettingsEditorLocators> {}\n/**\n * Abstract item representing a Setting with title, description and\n * an input element (combo/textbox/checkbox/link)\n *\n * @category Editor\n */\nexport abstract class Setting extends BasePage<typeof SettingsEditorLocators> {\n    private title: string\n    private category: string\n\n    constructor (\n        locators: VSCodeLocatorMap,\n        title: string,\n        category: string,\n        public settings: SettingsEditor\n    ) {\n        super(locators, (locators.SettingsEditor.settingConstructor as Function)(title, category) as string)\n        this.title = title\n        this.category = category\n    }\n\n    /**\n     * Get the value of the setting based on its input type\n     *\n     * @returns promise that resolves to the current value of the setting\n     */\n    abstract getValue (): Promise<string | boolean>\n\n    /**\n     * Set the value of the setting based on its input type\n     *\n     * @param value boolean for checkboxes, string otherwise\n     */\n    abstract setValue (value: string | boolean): Promise<void>\n\n    /**\n     * Get the category of the setting\n     * All settings are labeled as Category: Title\n     */\n    getCategory (): string {\n        return this.category\n    }\n\n    /**\n     * Get description of the setting\n     * @returns Promise resolving to setting description\n     */\n    async getDescription (): Promise<string> {\n        return this.settingDesctiption$.getText()\n    }\n\n    /**\n     * Get title of the setting\n     */\n    getTitle (): string {\n        return this.title\n    }\n}\n\n/**\n * Setting with a combo box\n *\n * @category Editor\n */\n@PageDecorator(SettingsEditorLocators)\nexport class ComboSetting extends Setting {\n    /**\n     * @private\n     */\n    public locatorKey = 'SettingsEditor' as const\n\n    getValue (): Promise<string> {\n        return this.comboSetting$.getAttribute('title')\n    }\n\n    async setValue (value: string): Promise<void> {\n        const rows = await this.getOptions()\n        for (let i = 0; i < rows.length; i += 1) {\n            if ((await rows[i].getAttribute('class')).indexOf('disabled') < 0) {\n                const text = await rows[i].$(this.locators.comboOption).getText()\n                if (value === text) {\n                    await rows[i].click()\n                    return\n                }\n            }\n        }\n    }\n\n    /**\n     * Get the labels of all options from the combo\n     * @returns Promise resolving to array of string values\n     */\n    async getValues (): Promise<string[]> {\n        const values = []\n        const rows = await this.getOptions()\n\n        for (const row of rows) {\n            values.push(await row.$(this.locators.comboOption).getText())\n        }\n        return values\n    }\n\n    private async getOptions () {\n        const menu = await this.openCombo()\n        return menu.$$(this.locators.itemRow)\n    }\n\n    private async openCombo () {\n        const combo = await this.comboSetting$\n        const workbench = await browser.$(this.locatorMap.Workbench.elem as string)\n        const menus = await workbench.$$(this.locatorMap.ContextMenu.contextView as string)\n        let menu!: WebdriverIO.Element\n\n        if (menus.length < 1) {\n            await combo.click()\n            menu = await workbench.$(this.locatorMap.ContextMenu.contextView as string)\n            return menu\n        }\n        if (await menus[0].isDisplayed()) {\n            await combo.click()\n            // eslint-disable-next-line wdio/no-pause\n            await browser.pause(200)\n        }\n        await combo.click()\n        menu = await workbench.$(this.locatorMap.ContextMenu.contextView as string)\n        return menu\n    }\n}\n\nexport interface TextSetting extends IPageDecorator<typeof SettingsEditorLocators> {}\n/**\n * Setting with a text box input\n *\n * @category Editor\n */\n@PageDecorator(SettingsEditorLocators)\nexport class TextSetting extends Setting {\n    /**\n     * @private\n     */\n    public locatorKey = 'SettingsEditor' as const\n\n    async getValue (): Promise<string> {\n        return this.textSetting$.getAttribute('value')\n    }\n\n    async setValue (value: string): Promise<void> {\n        const input = await this.textSetting$\n        await input.setValue(value)\n    }\n}\n\nexport interface TextSetting extends IPageDecorator<typeof SettingsEditorLocators> {}\n/**\n * Setting with a checkbox\n *\n * @category Editor\n */\n@PageDecorator(SettingsEditorLocators)\nexport class CheckboxSetting extends Setting {\n    /**\n     * @private\n     */\n    public locatorKey = 'SettingsEditor' as const\n\n    async getValue (): Promise<boolean> {\n        const checked = await this.checkboxSetting$.getAttribute(this.locators.checkboxChecked)\n        if (checked === 'true') {\n            return true\n        }\n        return false\n    }\n\n    async setValue (value: boolean): Promise<void> {\n        if (await this.getValue() !== value) {\n            await this.checkboxSetting$.click()\n        }\n    }\n}\n\nexport interface LinkSetting extends IPageDecorator<typeof SettingsEditorLocators> {}\n/**\n * Setting with no value, with a link to settings.json instead\n *\n * @category Editor\n */\n@PageDecorator(SettingsEditorLocators)\nexport class LinkSetting extends Setting {\n    /**\n     * @private\n     */\n    public locatorKey = 'SettingsEditor' as const\n\n    getValue (): Promise<string> {\n        throw new Error('Method getValue is not available for LinkSetting')\n    }\n\n    setValue (): Promise<void> {\n        throw new Error('Method setValue is not available for LinkSetting')\n    }\n\n    /**\n     * Open the link that leads to the value in settings.json\n     * @returns Promise resolving when the link has been clicked\n     */\n    async openLink (): Promise<void> {\n        await this.linkButton$.click()\n    }\n}\n"]}