{"version":3,"file":"Editor.js","sourceRoot":"","sources":["../../../src/pageobjects/editor/Editor.ts"],"names":[],"mappings":";;;AAEA,0BAAuD;AACvD,oCAAmE;AAoBnE;;;;GAIG;AACH,MAAsB,MAAU,SAAQ,8BAAyB;IAC7D,YACI,QAA0B,EAC1B,OAA+D,EACxD,OAAiC,IAAI,cAAU,CAAC,QAAQ,CAAC;QAEhE,KAAK,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAA;QAFjB,SAAI,GAAJ,IAAI,CAAqD;QAGhE,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;IACzC,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,QAAQ;QACV,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,MAAM,EAAE,CAAA;QAC/B,OAAO,GAAG,CAAC,QAAQ,EAAE,CAAA;IACzB,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,MAAM;QACR,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAA;QACzB,OAAO,OAAO,CAAC,YAAY,EAAwB,CAAA;IACvD,CAAC;CACJ;AAzBD,wBAyBC","sourcesContent":["import { ChainablePromiseElement } from 'webdriverio'\n\nimport { EditorView, EditorGroup, EditorTab } from '..'\nimport { ElementWithContextMenu, VSCodeLocatorMap } from '../utils'\nimport {\n    Editor as EditorLocatorsMap,\n    SettingsEditor as SettingsEditorLocators,\n    TextEditor as TextEditorLocators,\n    DiffEditor as DiffEditorLocators,\n    EditorView as EditorViewLocators\n} from '../../locators/1.73.0'\n\n/**\n * @hidden\n */\nexport type EditorLocators = (\n    typeof EditorLocatorsMap &\n    typeof SettingsEditorLocators &\n    typeof TextEditorLocators &\n    typeof DiffEditorLocators &\n    typeof EditorViewLocators\n)\n\n/**\n * Abstract representation of an editor tab\n *\n * @category Editor\n */\nexport abstract class Editor<T> extends ElementWithContextMenu<T> {\n    constructor (\n        locators: VSCodeLocatorMap,\n        element?: ChainablePromiseElement<WebdriverIO.Element> | string,\n        public view: EditorView | EditorGroup = new EditorView(locators)\n    ) {\n        super(locators, element)\n        this.setParentElement(this.view.elem)\n    }\n\n    /**\n     * Get title/name of the open editor\n     */\n    async getTitle (): Promise<string> {\n        const tab = await this.getTab()\n        return tab.getTitle()\n    }\n\n    /**\n     * Get the corresponding editor tab\n     */\n    async getTab (): Promise<EditorTab> {\n        const element = this.view\n        return element.getActiveTab() as Promise<EditorTab>\n    }\n}\n"]}