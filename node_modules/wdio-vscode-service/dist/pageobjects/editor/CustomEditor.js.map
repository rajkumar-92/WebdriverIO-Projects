{"version":3,"file":"CustomEditor.js","sourceRoot":"","sources":["../../../src/pageobjects/editor/CustomEditor.ts"],"names":[],"mappings":";;;;;;;;;AAAA,0BAAqC;AACrC,oCAAwD;AACxD,mDAAgE;AAChE,+CAAyC;AAGzC;;;;GAIG;AAEI,IAAM,YAAY,GAAlB,MAAM,YAAa,SAAQ,UAA6B;IAAxD;;QACH;;WAEG;QACI,eAAU,GAAG,QAAiB,CAAA;IAgCzC,CAAC;IA9BG;;;OAGG;IACH,KAAK,CAAC,OAAO;QACT,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,MAAM,EAAE,CAAA;QAC/B,MAAM,KAAK,GAAG,MAAM,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAA;QAClD,OAAO,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAA;IAClC,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,IAAI;QACN,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,MAAM,EAAE,CAAA;QAC/B,MAAM,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,mBAAO,EAAE,GAAG,CAAC,CAAC,CAAA;IAC3C,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,MAAM;QACR,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,MAAM,EAAE,CAAA;QAC/B,MAAM,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,mBAAO,EAAE,OAAO,EAAE,GAAG,CAAC,CAAC,CAAA;QAChD,MAAM,QAAQ,GAAG,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAc,CAAC,CAAA;QACnE,MAAM,QAAQ,CAAC,YAAY,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAA;QAC9C,OAAO,IAAI,YAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA;IACxC,CAAC;CACJ,CAAA;AApCY,YAAY;IADxB,IAAA,qBAAa,EAAC,gBAAc,CAAC;GACjB,YAAY,CAoCxB;AApCY,oCAAY","sourcesContent":["import { Editor, InputBox } from '..'\nimport { PageDecorator, IPageDecorator } from '../utils'\nimport { Editor as EditorLocators } from '../../locators/1.73.0'\nimport { CMD_KEY } from '../../constants'\n\nexport interface CustomEditor extends IPageDecorator<typeof EditorLocators> {}\n/**\n * Page object for custom editors\n *\n * @category Editor\n */\n@PageDecorator(EditorLocators)\nexport class CustomEditor extends Editor<typeof EditorLocators> {\n    /**\n     * @private\n     */\n    public locatorKey = 'Editor' as const\n\n    /**\n     * Check if the editor has unsaved changes\n     * @returns Promise resolving to true if there are unsaved changes, false otherwise\n     */\n    async isDirty (): Promise<boolean> {\n        const tab = await this.getTab()\n        const klass = await tab.elem.getAttribute('class')\n        return klass.includes('dirty')\n    }\n\n    /**\n     * Save the editor\n     */\n    async save (): Promise<void> {\n        const tab = await this.getTab()\n        await tab.elem.addValue([CMD_KEY, 's'])\n    }\n\n    /**\n     * Open the Save as prompt\n     *\n     * @returns InputBox serving as a simple file dialog\n     */\n    async saveAs (): Promise<InputBox> {\n        const tab = await this.getTab()\n        await tab.elem.addValue([CMD_KEY, 'Shift', 's'])\n        const inputBox = browser.$(this.locatorMap.InputBox.elem as string)\n        await inputBox.waitForExist({ timeout: 5000 })\n        return new InputBox(this.locatorMap)\n    }\n}\n"]}