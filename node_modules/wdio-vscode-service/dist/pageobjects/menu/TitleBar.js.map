{"version":3,"file":"TitleBar.js","sourceRoot":"","sources":["../../../src/pageobjects/menu/TitleBar.ts"],"names":[],"mappings":"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","sourcesContent":["import { PageDecorator, IPageDecorator, VSCodeLocatorMap } from '../utils'\nimport { WindowControls, ContextMenu } from '..'\nimport { Menu } from './Menu'\nimport { MenuItem } from './MenuItem'\nimport { TitleBar as TitleBarLocators } from '../../locators/1.73.0'\n\nexport interface TitleBar extends IPageDecorator<typeof TitleBarLocators> {}\n/**\n * Page object representing the custom VSCode title bar\n *\n * @category Menu\n */\n@PageDecorator(TitleBarLocators)\nexport class TitleBar extends Menu<typeof TitleBarLocators> {\n    /**\n     * @private\n     */\n    public locatorKey = 'TitleBar' as const\n\n    /**\n     * Get title bar item by name\n     * @param name name of the item to search by\n     * @returns Promise resolving to TitleBarItem object\n     */\n    async getItem (name: string): Promise<TitleBarItem | undefined> {\n        try {\n            const titleBar = new TitleBarItem(\n                this.locatorMap,\n                this.locators.itemConstructor(name),\n                this\n            )\n            await titleBar.wait()\n            return titleBar\n        } catch (err) {\n            return undefined\n        }\n    }\n\n    /**\n     * Get all title bar items\n     * @returns Promise resolving to array of TitleBarItem objects\n     */\n    async getItems (): Promise<TitleBarItem[]> {\n        const items: TitleBarItem[] = []\n        const elements = await this.itemElement$$\n\n        for (const element of elements) {\n            const isDisplayed = await element.isDisplayed()\n            if (!isDisplayed) {\n                continue\n            }\n\n            const item = new TitleBarItem(\n                this.locatorMap,\n                await element.getAttribute(this.locators.itemLabel),\n                this\n            )\n            await item.wait()\n            items.push(item)\n        }\n        return items\n    }\n\n    /**\n     * Get the window title\n     * @returns Promise resolving to the window title\n     */\n    async getTitle (): Promise<string> {\n        const title = await this.title$.getText()\n\n        /**\n         * when testing VSCode on the web the element is not\n         * visible and the text will be \"\", therefor we need\n         * to fetch the HTML\n         */\n        if (title.length === 0) {\n            return this.title$.getHTML(false)\n        }\n\n        return title\n    }\n\n    /**\n     * Get a reference to the WindowControls\n     */\n    getWindowControls (): WindowControls {\n        return new WindowControls(this.locatorMap, this.elem)\n    }\n}\n\nexport interface TitleBarItem extends IPageDecorator<typeof TitleBarLocators> {}\n/**\n * Page object representing an item of the custom VSCode title bar\n *\n * @category Menu\n */\n@PageDecorator(TitleBarLocators)\nexport class TitleBarItem extends MenuItem<typeof TitleBarLocators> {\n    /**\n     * @private\n     */\n    public locatorKey = 'TitleBar' as const\n\n    constructor (\n        locators: VSCodeLocatorMap,\n        public label: string,\n        public parentMenu: Menu<typeof TitleBarLocators>\n    ) {\n        super(locators, (locators.TitleBar.itemConstructor as Function)(label) as string)\n        this.parentMenu = parentMenu\n        this.label = label\n    }\n\n    async select () {\n        const openMenus = await browser.$$(this.locatorMap.ContextMenu.elem as string)\n        if (openMenus.length > 0 && await openMenus[0].isDisplayed()) {\n            await browser.keys('Escape')\n        }\n        await this.elem.click()\n\n        const menu = new ContextMenu(this.locatorMap, this.elem)\n        await menu.wait()\n        return menu\n    }\n}\n"]}