"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WindowControls = void 0;
const utils_1 = require("../utils");
const __1 = require("../..");
const _1_73_0_1 = require("../../locators/1.73.0");
/**
 * Page object for the windows controls part of the title bar
 *
 * @category Menu
 */
let WindowControls = class WindowControls extends utils_1.BasePage {
    constructor(locators, element, bar = new __1.TitleBar(locators)) {
        super(locators, element);
        this.bar = bar;
        /**
         * @private
         */
        this.locatorKey = 'WindowControls';
        this.setParentElement(this.bar.elem);
    }
    /**
     * Use the minimize window button
     * @returns Promise resolving when minimize button is pressed
     */
    async minimize() {
        await this.minimize$.click();
    }
    /**
     * Use the maximize window button if the window is not maximized
     * @returns Promise resolving when maximize button is pressed
     */
    async maximize() {
        try {
            await this.maximize$.click();
        }
        catch (err) {
            console.log('Window is already maximized');
        }
    }
    /**
     * Use the restore window button if the window is maximized
     * @returns Promise resolving when restore button is pressed
     */
    async restore() {
        try {
            await this.restore$.click();
        }
        catch (err) {
            console.log('Window is not maximized');
        }
    }
    /**
     * Use the window close button. Use at your own risk.
     * @returns Promise resolving when close button is pressed
     */
    async close() {
        await this.close$.click();
    }
};
WindowControls = __decorate([
    (0, utils_1.PageDecorator)(_1_73_0_1.WindowControls)
], WindowControls);
exports.WindowControls = WindowControls;
//# sourceMappingURL=WindowControls.js.map