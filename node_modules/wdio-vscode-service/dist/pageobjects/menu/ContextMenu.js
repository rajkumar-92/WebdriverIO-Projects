"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContextMenuItem = exports.ContextMenu = void 0;
const __1 = require("..");
const utils_1 = require("../utils");
const _1_73_0_1 = require("../../locators/1.73.0");
/**
 * Object representing a context menu
 *
 * @category Menu
 */
let ContextMenu = class ContextMenu extends __1.Menu {
    constructor() {
        super(...arguments);
        /**
         * @private
         */
        this.locatorKey = 'ContextMenu';
    }
    /**
     * Get context menu item by name
     * @param name name of the item to search by
     * @returns Promise resolving to ContextMenuItem object
     */
    async getItem(name) {
        try {
            const items = await this.getItems();
            for (const item of items) {
                if (await item.getLabel() === name) {
                    return item;
                }
            }
            return undefined;
        }
        catch (err) {
            return undefined;
        }
    }
    /**
     * Get all context menu items
     * @returns Promise resolving to array of ContextMenuItem objects
     */
    async getItems() {
        const items = [];
        const elements = await this.itemElement$$;
        for (const element of elements) {
            const classProperty = await element.getAttribute('class');
            if (classProperty.indexOf('disabled') < 0) {
                const item = new ContextMenuItem(this.locatorMap, 
                // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
                element, this);
                await item.wait();
                items.push(item);
            }
        }
        return items;
    }
    /**
     * Close the context menu
     * @returns Promise resolving when the menu is closed
     */
    async close() {
        await browser.keys('Escape');
        await this.elem.waitForDisplayed({ reverse: true });
        // Todo(Christian): maybe handle stale element exception
    }
    /**
     * Wait for the menu to appear and load all its items
     */
    async wait(timeout = 5000) {
        await (await this.elem).waitForDisplayed({ timeout });
        let items = (await this.getItems()).length;
        await browser.waitUntil(async () => {
            const temp = (await this.getItems()).length;
            if (temp === items) {
                return true;
            }
            items = temp;
            return false;
        }, { timeout: 1000 });
        return this;
    }
};
ContextMenu = __decorate([
    (0, utils_1.PageDecorator)(_1_73_0_1.ContextMenu)
], ContextMenu);
exports.ContextMenu = ContextMenu;
/**
 * Object representing an item of a context menu
 *
 * @category Menu
 */
let ContextMenuItem = class ContextMenuItem extends __1.MenuItem {
    constructor(locators, base, parentMenu) {
        super(locators, base, parentMenu.elem);
        this.parentMenu = parentMenu;
        /**
         * @private
         */
        this.locatorKey = 'ContextMenu';
        this.label = '';
    }
    async select() {
        await this.elem.click();
        await (0, utils_1.sleep)(500);
        if (await this.isNesting()) {
            await new ContextMenu(this.locatorMap, this.elem).wait();
        }
        return undefined;
    }
    async getLabel() {
        const labelItem = await this.itemLabel$;
        return labelItem.getAttribute(this.locators.itemText);
    }
    async isNesting() {
        try {
            await this.itemNesting$.waitForDisplayed();
            return true;
        }
        catch (err) {
            return false;
        }
    }
};
ContextMenuItem = __decorate([
    (0, utils_1.PageDecorator)(_1_73_0_1.ContextMenu)
], ContextMenuItem);
exports.ContextMenuItem = ContextMenuItem;
//# sourceMappingURL=ContextMenu.js.map