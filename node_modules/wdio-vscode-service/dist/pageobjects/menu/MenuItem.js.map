{"version":3,"file":"MenuItem.js","sourceRoot":"","sources":["../../../src/pageobjects/menu/MenuItem.ts"],"names":[],"mappings":";;;AAAA,oCAAmC;AAGnC;;;;GAIG;AACH,MAAsB,QAAY,SAAQ,gBAAW;IAIjD;;;;;OAKG;IACH,KAAK,CAAC,MAAM;QACR,MAAM,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAA;QACvB,OAAO,SAAS,CAAA;IACpB,CAAC;IAED;;;OAGG;IACH,SAAS;QACL,OAAO,IAAI,CAAC,UAAU,CAAA;IAC1B,CAAC;IAED;;OAEG;IACH,QAAQ;QACJ,OAAO,IAAI,CAAC,KAAK,CAAA;IACrB,CAAC;CACJ;AA7BD,4BA6BC","sourcesContent":["import { BasePage } from '../utils'\nimport type { Menu } from './Menu'\n\n/**\n * Abstract element representing a menu item\n *\n * @category Menu\n */\nexport abstract class MenuItem<T> extends BasePage<T> {\n    abstract parentMenu: Menu<T>\n    abstract label: string\n\n    /**\n     * Use the given menu item: Opens the submenu if the item has children,\n     * otherwise simply click the item.\n     *\n     * @returns Menu object representing the submenu if the item has children, void otherwise.\n     */\n    async select (): Promise<Menu<any> | undefined> {\n        await this.elem.click()\n        return undefined\n    }\n\n    /**\n     * Return the Menu object representing the menu this item belongs to\n     * Todo: fix this\n     */\n    getParent (): Menu<T> {\n        return this.parentMenu\n    }\n\n    /**\n     * Returns the label of the menu item\n     */\n    getLabel (): string | Promise<string> {\n        return this.label\n    }\n}\n"]}