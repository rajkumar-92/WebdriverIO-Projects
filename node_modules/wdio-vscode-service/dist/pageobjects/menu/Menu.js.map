{"version":3,"file":"Menu.js","sourceRoot":"","sources":["../../../src/pageobjects/menu/Menu.ts"],"names":[],"mappings":";;;AAAA,oCAAmC;AAGnC;;;;GAIG;AACH,MAAsB,IAAQ,SAAQ,gBAAW;IAC7C;;;;OAIG;IACH,KAAK,CAAC,OAAO,CAAE,IAAY;QACvB,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;QACrC,OAAO,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,EAAE,CAAC,CAAA;IAC5C,CAAC;IAcD;;;;;;;;;;;;;OAaG;IACH,KAAK,CAAC,MAAM,CAAE,GAAG,IAAc;QAC3B,IAAI,MAAM,GAAY,IAAI,CAAA;QAC1B,KAAK,MAAM,KAAK,IAAI,IAAI,EAAE;YACtB,MAAM,IAAI,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA;YACxC,IAAI,CAAC,IAAI;gBAAE,OAAO,MAAM,CAAA;YACxB,MAAM,OAAO,CAAC,SAAS,CAAC,KAAK,IAAI,EAAE,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,MAAM,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAA;YACjG,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,MAAM,EAAE,CAAA;YACnC,IAAI,OAAO,EAAE;gBACT,MAAM,GAAG,OAAO,CAAA;aACnB;iBAAM;gBACH,OAAO,SAAS,CAAA;aACnB;SACJ;QACD,OAAO,MAAM,CAAA;IACjB,CAAC;CACJ;AApDD,oBAoDC","sourcesContent":["import { BasePage } from '../utils'\nimport type { MenuItem } from '..'\n\n/**\n * Abstract element representing a menu\n *\n * @category Menu\n */\nexport abstract class Menu<T> extends BasePage<T> {\n    /**\n     * Find whether the menu has an item of a given name\n     * @param name name of the item to search for\n     * @returns true if menu has an item with the given name, false otherwise\n     */\n    async hasItem (name: string): Promise<boolean> {\n        const item = await this.getItem(name)\n        return Boolean(item?.elem.isDisplayed())\n    }\n\n    /**\n     * Return a menu item of a given name, undefined if not found\n     * @param name name of the item to search for\n     */\n    abstract getItem (name: string): Promise<MenuItem<T> | undefined>\n\n    /**\n     * Get all items of a menu\n     * @returns array of MenuItem object representing the menu items\n     */\n    abstract getItems (): Promise<MenuItem<T>[]>\n\n    /**\n     * Recursively select an item with a given path.\n     *\n     * E.g. calling select('File', 'Preferences', 'Settings') will\n     * open the 'File' -> 'Preferences' submenus and then click on 'Settings'.\n     *\n     * Selection happens in order of the arguments, if one of the items in the middle\n     * of the path has no children, the consequent path arguments will be ignored.\n     *\n     *\n     * @param path path to the item to select, represented by a sequence of strings\n     * @returns void if the last clicked item is a leaf, Menu item representing\n     * its submenu otherwise\n     */\n    async select (...path: string[]): Promise<Menu<T> | undefined> {\n        let parent: Menu<T> = this\n        for (const label of path) {\n            const item = await parent.getItem(label)\n            if (!item) return parent\n            await browser.waitUntil(async () => await item.elem.isDisplayed() && await item.elem.isEnabled())\n            const submenu = await item.select()\n            if (submenu) {\n                parent = submenu\n            } else {\n                return undefined\n            }\n        }\n        return parent\n    }\n}\n"]}