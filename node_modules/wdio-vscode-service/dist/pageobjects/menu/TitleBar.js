"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TitleBarItem = exports.TitleBar = void 0;
const utils_1 = require("../utils");
const __1 = require("..");
const Menu_1 = require("./Menu");
const MenuItem_1 = require("./MenuItem");
const _1_73_0_1 = require("../../locators/1.73.0");
/**
 * Page object representing the custom VSCode title bar
 *
 * @category Menu
 */
let TitleBar = class TitleBar extends Menu_1.Menu {
    constructor() {
        super(...arguments);
        /**
         * @private
         */
        this.locatorKey = 'TitleBar';
    }
    /**
     * Get title bar item by name
     * @param name name of the item to search by
     * @returns Promise resolving to TitleBarItem object
     */
    async getItem(name) {
        try {
            const titleBar = new TitleBarItem(this.locatorMap, this.locators.itemConstructor(name), this);
            await titleBar.wait();
            return titleBar;
        }
        catch (err) {
            return undefined;
        }
    }
    /**
     * Get all title bar items
     * @returns Promise resolving to array of TitleBarItem objects
     */
    async getItems() {
        const items = [];
        const elements = await this.itemElement$$;
        for (const element of elements) {
            const isDisplayed = await element.isDisplayed();
            if (!isDisplayed) {
                continue;
            }
            const item = new TitleBarItem(this.locatorMap, await element.getAttribute(this.locators.itemLabel), this);
            await item.wait();
            items.push(item);
        }
        return items;
    }
    /**
     * Get the window title
     * @returns Promise resolving to the window title
     */
    async getTitle() {
        const title = await this.title$.getText();
        /**
         * when testing VSCode on the web the element is not
         * visible and the text will be "", therefor we need
         * to fetch the HTML
         */
        if (title.length === 0) {
            return this.title$.getHTML(false);
        }
        return title;
    }
    /**
     * Get a reference to the WindowControls
     */
    getWindowControls() {
        return new __1.WindowControls(this.locatorMap, this.elem);
    }
};
TitleBar = __decorate([
    (0, utils_1.PageDecorator)(_1_73_0_1.TitleBar)
], TitleBar);
exports.TitleBar = TitleBar;
/**
 * Page object representing an item of the custom VSCode title bar
 *
 * @category Menu
 */
let TitleBarItem = class TitleBarItem extends MenuItem_1.MenuItem {
    constructor(locators, label, parentMenu) {
        super(locators, locators.TitleBar.itemConstructor(label));
        this.label = label;
        this.parentMenu = parentMenu;
        /**
         * @private
         */
        this.locatorKey = 'TitleBar';
        this.parentMenu = parentMenu;
        this.label = label;
    }
    async select() {
        const openMenus = await browser.$$(this.locatorMap.ContextMenu.elem);
        if (openMenus.length > 0 && await openMenus[0].isDisplayed()) {
            await browser.keys('Escape');
        }
        await this.elem.click();
        const menu = new __1.ContextMenu(this.locatorMap, this.elem);
        await menu.wait();
        return menu;
    }
};
TitleBarItem = __decorate([
    (0, utils_1.PageDecorator)(_1_73_0_1.TitleBar)
], TitleBarItem);
exports.TitleBarItem = TitleBarItem;
//# sourceMappingURL=TitleBar.js.map