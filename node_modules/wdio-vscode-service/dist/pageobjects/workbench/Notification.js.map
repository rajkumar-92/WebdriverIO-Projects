{"version":3,"file":"Notification.js","sourceRoot":"","sources":["../../../src/pageobjects/workbench/Notification.ts"],"names":[],"mappings":"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","sourcesContent":["import { ChainablePromiseElement } from 'webdriverio'\nimport {\n    BasePage, IPageDecorator, PageDecorator, VSCodeLocatorMap\n} from '../utils'\nimport { Notification as NotificationLocators } from '../../locators/1.73.0'\n\n/**\n * Available types of notifications\n * @hidden\n */\nexport enum NotificationType {\n    Info = 'info',\n    Warning = 'warning',\n    Error = 'error',\n    Any = 'any'\n}\n\ninterface NotificationButton extends IPageDecorator<typeof NotificationLocators> {}\n/**\n * Notification button\n *\n * @category Workbench\n */\nclass NotificationButton extends BasePage<typeof NotificationLocators> {\n    /**\n     * @private\n     */\n    public locatorKey = 'Notification' as const\n\n    private title: string\n\n    constructor (\n        locators: VSCodeLocatorMap,\n        title: string\n    ) {\n        super(locators, (locators.Notification.buttonConstructor as Function)(title) as string)\n        this.title = title\n    }\n\n    getTitle (): string {\n        return this.title\n    }\n}\n\nexport interface Notification extends IPageDecorator<typeof NotificationLocators> {}\n/**\n * Abstract element representing a notification\n *\n * @category Workbench\n */\nexport abstract class Notification extends BasePage<typeof NotificationLocators> {\n    /**\n     * Get the message of the notification\n     * @returns Promise resolving to notification message\n     */\n    getMessage (): Promise<string> {\n        return this.message$.getText()\n    }\n\n    /**\n     * Get the type of the notification\n     * @returns Promise resolving to NotificationType\n     */\n    async getType (): Promise<NotificationType> {\n        const iconType = await this.icon$.getAttribute('class')\n        if (iconType.indexOf('icon-info') > -1) {\n            return NotificationType.Info\n        } if (iconType.indexOf('icon-warning') > -1) {\n            return NotificationType.Warning\n        }\n        return NotificationType.Error\n    }\n\n    /**\n     * Get the source of the notification as text\n     * @returns Promise resolving to notification source\n     */\n    async getSource (): Promise<string> {\n        await this.expand()\n        return this.source$.getAttribute('title')\n    }\n\n    /**\n     * Find whether the notification has an active progress bar\n     * @returns Promise resolving to true/false\n     */\n    async hasProgress (): Promise<boolean> {\n        const klass = await this.progress$.getAttribute('class')\n        return klass.indexOf('done') < 0\n    }\n\n    /**\n     * Dismiss the notification\n     * @returns Promise resolving when notification is dismissed\n     */\n    async dismiss (): Promise<void> {\n        const btn = await this.dismiss$\n\n        /**\n         * make button interactable given they only contain\n         * text on hover\n         */\n        await browser.execute(\n            (btnSection) => { btnSection.style.display = 'block' },\n            await this.btnSection$ as any as HTMLLinkElement\n        )\n\n        await btn.click()\n    }\n\n    /**\n     * Get the action buttons of the notification as an array\n     * of NotificationButton objects\n     * @returns Promise resolving to array of NotificationButton objects\n     */\n    async getActions (): Promise<NotificationButton[]> {\n        const buttons: NotificationButton[] = []\n        const elements = await this.actions$\n            .$$(this.locators.action)\n\n        for (const button of elements) {\n            buttons.push(await new NotificationButton(\n                this.locatorMap,\n                await button.getAttribute(this.locators.actionLabel)\n            ).wait())\n        }\n        return buttons\n    }\n\n    /**\n     * Click on an action button with the given title\n     * @param title title of the action/button\n     * @returns Promise resolving when the select button is pressed\n     */\n    async takeAction (title: string): Promise<void> {\n        await new NotificationButton(\n            this.locatorMap,\n            title\n        ).elem.click()\n    }\n\n    /**\n     * Expand the notification if possible\n     */\n    async expand (): Promise<void> {\n        await this.elem.moveTo()\n        const exp = await this.expand$$\n        if (exp[0]) {\n            await exp[0].click()\n        }\n    }\n}\n\n/**\n * Notification displayed on its own in the notifications-toasts container\n *\n * @category Workbench\n */\n@PageDecorator(NotificationLocators)\nexport class StandaloneNotification extends Notification {\n    /**\n     * @private\n     */\n    public locatorKey = 'Notification' as const\n\n    constructor (\n        locators: VSCodeLocatorMap,\n        notification: ChainablePromiseElement<WebdriverIO.Element>\n    ) {\n        super(locators, notification, locators.Notification.standaloneContainer as string)\n    }\n}\n\n/**\n * Notification displayed within the notifications center\n *\n * @category Workbench\n */\n@PageDecorator(NotificationLocators)\nexport class CenterNotification extends Notification {\n    /**\n     * @private\n     */\n    public locatorKey = 'Notification' as const\n}\n"]}