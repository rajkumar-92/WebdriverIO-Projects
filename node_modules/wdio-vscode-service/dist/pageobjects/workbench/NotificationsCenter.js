"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotificationsCenter = void 0;
const Notification_1 = require("./Notification");
const utils_1 = require("../utils");
const _1_73_0_1 = require("../../locators/1.73.0");
/**
 * Notifications center page object
 *
 * @category Workbench
 */
let NotificationsCenter = class NotificationsCenter extends utils_1.BasePage {
    constructor() {
        super(...arguments);
        /**
         * @private
         */
        this.locatorKey = 'NotificationsCenter';
    }
    /**
     * Close the notifications center
     * @returns Promise resolving when the center is closed
     */
    async close() {
        if (await this.elem.isDisplayed()) {
            await this.closeBtn$.click();
        }
    }
    /**
     * Clear all notifications in the notifications center
     * Note that this will also hide the notifications center
     * @returns Promise resolving when the clear all button is pressed
     */
    async clearAllNotifications() {
        return this.clear$.click();
    }
    /**
     * Get all notifications of a given type
     * @param type type of the notifications to look for,
     *             NotificationType.Any will retrieve all notifications
     *
     * @returns Promise resolving to array of Notification objects
     */
    async getNotifications(type) {
        const notifications = [];
        const elements = await this.row$$;
        for (const element of elements) {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
            const not = new Notification_1.CenterNotification(this.locatorMap, element);
            if (type === Notification_1.NotificationType.Any || await not.getType() === type) {
                notifications.push(await not.wait());
            }
        }
        return notifications;
    }
};
NotificationsCenter = __decorate([
    (0, utils_1.PageDecorator)(_1_73_0_1.NotificationsCenter)
], NotificationsCenter);
exports.NotificationsCenter = NotificationsCenter;
//# sourceMappingURL=NotificationsCenter.js.map