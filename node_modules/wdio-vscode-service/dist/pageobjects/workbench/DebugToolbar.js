"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DebugToolbar = void 0;
const utils_1 = require("../utils");
const _1_73_0_1 = require("../../locators/1.73.0");
/**
 * Page object for the Debugger Toolbar
 *
 * @category Workbench
 */
let DebugToolbar = class DebugToolbar extends utils_1.BasePage {
    constructor() {
        super(...arguments);
        /**
         * @private
         */
        this.locatorKey = 'DebugToolbar';
    }
    /**
     * Wait for the execution to pause at the next breakpoint
     */
    async waitForBreakPoint() {
        await browser.waitUntil(async () => {
            const btn = await this.button$('continue');
            return btn.isEnabled();
        });
    }
    /**
     * Click Continue
     */
    async continue() {
        await this.getButton('continue').click();
    }
    /**
     * Click Disconnect
     */
    async disconnect() {
        await this.getButton('disconnect').click();
    }
    /**
     * Click Pause
     */
    async pause() {
        await this.getButton('pause').click();
    }
    /**
     * Click Step Over
     */
    async stepOver() {
        await this.getButton('step-oer').click();
    }
    /**
     * Click Step Into
     */
    async stepInto() {
        await this.getButton('step-ito').click();
    }
    /**
     * Click Step Out
     */
    async stepOut() {
        await this.getButton('step-ot').click();
    }
    /**
     * Click Restart
     */
    async restart() {
        await this.getButton('restart').click();
    }
    /**
     * Click Stop
     */
    async stop() {
        await this.getButton('stop').click();
    }
    getButton(name) {
        return this.button$(name);
    }
};
DebugToolbar = __decorate([
    (0, utils_1.PageDecorator)(_1_73_0_1.DebugToolbar)
], DebugToolbar);
exports.DebugToolbar = DebugToolbar;
//# sourceMappingURL=DebugToolbar.js.map