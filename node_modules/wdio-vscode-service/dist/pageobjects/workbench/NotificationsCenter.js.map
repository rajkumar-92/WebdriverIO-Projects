{"version":3,"file":"NotificationsCenter.js","sourceRoot":"","sources":["../../../src/pageobjects/workbench/NotificationsCenter.ts"],"names":[],"mappings":";;;;;;;;;AAAA,iDAAmF;AACnF,oCAAkE;AAClE,mDAAyF;AAGzF;;;;GAIG;AAEI,IAAM,mBAAmB,GAAzB,MAAM,mBAAoB,SAAQ,gBAA2C;IAA7E;;QACH;;WAEG;QACI,eAAU,GAAG,qBAA8B,CAAA;IAyCtD,CAAC;IAvCG;;;OAGG;IACH,KAAK,CAAC,KAAK;QACP,IAAI,MAAM,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE;YAC/B,MAAM,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAA;SAC/B;IACL,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,qBAAqB;QACvB,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAA;IAC9B,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,gBAAgB,CAAE,IAAsB;QAC1C,MAAM,aAAa,GAAmB,EAAE,CAAA;QACxC,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,KAAK,CAAA;QAEjC,KAAK,MAAM,OAAO,IAAI,QAAQ,EAAE;YAC5B,iEAAiE;YACjE,MAAM,GAAG,GAAG,IAAI,iCAAkB,CAAC,IAAI,CAAC,UAAU,EAAE,OAAc,CAAC,CAAA;YACnE,IAAI,IAAI,KAAK,+BAAgB,CAAC,GAAG,IAAI,MAAM,GAAG,CAAC,OAAO,EAAE,KAAK,IAAI,EAAE;gBAC/D,aAAa,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,EAAE,CAAC,CAAA;aACvC;SACJ;QACD,OAAO,aAAa,CAAA;IACxB,CAAC;CACJ,CAAA;AA7CY,mBAAmB;IAD/B,IAAA,qBAAa,EAAC,6BAA0B,CAAC;GAC7B,mBAAmB,CA6C/B;AA7CY,kDAAmB","sourcesContent":["import { Notification, CenterNotification, NotificationType } from './Notification'\nimport { BasePage, PageDecorator, IPageDecorator } from '../utils'\nimport { NotificationsCenter as NotificationsCenterLocator } from '../../locators/1.73.0'\n\nexport interface NotificationsCenter extends IPageDecorator<typeof NotificationsCenterLocator> {}\n/**\n * Notifications center page object\n *\n * @category Workbench\n */\n@PageDecorator(NotificationsCenterLocator)\nexport class NotificationsCenter extends BasePage<typeof NotificationsCenterLocator> {\n    /**\n     * @private\n     */\n    public locatorKey = 'NotificationsCenter' as const\n\n    /**\n     * Close the notifications center\n     * @returns Promise resolving when the center is closed\n     */\n    async close (): Promise<void> {\n        if (await this.elem.isDisplayed()) {\n            await this.closeBtn$.click()\n        }\n    }\n\n    /**\n     * Clear all notifications in the notifications center\n     * Note that this will also hide the notifications center\n     * @returns Promise resolving when the clear all button is pressed\n     */\n    async clearAllNotifications (): Promise<void> {\n        return this.clear$.click()\n    }\n\n    /**\n     * Get all notifications of a given type\n     * @param type type of the notifications to look for,\n     *             NotificationType.Any will retrieve all notifications\n     *\n     * @returns Promise resolving to array of Notification objects\n     */\n    async getNotifications (type: NotificationType): Promise<Notification[]> {\n        const notifications: Notification[] = []\n        const elements = await this.row$$\n\n        for (const element of elements) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            const not = new CenterNotification(this.locatorMap, element as any)\n            if (type === NotificationType.Any || await not.getType() === type) {\n                notifications.push(await not.wait())\n            }\n        }\n        return notifications\n    }\n}\n"]}