"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var WebView_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebView = void 0;
const utils_1 = require("../utils");
const _1_73_0_1 = require("../../locators/1.73.0");
// @ts-expect-error `PageDecorator` doesn't allow static methods
let WebView = WebView_1 = class WebView extends utils_1.BasePage {
    constructor() {
        super(...arguments);
        /**
         * @private locator key to identify locator map (see locators.ts)
         */
        this.locatorKey = 'WebView';
    }
    get activeFrame() {
        return $(this._locators.WebView.activeFrame);
    }
    /**
     * Switch WebDriver context to given webview so subsequent element
     * calls are targeting elements within the webview.
     *
     * __Note:__ ensure to call `webview.close()` to leave the webview
     * context before using other page objects.
     */
    async open() {
        await browser.switchToFrame(this.elem);
        await (await this.activeFrame).waitForExist();
        await browser.switchToFrame(await this.activeFrame);
    }
    /**
     * Switch from the webview context back to the VSCode context.
     */
    async close() {
        await browser.switchToFrame(null);
        await browser.switchToFrame(null);
    }
    /**
     * Get all available WebViews (including the once in the sidebar or from the editor)
     * @param locators locator map
     * @returns a list of webview objects
     */
    static async getAllWebViews(locators) {
        try {
            /**
             * webviews might not be immediatelly available when VS Code boots up
             */
            await browser.$(locators.WebView.outerFrame).waitForExist({
                timeout: 5000,
                timeoutMsg: 'no webviews found'
            });
        }
        catch (err) {
            return [];
        }
        const frames = await browser.$$(locators.WebView.outerFrame);
        return frames.map((f) => (new WebView_1(locators, f)));
    }
};
WebView = WebView_1 = __decorate([
    (0, utils_1.PageDecorator)(_1_73_0_1.WebView)
], WebView);
exports.WebView = WebView;
//# sourceMappingURL=WebView.js.map