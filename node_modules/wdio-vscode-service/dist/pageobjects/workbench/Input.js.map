{"version":3,"file":"Input.js","sourceRoot":"","sources":["../../../src/pageobjects/workbench/Input.ts"],"names":[],"mappings":"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","sourcesContent":["import clipboard from 'clipboardy'\nimport {\n    IPageDecorator, BasePage, PageDecorator, VSCodeLocatorMap, sleep\n} from '../utils'\nimport {\n    Input as InputLocators,\n    InputBox as InputBoxLocators,\n    QuickOpenBox as QuickOpenBoxLocators\n} from '../../locators/1.73.0'\nimport { CMD_KEY } from '../../constants'\n\nconst HOME_KEY = process.platform === 'win32'\n    ? 'a'\n    : 'Home'\n\ntype AllInputLocators = typeof InputLocators & typeof InputBoxLocators & typeof QuickOpenBoxLocators\nexport interface Input extends IPageDecorator<AllInputLocators> {}\n/**\n * Abstract page object for input fields\n *\n * @category Workbench\n */\nexport abstract class Input extends BasePage<AllInputLocators> {\n    /**\n     * Get current text of the input field\n     * @returns Promise resolving to text of the input field\n     */\n    async getText (): Promise<string> {\n        const input = await this.inputBox$.$(this.locators.input)\n        return input.getAttribute('value')\n    }\n\n    /**\n     * Set (by selecting all and typing) text in the input field\n     * @param text text to set into the input field\n     * @returns Promise resolving when the text is typed in\n     */\n    async setText (text: string): Promise<void> {\n        const input = await this.inputBox$.$(this.locators.input)\n        await this.clear()\n        await sleep(200)\n        if ((await this.getText())?.length > 0) {\n            await input.addValue(['End', 'Shift', HOME_KEY])\n        }\n        await input.addValue(text)\n\n        // fallback to clipboard if the text gets malformed\n        const currentText = await this.getText()\n        if (currentText !== text) {\n            await clipboard.write(text)\n            if (currentText?.length) {\n                const backSpaces = new Array(currentText.length).fill('Backspace')\n                await input.addValue(backSpaces)\n            }\n            await clipboard.write('')\n        }\n    }\n\n    /**\n     * Get the placeholder text for the input field\n     * @returns Promise resolving to input placeholder\n     */\n    async getPlaceHolder (): Promise<string> {\n        return this.inputBox$.$(this.locators.input).getAttribute('placeholder')\n    }\n\n    /**\n     * Confirm the input field by pressing Enter\n     * @returns Promise resolving when the input is confirmed\n     */\n    async confirm (): Promise<void> {\n        const input = this.inputBox$.$(this.locators.input)\n        await input.click()\n        await input.addValue(['Enter'])\n    }\n\n    /**\n     * Cancel the input field by pressing Escape\n     * @returns Promise resolving when the input is cancelled\n     */\n    async cancel (): Promise<void> {\n        await this.inputBox$.$(this.locators.input).addValue(['Escape'])\n    }\n\n    /**\n     * Clear the inpur field\n     * @returns Promise resolving when the field is cleared\n     */\n    async clear (): Promise<void> {\n        const input = await this.inputBox$.$(this.locators.input)\n        // VS Code 1.40 breaks the default clear method, use select all + back space instead\n        await input.addValue(['End'])\n        await input.addValue([CMD_KEY, HOME_KEY])\n        await input.addValue(['Backspace'])\n        if ((await input.getAttribute('value'))?.length > 0) {\n            await input.addValue(['End'])\n            await input.addValue([CMD_KEY, HOME_KEY])\n            await input.addValue(['Backspace'])\n        }\n    }\n\n    /**\n     * Select (click) a quick pick option. Will scroll through the quick picks to find the item.\n     * Search for the item can be done by its text, or index in the quick pick menu.\n     * Note that scrolling does not affect the item's index, but it will\n     * replace some items in the DOM (thus they become unreachable)\n     *\n     * @param indexOrText index (number) or text (string) of the item to search by\n     * @returns Promise resolving when the given quick pick is selected\n     */\n    async selectQuickPick (indexOrText: string | number): Promise<void> {\n        const pick = await this.findQuickPick(indexOrText)\n        if (pick) {\n            await pick.select()\n        } else {\n            await this.resetPosition()\n        }\n    }\n\n    /**\n     * Select/Deselect all quick picks using the 'select all' checkbox\n     * If multiple selection is disabled on the input box, no action is performed\n     *\n     * @param state true to select all, false to deselect all\n     * @returns Promise resolving when all quick picks have been toggled to desired state\n     */\n    async toggleAllQuickPicks (state: boolean): Promise<void> {\n        const checkboxes = await this.quickPickSelectAll$$\n        if (checkboxes.length < 0) {\n            return\n        }\n        if (!await checkboxes[0].isSelected()) {\n            await checkboxes[0].click()\n        }\n        if (state === false) {\n            await checkboxes[0].click()\n        }\n    }\n\n    /**\n     * Scroll through the quick picks to find an item by the name or index\n     * @param indexOrText index (number) or text (string) of the item to search by\n     * @returns Promise resolvnig to QuickPickItem if found, to undefined otherwise\n     */\n    async findQuickPick (indexOrText: string | number): Promise<QuickPickItem | undefined> {\n        const input = await this.inputBox$.$(this.locators.input)\n        const first = await this.quickPickPosition$$(1)\n        if (first.length < 1) {\n            await this.resetPosition()\n        }\n        let endReached = false\n\n        while (!endReached) {\n            const picks = await this.getQuickPicks()\n            for (const pick of picks) {\n                const lastRow = await this.elem.$$(this.locatorMap.DefaultTreeSection.lastRow as string)\n                if (lastRow.length > 0) {\n                    endReached = true\n                } else if (\n                    await pick.elem.getAttribute('aria-posinset') === await pick.elem.getAttribute('aria-setsize')\n                ) {\n                    endReached = true\n                }\n                if (typeof indexOrText === 'string') {\n                    const text = await pick.getLabel()\n                    if (text.indexOf(indexOrText) > -1) {\n                        return pick\n                    }\n                } else if (indexOrText === pick.getIndex()) {\n                    return pick\n                }\n            }\n            if (!endReached) {\n                await input.addValue(['PageDown'])\n            }\n        }\n        return undefined\n    }\n\n    /**\n     * Retrieve the title of an input box if it has one\n     * @returns Promise resolving to title if it exists, to undefined otherwise\n     */\n    async getTitle (): Promise<string | undefined> {\n        const titleBar = await this.titleBar$$\n        if (titleBar.length > 0 && await titleBar[0].isDisplayed()) {\n            return (await titleBar[0].$(this.locators.title)).getText()\n        }\n        return undefined\n    }\n\n    /**\n     * Click on the back button if it exists\n     * @returns Promise resolving to true if a button was clicked, to false otherwise\n     */\n    async back (): Promise<boolean> {\n        const titleBar = await this.titleBar$$\n        if (titleBar.length > 0 && await titleBar[0].isDisplayed()) {\n            const backBtn = await titleBar[0].$$(this.locators.backButton)\n            if (backBtn.length > 0 && await backBtn[0].isEnabled()) {\n                await backBtn[0].click()\n                return true\n            }\n        }\n        return false\n    }\n\n    /**\n     * Find whether the input box has an active progress bar\n     * @returns Promise resolving to true/false\n     */\n    abstract hasProgress (): Promise<boolean>\n\n    /**\n     * Retrieve the quick pick items currently available in the DOM\n     * (visible in the quick pick menu)\n     * @returns Promise resolving to array of QuickPickItem objects\n     */\n    abstract getQuickPicks (): Promise<QuickPickItem[]>\n\n    private async resetPosition (): Promise<void> {\n        const text = await this.getText()\n        await this.clear()\n        await this.setText(text)\n    }\n}\n\nexport interface QuickPickItem extends IPageDecorator<typeof InputLocators> {}\n/**\n * Page object representing a quick pick option in the input box\n *\n * @category Workbench\n */\n@PageDecorator(InputLocators)\nexport class QuickPickItem extends BasePage<typeof InputLocators> {\n    /**\n     * @private\n     */\n    public locatorKey = 'Input' as const\n    private index: number\n    public input: Input\n\n    constructor (locators: VSCodeLocatorMap, index: number, inputField: Input) {\n        const quickPickPositionFn = locators.Input.quickPickPosition as Function\n        const quickPickIndexFn = locators.Input.quickPickIndex as Function\n        const baseParam = inputField instanceof QuickOpenBox\n            ? quickPickPositionFn(index) as string\n            : quickPickIndexFn(index) as string\n        super(locators, baseParam)\n        this.index = index\n        this.input = inputField\n    }\n\n    /**\n     * Get the label of the quick pick item\n     */\n    async getLabel (): Promise<string> {\n        return this.quickPickLabel$.getText()\n    }\n\n    /**\n     * Get the description of the quick pick item\n     */\n    async getDescription (): Promise<string | undefined> {\n        try {\n            return await this.quickPickDescription$.getText()\n        } catch (err) {\n            return undefined\n        }\n    }\n\n    /**\n     * Get the index of the quick pick item\n     */\n    getIndex (): number {\n        return this.index\n    }\n\n    /**\n     * Select (click) the quick pick item\n     * @returns Promise resolving when the item has been clicked\n     */\n    async select (): Promise<void> {\n        await this.elem.click()\n    }\n}\n\nexport interface InputBox extends IPageDecorator<typeof InputBoxLocators> {}\n/**\n * Plain input box variation of the input page object\n *\n * @category Workbench\n */\n@PageDecorator({ ...InputLocators, ...InputBoxLocators })\nexport class InputBox extends Input {\n    /**\n     * @private\n     */\n    public locatorKey = ['Input' as const, 'InputBox' as const]\n\n    /**\n     * Get the message below the input field\n     */\n    async getMessage (): Promise<string> {\n        return this.message$.getText()\n    }\n\n    async hasProgress (): Promise<boolean> {\n        const klass = await this.progress$.getAttribute('class')\n        return klass.indexOf('done') < 0\n    }\n\n    async getQuickPicks (): Promise<QuickPickItem[]> {\n        const picks: QuickPickItem[] = []\n        const elements = await this.quickList$\n            .$(this.locators.rows)\n            .$$(this.locators.row)\n\n        for (const element of elements) {\n            if (await element.isDisplayed()) {\n                picks.push(await new QuickPickItem(\n                    this.locatorMap,\n                    parseInt(await element.getAttribute('data-index'), 10),\n                    this\n                ).wait())\n            }\n        }\n        return picks\n    }\n\n    /**\n     * Find whether the input is showing an error\n     * @returns Promise resolving to notification message\n     */\n    async hasError (): Promise<boolean> {\n        const klass = await this.inputBox$.getAttribute('class')\n        return klass.indexOf('error') > -1\n    }\n\n    /**\n     * Check if the input field is masked (input type password)\n     * @returns Promise resolving to notification message\n     */\n    async isPassword (): Promise<boolean> {\n        return (await this.input$.getAttribute('type')) === 'password'\n    }\n}\n\nexport interface QuickOpenBox extends IPageDecorator<AllInputLocators> {}\n/**\n * @deprecated as of VS Code 1.44.0, quick open box has been replaced with input box\n * The quick open box variation of the input\n *\n * @category Workbench\n */\n@PageDecorator({ ...InputLocators, ...QuickOpenBoxLocators })\nexport class QuickOpenBox extends Input {\n    /**\n     * @private\n     */\n    public locatorKey = ['Input' as const, 'QuickOpenBox' as const]\n\n    async hasProgress (): Promise<boolean> {\n        const klass = await this.progress$\n            .getAttribute('class')\n        return klass.indexOf('done') < 0\n    }\n\n    async getQuickPicks (): Promise<QuickPickItem[]> {\n        const picks: QuickPickItem[] = []\n        const tree = await browser.$(this.locators.quickList)\n        await tree.waitForExist({ timeout: 1000 })\n        const elements = await tree.$$(this.locators.row)\n        for (const element of elements) {\n            const index = parseInt(await element.getAttribute('aria-posinset'), 10)\n            if (await element.isDisplayed()) {\n                picks.push(await new QuickPickItem(this.locatorMap, index, this).wait())\n            }\n        }\n        return picks\n    }\n}\n"]}