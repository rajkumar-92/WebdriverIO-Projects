{"version":3,"file":"ScmView.js","sourceRoot":"","sources":["../../../../src/pageobjects/sidebar/scm/ScmView.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ChainablePromiseElement } from 'webdriverio'\n\nimport { SideBarView } from '../SideBarView'\nimport { ContextMenu } from '../..'\nimport {\n    ElementWithContextMenu, VSCodeLocatorMap, PageDecorator, IPageDecorator, BasePage\n} from '../../utils'\nimport { ScmView as ScmViewLocators } from '../../../locators/1.73.0'\nimport { CMD_KEY } from '../../../constants'\n\nexport interface ScmView extends IPageDecorator<typeof ScmViewLocators> { }\n/**\n * Page object representing the Source Control view\n *\n * @category Sidebar\n */\n@PageDecorator(ScmViewLocators)\nexport class ScmView extends SideBarView<typeof ScmViewLocators> {\n    /**\n     * @private\n     */\n    public locatorKey = 'ScmView' as const\n\n    /**\n     * Get SCM provider (repository) by title\n     * @param title name of the repository\n     * @returns promise resolving to ScmProvider object\n     */\n    async getProvider (title?: string): Promise<ScmProvider | undefined> {\n        const providers = await this.getProviders()\n        if (!title || providers.length === 1) {\n            return providers[0]\n        }\n        const names = await Promise.all(providers.map(async (item) => item.getTitle()))\n        const index = names.findIndex((name) => name === title)\n\n        return index > -1 ? providers[index] : undefined\n    }\n\n    /**\n     * Get all SCM providers\n     * @returns promise resolving to ScmProvider array\n     */\n    async getProviders (): Promise<ScmProvider[]> {\n        const headers = await this.providerHeader$$\n        const sections = await Promise.all(headers.map(async (header) => header.$(this.locators.providerRelative)))\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        return Promise.all(sections.map((section) => new ScmProvider(this.locatorMap, section as any, this)))\n    }\n\n    /**\n     * Initialize repository in the current folder if no SCM provider is found\n     * @returns true if the action was completed succesfully, false if a provider already exists\n     */\n    async initializeRepository (): Promise<boolean> {\n        const buttons = await this.initButton$$\n        if (buttons.length > 0) {\n            await buttons[0].click()\n            return true\n        }\n        return false\n    }\n}\n\nexport interface ScmProvider extends IPageDecorator<typeof ScmViewLocators> { }\n/**\n * Page object representing a repository in the source control view\n * Maps roughly to a view section of the source control view\n *\n * @category Sidebar\n */\n@PageDecorator(ScmViewLocators)\nexport class ScmProvider extends BasePage<typeof ScmViewLocators> {\n    /**\n     * @private\n     */\n    public locatorKey = 'ScmView' as const\n    constructor (\n        locators: VSCodeLocatorMap,\n        element: ChainablePromiseElement<WebdriverIO.Element>,\n        public view: ScmView\n    ) {\n        super(locators, element, view.elem)\n    }\n\n    /**\n     * Get title of the scm provider\n     */\n    async getTitle (): Promise<string> {\n        return this.providerTitle$.getAttribute('innerHTML')\n    }\n\n    /**\n     * Get type of the scm provider (e.g. Git)\n     */\n    async getType (): Promise<string> {\n        return this.providerType$.getAttribute('innerHTML')\n    }\n\n    /**\n     * Find an action button for the SCM provider by title and click it. (e.g 'Commit')\n     * @param title Title of the action button to click\n     * @returns true if the given action could be performed, false if the button doesn't exist\n     */\n    async takeAction (title: string): Promise<boolean> {\n        const header = await this.providerHeader$\n        let actions: ChainablePromiseElement<WebdriverIO.Element>[] = []\n        if ((await header.getAttribute('class')).indexOf('hidden') > -1) {\n            actions = (await this.view.getTitlePart().getActions()).map((action) => action.elem)\n        } else {\n            await this.elem.moveTo()\n            actions = await header.$$(this.locators.action) as any as ChainablePromiseElement<WebdriverIO.Element>[]\n        }\n        const names = await Promise.all(actions.map((action) => action.getAttribute('title')))\n        const index = names.findIndex((item) => item === title)\n\n        if (index > -1) {\n            await actions[index].click()\n            return true\n        }\n        return false\n    }\n\n    /**\n     * Open a context menu using the 'More Actions...' button\n     * @returns Promise resolving to a ContextMenu object\n     */\n    async openMoreActions (): Promise<ContextMenu> {\n        const header = await this.providerHeader$\n        if ((await header.getAttribute('class')).indexOf('hidden') > -1) {\n            return new MoreAction(this.locatorMap, this.view).openContextMenu()\n        }\n        await this.elem.moveTo()\n        return new MoreAction(this.locatorMap, this).openContextMenu()\n    }\n\n    /**\n     * Fill in the message field and send ctrl/cmd + enter to commit the changes\n     * @param message the commit message to use\n     * @returns promise resolving once the keypresses are sent\n     */\n    async commitChanges (message: string): Promise<void> {\n        const input = await this.inputField$\n        await input.clearValue()\n        await input.addValue(message)\n        await input.addValue([CMD_KEY, 'Enter'])\n    }\n\n    /**\n     * Get page objects for all tree items representing individual changes\n     * @param staged when true, finds staged changes otherwise finds unstaged changes\n     * @returns promise resolving to ScmChange object array\n     */\n    async getChanges (staged = false): Promise<ScmChange[]> {\n        const changes = await this.getChangeCount(staged)\n        const label = staged ? 'STAGED CHANGES' : 'CHANGES'\n\n        let elements: ChainablePromiseElement<WebdriverIO.Element>[] = []\n        if (changes > 0) {\n            let i = -1\n            elements = await this.changeItem$$ as any\n            for (const [index, item] of elements.entries()) {\n                const name = await item.$(this.locators.changeName)\n                if (await name.getText() === label) {\n                    i = index + 1\n                    break\n                }\n            }\n            if (i < 0) {\n                return []\n            }\n            elements = elements.slice(i, i + changes)\n        }\n        return Promise.all(\n            elements.map((element) => (\n                new ScmChange(this.locatorMap, element, this).wait()\n            ))\n        )\n    }\n\n    /**\n     * Get the number of changes for a given section\n     * @param staged when true, counts the staged changes, unstaged otherwise\n     * @returns promise resolving to number of changes in the given subsection\n     */\n    async getChangeCount (staged = false): Promise<number> {\n        const rows = staged\n            ? await this.stagedChanges$$\n            : await this.changes$$\n\n        if (rows.length < 1) {\n            return 0\n        }\n        const count = await rows[0].$(this.locators.changeCount)\n        return +await count.getText()\n    }\n}\n\nexport interface ScmChange extends IPageDecorator<typeof ScmViewLocators> { }\n/**\n * Page object representing a SCM change tree item\n *\n * @category Sidebar\n */\n@PageDecorator(ScmViewLocators)\nexport class ScmChange extends ElementWithContextMenu<typeof ScmViewLocators> {\n    /**\n     * @private\n     */\n    public locatorKey = 'ScmView' as const\n\n    constructor (\n        locators: VSCodeLocatorMap,\n        row: ChainablePromiseElement<WebdriverIO.Element>,\n        public provider: ScmProvider\n    ) {\n        super(locators, row, provider.elem)\n    }\n\n    /**\n     * Get label as a string\n     */\n    async getLabel (): Promise<string> {\n        return this.changeLabel$.getText()\n    }\n\n    /**\n     * Get description as a string\n     */\n    async getDescription (): Promise<string> {\n        const desc = await this.changeDesc$$\n        if (desc.length < 1) {\n            return ''\n        }\n        return desc[0].getText()\n    }\n\n    /**\n     * Get the status string (e.g. 'Modified')\n     */\n    async getStatus (): Promise<string> {\n        const res = await this.resource$\n        const status = await res.getAttribute('data-tooltip')\n\n        if (status && status.length > 0) {\n            return status\n        }\n        return 'folder'\n    }\n\n    /**\n     * Find if the item is expanded\n     * @returns promise resolving to true if change is expanded, to false otherwise\n     */\n    async isExpanded (): Promise<boolean> {\n        const twisties = await this.expand$$\n        if (twisties.length < 1) {\n            return true\n        }\n        return (await twisties[0].getAttribute('class')).indexOf('collapsed') < 0\n    }\n\n    /**\n     * Expand or collapse a change item if possible, only works for folders in hierarchical view mode\n     * @param expand true to expand the item, false to collapse\n     * @returns promise resolving to true if the item changed state, to false otherwise\n     */\n    async toggleExpand (expand: boolean): Promise<boolean> {\n        if (await this.isExpanded() !== expand) {\n            await this.elem.click()\n            return true\n        }\n        return false\n    }\n\n    /**\n     * Find and click an action button available to a given change tree item\n     * @param title title of the action button (e.g 'Stage Changes')\n     * @returns promise resolving to true if the action was performed successfully,\n     * false if the given button does not exist\n     */\n    async takeAction (title: string): Promise<boolean> {\n        await this.elem.moveTo()\n        const actions = await this.action$$\n        const names = await Promise.all(actions.map((action) => action.getAttribute('title')))\n        const index = names.findIndex((item) => item === title)\n\n        if (index > -1) {\n            await actions[index].click()\n            return true\n        }\n        return false\n    }\n}\n\nexport interface MoreAction extends IPageDecorator<typeof ScmViewLocators> { }\n/**\n * More Action\n *\n * @category Sidebar\n */\n@PageDecorator(ScmViewLocators)\nexport class MoreAction extends ElementWithContextMenu<typeof ScmViewLocators> {\n    /**\n     * @private\n     */\n    public locatorKey = 'ScmView' as const\n\n    constructor (\n        locators: VSCodeLocatorMap,\n        public scm: ScmProvider | ScmView\n    ) {\n        super(locators, locators.ScmView.more as string, scm.elem)\n    }\n\n    async openContextMenu (): Promise<ContextMenu> {\n        await this.elem.click()\n        const shadowRootHost = await this.scm.elem.$$('shadow-root-host')\n        await browser.keys('Escape')\n\n        if (shadowRootHost.length > 0) {\n            if (await this.elem.getAttribute('aria-expanded') !== 'true') {\n                await this.elem.click()\n            }\n            const shadowRoot = $(await browser.execute('return arguments[0].shadowRoot', shadowRootHost[0]))\n            return new ContextMenu(this.locatorMap, shadowRoot).wait()\n        }\n        return super.openContextMenu()\n    }\n}\n"]}