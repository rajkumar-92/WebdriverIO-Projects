{"version":3,"file":"ViewItem.js","sourceRoot":"","sources":["../../../src/pageobjects/sidebar/ViewItem.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ChainablePromiseElement } from 'webdriverio'\nimport {\n    IPageDecorator, BasePage, ElementWithContextMenu, PageDecorator, VSCodeLocatorMap\n} from '../utils'\nimport {\n    ViewSection as ViewSectionLocators,\n    TreeItem as TreeItemLocators,\n    CustomTreeItem as CustomTreeItemLocators,\n    DefaultTreeItem as DefaultTreeItemLocators,\n    ExtensionsViewItem as ExtensionsViewItemLocators\n} from '../../locators/1.73.0'\n\n/**\n * Abstract representation of a row in the tree inside a view content section\n * @hidden\n */\nexport type ViewItemLocators = (\n    typeof ViewSectionLocators &\n    typeof TreeItemLocators &\n    typeof CustomTreeItemLocators &\n    typeof DefaultTreeItemLocators &\n    typeof ExtensionsViewItemLocators\n)\n\nexport interface ViewItem extends IPageDecorator<ViewItemLocators> { }\n/**\n * Arbitrary item in the side bar view\n *\n * @category Sidebar\n */\nexport abstract class ViewItem extends ElementWithContextMenu<ViewItemLocators> {\n    /**\n     * Select the item in the view.\n     * Note that selecting the item will toggle its expand state when applicable.\n     * @returns Promise resolving when the item has been clicked\n     */\n    async select (): Promise<void> {\n        await this.elem.click()\n    }\n}\n\nexport interface TreeItem extends IPageDecorator<ViewItemLocators> { }\n/**\n * TreeItem abstract class\n *\n * @category Sidebar\n */\nexport abstract class TreeItem extends ViewItem {\n    /**\n     * Retrieves the label of this view item\n     */\n    abstract getLabel (): Promise<string>\n\n    /**\n     * Retrieves the tooltip of this TreeItem.\n     * @returns A promise resolving to the tooltip or undefined if the TreeItem has no tooltip.\n     */\n    abstract getTooltip (): Promise<string | undefined>\n\n    /**\n     * Retrieves the description of this TreeItem.\n     * @returns A promise resolving to the tooltip or undefined if the TreeItem has no description.\n     */\n    abstract getDescription (): Promise<string | undefined>\n\n    /**\n     * Finds if the item has children by actually counting the child items\n     * Note that this will expand the item if it was collapsed\n     * @returns Promise resolving to true/false\n     */\n    async hasChildren (): Promise<boolean> {\n        const children = await this.getChildren()\n        return children && children.length > 0\n    }\n\n    /**\n     * Finds whether the item is expanded. Always returns false if item has no children.\n     * @returns Promise resolving to true/false\n     */\n    abstract isExpanded (): Promise<boolean>\n\n    /**\n     * Find children of an item, will try to expand the item in the process\n     * @returns Promise resolving to array of TreeItem objects, empty array if item has no children\n     */\n    abstract getChildren (): Promise<TreeItem[]>\n\n    /**\n     * Finds if the item is expandable/collapsible\n     * @returns Promise resolving to true/false\n     */\n    abstract isExpandable (): Promise<boolean>\n\n    /**\n     * Expands the current item, if it can be expanded and is collapsed.\n     */\n    async expand (): Promise<void> {\n        if (await this.isExpandable() && !await this.isExpanded()) {\n            await this.twistie$.click()\n        }\n    }\n\n    /**\n     * Find a child item with the given name\n     * @returns Promise resolving to TreeItem object if the child item exists, undefined otherwise\n     */\n    async findChildItem (name: string): Promise<TreeItem | undefined> {\n        const children = await this.getChildren()\n        for (const item of children) {\n            if (await item.getLabel() === name) {\n                return item\n            }\n        }\n        return undefined\n    }\n\n    /**\n     * Collapse the item if expanded\n     */\n    async collapse (): Promise<void> {\n        if (await this.isExpandable() && await this.isExpanded()) {\n            await this.twistie$.click()\n        }\n    }\n\n    /**\n     * Find all action buttons bound to the view item\n     *\n     * @returns array of ViewItemAction objects, empty array if item has no\n     * actions associated\n     */\n    async getActionButtons (): Promise<ViewItemAction[]> {\n        await this.elem.moveTo()\n        const container = await this.actions$\n\n        if (!await container.isExisting()) {\n            return []\n        }\n\n        const actions: ViewItemAction[] = []\n        const items = await container.$$(this.locators.actionLabel)\n        for (const item of items) {\n            const elem = item.$((this.locatorMap.ViewSection.actionConstructor as () => string)())\n            const label = (\n                // v1.69.0 and before\n                await elem.getAttribute(this.locators.actionTitle)\n                // v1.70.0 and after\n                || await item.getAttribute(this.locators.actionTitle)\n            )\n            actions.push(new ViewItemAction(this.locatorMap, elem, label, this))\n        }\n        return actions\n    }\n\n    /**\n     * Find action button for view item by label\n     * @param label label of the button to search by\n     *\n     * @returns ViewItemAction object if such button exists, undefined otherwise\n     */\n    async getActionButton (label: string): Promise<ViewItemAction | undefined> {\n        const actions = await this.getActionButtons()\n        if (actions.length > 0) {\n            return actions.find((item) => item.getLabel().indexOf(label) > -1)\n        }\n        return undefined\n    }\n\n    /**\n     * Find all child elements of a tree item\n     * @param locator locator of a given type of tree item\n     */\n    protected async getChildItems (locator: string) {\n        const items: WebdriverIO.Element[] = []\n        await this.expand()\n\n        const rows = await this.parent.$$(locator)\n        const baseIndex = +await this.elem.getAttribute(this.locatorMap.ViewSection.index as string)\n        const baseLevel = +await this.elem.getAttribute(this.locatorMap.ViewSection.level as string)\n\n        for (const row of rows) {\n            const level = +await row.getAttribute(this.locatorMap.ViewSection.level as string)\n            const index = +await row.getAttribute(this.locatorMap.ViewSection.index as string)\n\n            if (index <= baseIndex) {\n                continue\n            }\n            if (level > baseLevel + 1) {\n                continue\n            }\n            if (level <= baseLevel) {\n                break\n            }\n\n            items.push(row)\n        }\n\n        return items\n    }\n\n    protected async findTwistie () {\n        return this.twistie$\n    }\n}\n\nexport interface ViewItemAction extends IPageDecorator<typeof ViewSectionLocators> { }\n/**\n * Action button bound to a view item\n *\n * @category Sidebar\n */\n@PageDecorator(ViewSectionLocators)\nexport class ViewItemAction extends BasePage<typeof ViewSectionLocators> {\n    /**\n     * @private\n     */\n    public locatorKey = 'ViewSection' as const\n    private label: string\n\n    constructor (\n        locators: VSCodeLocatorMap,\n        elem: ChainablePromiseElement<WebdriverIO.Element>,\n        label: string,\n        viewItem: TreeItem\n    ) {\n        super(locators, elem, viewItem.elem)\n        this.label = label\n    }\n\n    /**\n     * Get label of the action button\n     */\n    getLabel (): string {\n        return this.label\n    }\n}\n"]}