"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TitleActionButton = exports.ViewTitlePart = void 0;
const utils_1 = require("../utils");
const __1 = require("..");
const _1_73_0_1 = require("../../locators/1.73.0");
/**
 * Page object representing the top (title) part of a side bar view
 *
 * @category Sidebar
 */
let ViewTitlePart = class ViewTitlePart extends utils_1.ElementWithContextMenu {
    constructor(locators, view = new __1.SideBarView(locators)) {
        super(locators);
        this.view = view;
        /**
         * @private
         */
        this.locatorKey = 'ViewTitlePart';
    }
    /**
     * Returns the displayed title of the view
     * @returns Promise resolving to displayed title
     */
    async getTitle() {
        return this.title$.getText();
    }
    /**
     * Finds action buttons inside the view title part
     * @returns Promise resolving to array of TitleActionButton objects
     */
    async getActions() {
        const actions = [];
        const elements = await this.action$$;
        for (const element of elements) {
            const title = await element.getAttribute(this.locators.actionLabel);
            const link = element.$(this.locators.actionContstructor(title));
            actions.push(await new TitleActionButton(this.locatorMap, link, title, this).wait());
        }
        return actions;
    }
    /**
     * Finds an action button by title
     * @param title title of the button to search for
     * @returns Promise resolving to TitleActionButton object
     */
    async getAction(title) {
        const link = this.elem.$(this.locators.actionContstructor(title));
        return new TitleActionButton(this.locatorMap, link, title, this).wait();
    }
};
ViewTitlePart = __decorate([
    (0, utils_1.PageDecorator)(_1_73_0_1.ViewTitlePart)
], ViewTitlePart);
exports.ViewTitlePart = ViewTitlePart;
/**
 * Page object representing a button inside the view title part
 *
 * @category Sidebar
 */
let TitleActionButton = class TitleActionButton extends utils_1.BasePage {
    constructor(locators, elem, title, viewTitle) {
        super(locators, elem, viewTitle.elem);
        this.title = title;
        /**
         * @private
         */
        this.locatorKey = 'ViewTitlePart';
        this.title = title;
    }
    /**
     * Get title of the button
     */
    getTitle() {
        return this.title;
    }
};
TitleActionButton = __decorate([
    (0, utils_1.PageDecorator)(_1_73_0_1.ViewTitlePart)
], TitleActionButton);
exports.TitleActionButton = TitleActionButton;
//# sourceMappingURL=ViewTitlePart.js.map