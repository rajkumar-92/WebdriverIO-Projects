"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var CustomTreeItem_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomTreeItem = void 0;
const ViewItem_1 = require("../../ViewItem");
const utils_1 = require("../../../utils");
const _1_73_0_1 = require("../../../../locators/1.73.0");
/**
 * View item in a custom-made content section (e.g. an extension tree view)
 *
 * @category Sidebar
 */
let CustomTreeItem = CustomTreeItem_1 = class CustomTreeItem extends ViewItem_1.TreeItem {
    constructor(locators, element, viewPart) {
        super(locators, element, viewPart.elem);
        this.viewPart = viewPart;
        /**
         * @private
         */
        this.locatorKey = ['TreeItem', 'CustomTreeItem'];
    }
    async getLabel() {
        return this.elem.$(this.locatorMap.CustomTreeSection.itemLabel).getText();
    }
    async getTooltip() {
        return this.elem.getAttribute(this.locators.tooltipAttribute);
    }
    async getDescription() {
        return this.description$.getText();
    }
    async isExpanded() {
        const attr = await this.elem.getAttribute(this.locators.expandedAttr);
        return attr === this.locators.expandedValue;
    }
    async getChildren() {
        const rows = await this.getChildItems(this.locatorMap.DefaultTreeSection.itemRow);
        const items = await Promise.all(rows.map(async (row) => (
        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
        new CustomTreeItem_1(this.locatorMap, row, this.viewPart).wait())));
        return items;
    }
    async isExpandable() {
        const attr = await this.elem.getAttribute(this.locators.expandedAttr);
        return attr !== null;
    }
};
CustomTreeItem = CustomTreeItem_1 = __decorate([
    (0, utils_1.PageDecorator)({ ..._1_73_0_1.TreeItem, ..._1_73_0_1.CustomTreeItem })
], CustomTreeItem);
exports.CustomTreeItem = CustomTreeItem;
//# sourceMappingURL=CustomTreeItem.js.map