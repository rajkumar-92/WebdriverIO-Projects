"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExtensionsViewItem = void 0;
const ViewItem_1 = require("../ViewItem");
const utils_1 = require("../../utils");
const _1_73_0_1 = require("../../../locators/1.73.0");
/**
 * Page object representing an extension in the extensions view
 *
 * @category Sidebar
 */
let ExtensionsViewItem = class ExtensionsViewItem extends ViewItem_1.ViewItem {
    constructor(locators, extensionElement, section) {
        super(locators, extensionElement, section.elem);
        this.section = section;
        /**
         * @private
         */
        this.locatorKey = ['TreeItem', 'ExtensionsViewItem'];
    }
    /**
     * Get title of the extension
     */
    async getTitle() {
        return this.itemTitle$.getText();
    }
    /**
     * Get version of the extension
     * @returns Promise resolving to version string
     */
    async getVersion() {
        const version = await this.version$$;
        if (version.length > 0) {
            return version[0].getText();
        }
        const label = await this.elem.getAttribute('aria-label');
        const ver = label.split(',')[1].trim();
        return ver;
    }
    /**
     * Get the author of the extension
     * @returns Promise resolving to displayed author
     */
    async getAuthor() {
        const author = await this.author$;
        return author.getText();
    }
    /**
     * Get the description of the extension
     * @returns Promise resolving to description
     */
    async getDescription() {
        return this.description$.getText();
    }
    /**
     * Find if the extension is installed
     * @returns Promise resolving to true/false
     */
    async isInstalled() {
        if ((await this.install$.getAttribute('class')).indexOf('disabled') > -1) {
            return true;
        }
        return false;
    }
    /**
     * Open the management context menu if the extension is installed
     * @returns Promise resolving to ContextMenu object
     */
    async manage() {
        if ((await this.manage$.getAttribute('class')).indexOf('disabled') > -1) {
            throw new Error(`Extension '${await this.getTitle()}' is not installed`);
        }
        return this.openContextMenu();
    }
    /**
     * Install the extension if not installed already.
     *
     * Will wait for the extension to finish installing. To skip the wait, set timeout to 0.
     *
     * @param timeout timeout to wait for the installation in milliseconds, default unlimited, set to 0 to skip waiting
     * @returns Promise resolving when the installation finishes or is skipped
     */
    async install(timeout = 300000) {
        if (await this.isInstalled()) {
            return;
        }
        const button = await this.install$;
        await button.click();
        if (timeout > 0) {
            await this.manage$.waitForDisplayed({ timeout });
        }
    }
};
ExtensionsViewItem = __decorate([
    (0, utils_1.PageDecorator)({ ..._1_73_0_1.TreeItem, ..._1_73_0_1.ExtensionsViewItem })
], ExtensionsViewItem);
exports.ExtensionsViewItem = ExtensionsViewItem;
//# sourceMappingURL=ExtensionsViewItem.js.map