{"version":3,"file":"ExtensionsViewItem.js","sourceRoot":"","sources":["../../../../src/pageobjects/sidebar/extensions/ExtensionsViewItem.ts"],"names":[],"mappings":";;;;;;;;;AAEA,0CAAwD;AAIxD,uCAA6E;AAC7E,sDAGiC;AAGjC;;;;GAIG;AAEI,IAAM,kBAAkB,GAAxB,MAAM,kBAAmB,SAAQ,mBAAQ;IAM5C,YACI,QAA0B,EAC1B,gBAA8D,EACvD,OAA8B;QAErC,KAAK,CAAC,QAAQ,EAAE,gBAAgB,EAAE,OAAO,CAAC,IAAI,CAAC,CAAA;QAFxC,YAAO,GAAP,OAAO,CAAuB;QARzC;;WAEG;QACI,eAAU,GAAG,CAAC,UAAmB,EAAE,oBAA6B,CAAC,CAAA;IAQxE,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,QAAQ;QACV,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAA;IACpC,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,UAAU;QACZ,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,SAAS,CAAA;QACpC,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;YACpB,OAAO,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAA;SAC9B;QACD,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,CAAA;QACxD,MAAM,GAAG,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAA;QAEtC,OAAO,GAAG,CAAA;IACd,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,SAAS;QACX,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,OAAO,CAAA;QACjC,OAAO,MAAM,CAAC,OAAO,EAAE,CAAA;IAC3B,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,cAAc;QAChB,OAAO,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,CAAA;IACtC,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,WAAW;QACb,IAAI,CAAC,MAAM,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,EAAE;YACtE,OAAO,IAAI,CAAA;SACd;QACD,OAAO,KAAK,CAAA;IAChB,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,MAAM;QACR,IAAI,CAAC,MAAM,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,EAAE;YACrE,MAAM,IAAI,KAAK,CAAC,cAAc,MAAM,IAAI,CAAC,QAAQ,EAAE,oBAAoB,CAAC,CAAA;SAC3E;QACD,OAAO,IAAI,CAAC,eAAe,EAAE,CAAA;IACjC,CAAC;IAED;;;;;;;OAOG;IACH,KAAK,CAAC,OAAO,CAAE,OAAO,GAAG,MAAM;QAC3B,IAAI,MAAM,IAAI,CAAC,WAAW,EAAE,EAAE;YAC1B,OAAM;SACT;QACD,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAA;QAClC,MAAM,MAAM,CAAC,KAAK,EAAE,CAAA;QAEpB,IAAI,OAAO,GAAG,CAAC,EAAE;YACb,MAAM,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,EAAE,OAAO,EAAE,CAAC,CAAA;SACnD;IACL,CAAC;CACJ,CAAA;AA9FY,kBAAkB;IAD9B,IAAA,qBAAa,EAAC,EAAE,GAAG,kBAAgB,EAAE,GAAG,4BAA0B,EAAE,CAAC;GACzD,kBAAkB,CA8F9B;AA9FY,gDAAkB","sourcesContent":["import type { ChainablePromiseElement } from 'webdriverio'\n\nimport { ViewItem, ViewItemLocators } from '../ViewItem'\nimport { ContextMenu } from '../../menu/ContextMenu'\nimport { ExtensionsViewSection } from './ExtensionsViewSection'\n\nimport { PageDecorator, IPageDecorator, VSCodeLocatorMap } from '../../utils'\nimport {\n    TreeItem as TreeItemLocators,\n    ExtensionsViewItem as ExtensionsViewItemLocators\n} from '../../../locators/1.73.0'\n\nexport interface ExtensionsViewItem extends IPageDecorator<ViewItemLocators> { }\n/**\n * Page object representing an extension in the extensions view\n *\n * @category Sidebar\n */\n@PageDecorator({ ...TreeItemLocators, ...ExtensionsViewItemLocators })\nexport class ExtensionsViewItem extends ViewItem {\n    /**\n     * @private\n     */\n    public locatorKey = ['TreeItem' as const, 'ExtensionsViewItem' as const]\n\n    constructor (\n        locators: VSCodeLocatorMap,\n        extensionElement: ChainablePromiseElement<WebdriverIO.Element>,\n        public section: ExtensionsViewSection\n    ) {\n        super(locators, extensionElement, section.elem)\n    }\n\n    /**\n     * Get title of the extension\n     */\n    async getTitle (): Promise<string> {\n        return this.itemTitle$.getText()\n    }\n\n    /**\n     * Get version of the extension\n     * @returns Promise resolving to version string\n     */\n    async getVersion (): Promise<string> {\n        const version = await this.version$$\n        if (version.length > 0) {\n            return version[0].getText()\n        }\n        const label = await this.elem.getAttribute('aria-label')\n        const ver = label.split(',')[1].trim()\n\n        return ver\n    }\n\n    /**\n     * Get the author of the extension\n     * @returns Promise resolving to displayed author\n     */\n    async getAuthor (): Promise<string> {\n        const author = await this.author$\n        return author.getText()\n    }\n\n    /**\n     * Get the description of the extension\n     * @returns Promise resolving to description\n     */\n    async getDescription (): Promise<string> {\n        return this.description$.getText()\n    }\n\n    /**\n     * Find if the extension is installed\n     * @returns Promise resolving to true/false\n     */\n    async isInstalled (): Promise<boolean> {\n        if ((await this.install$.getAttribute('class')).indexOf('disabled') > -1) {\n            return true\n        }\n        return false\n    }\n\n    /**\n     * Open the management context menu if the extension is installed\n     * @returns Promise resolving to ContextMenu object\n     */\n    async manage (): Promise<ContextMenu> {\n        if ((await this.manage$.getAttribute('class')).indexOf('disabled') > -1) {\n            throw new Error(`Extension '${await this.getTitle()}' is not installed`)\n        }\n        return this.openContextMenu()\n    }\n\n    /**\n     * Install the extension if not installed already.\n     *\n     * Will wait for the extension to finish installing. To skip the wait, set timeout to 0.\n     *\n     * @param timeout timeout to wait for the installation in milliseconds, default unlimited, set to 0 to skip waiting\n     * @returns Promise resolving when the installation finishes or is skipped\n     */\n    async install (timeout = 300000): Promise<void> {\n        if (await this.isInstalled()) {\n            return\n        }\n        const button = await this.install$\n        await button.click()\n\n        if (timeout > 0) {\n            await this.manage$.waitForDisplayed({ timeout })\n        }\n    }\n}\n"]}