{"version":3,"file":"ViewContent.js","sourceRoot":"","sources":["../../../src/pageobjects/sidebar/ViewContent.ts"],"names":[],"mappings":"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","sourcesContent":["import { SideBarView, ViewSection } from '..'\nimport { DefaultTreeSection } from './tree/default/DefaultTreeSection'\nimport { CustomTreeSection } from './tree/custom/CustomTreeSection'\nimport { ExtensionsViewSection } from './extensions/ExtensionsViewSection'\nimport {\n    PageDecorator, IPageDecorator, BasePage, VSCodeLocatorMap\n} from '../utils'\nimport { ViewContent as ViewContentLocators } from '../../locators/1.73.0'\n\nexport interface ViewContent extends IPageDecorator<typeof ViewContentLocators> { }\n/**\n * Page object representing the view container of a side bar view\n *\n * @category Sidebar\n */\n@PageDecorator(ViewContentLocators)\nexport class ViewContent extends BasePage<typeof ViewContentLocators> {\n    /**\n     * @private\n     */\n    public locatorKey = 'ViewContent' as const\n\n    constructor (\n        locators: VSCodeLocatorMap,\n        public view: SideBarView<any> = new SideBarView(locators)\n    ) {\n        super(locators, view.elem)\n    }\n\n    /**\n     * Finds whether a progress bar is active at the top of the view\n     * @returns Promise resolving to true/false\n     */\n    async hasProgress (): Promise<boolean> {\n        const hidden = await this.progress$.getAttribute('aria-hidden')\n        if (hidden === 'true') {\n            return false\n        }\n        return true\n    }\n\n    /**\n     * Retrieves a collapsible view content section by its title\n     * @param title Title of the section\n     * @returns Promise resolving to ViewSection object\n     */\n    async getSection (title: string): Promise<ViewSection> {\n        const elements = await this.section$$\n        let panel!: WebdriverIO.Element\n\n        const availableSections: Set<string> = new Set()\n        for (const element of elements) {\n            const sectionTitle = await element.$(this.locators.sectionTitle).getText()\n            availableSections.add(sectionTitle)\n            if (sectionTitle === title) {\n                panel = element\n                break\n            }\n        }\n        if (!panel) {\n            throw new Error(\n                `No section with title '${title}' found, `\n                + `available are: ${[...availableSections].join(', ')}`\n            )\n        }\n        return this.createSection(panel)\n    }\n\n    /**\n     * Retrieves all the collapsible view content sections\n     * @returns Promise resolving to array of ViewSection objects\n     */\n    async getSections (): Promise<ViewSection[]> {\n        const sections: ViewSection[] = []\n        const elements = await this.section$$\n        for (const element of elements) {\n            const section = await this.createSection(element)\n            sections.push(await section.wait())\n        }\n        return sections\n    }\n\n    private async createSection (panel: WebdriverIO.Element): Promise<ViewSection> {\n        const section: ViewSection = new DefaultTreeSection(\n            this.locatorMap,\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            panel as any,\n            this\n        )\n\n        if (await section.elem.$(this.locators.defaultView).isExisting()) {\n            return section\n        }\n        if (await section.elem.$(this.locators.extensionsView).isExisting()) {\n            return new ExtensionsViewSection(\n                this.locatorMap,\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n                panel as any,\n                this\n            )\n        }\n\n        return new CustomTreeSection(\n            this.locatorMap,\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            panel as any,\n            this\n        )\n    }\n}\n"]}