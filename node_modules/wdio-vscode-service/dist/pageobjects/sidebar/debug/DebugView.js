"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DebugView = void 0;
const SideBarView_1 = require("../SideBarView");
const utils_1 = require("../../utils");
const _1_73_0_1 = require("../../../locators/1.73.0");
/**
 * Page object representing the Run/Debug view in the side bar
 *
 * @category Sidebar
 */
let DebugView = class DebugView extends SideBarView_1.SideBarView {
    constructor() {
        super(...arguments);
        /**
         * @private
         */
        this.locatorKey = 'DebugView';
    }
    /**
     * Get the title of the selected launch configuration
     * @returns Promise resolving to the title
     */
    async getLaunchConfiguration() {
        const action = await this.getTitlePart().elem.$(this.locators.launchCombo);
        const combo = await action.$(this.locators.launchSelect);
        return combo.getAttribute('title');
    }
    /**
     * Get titles of all available launch configurations
     * @returns Promise resolving to list of titles
     */
    async getLaunchConfigurations() {
        const action = await this.getTitlePart().elem.$(this.locators.launchCombo);
        const combo = await action.$(this.locators.launchSelect);
        const configs = [];
        const options = await combo.$$(this.locators.launchOption);
        for (const option of options) {
            if (await option.isEnabled()) {
                configs.push(await option.getAttribute('value'));
            }
        }
        return configs;
    }
    /**
     * Select a given launch configuration
     * @param title title of the configuration to select
     */
    async selectLaunchConfiguration(title) {
        const action = await this.getTitlePart().elem.$(this.locators.launchCombo);
        const combo = await action.$(this.locators.launchSelect);
        const option = await combo.$(this.locators.optionByName(title));
        await option.click();
    }
    /**
     * Start Debugging using the current launch configuration
     */
    async start() {
        const action = await this.getTitlePart().elem.$(this.locators.launchCombo);
        await action.$(this.locators.startButton).click();
    }
};
DebugView = __decorate([
    (0, utils_1.PageDecorator)(_1_73_0_1.DebugView)
], DebugView);
exports.DebugView = DebugView;
//# sourceMappingURL=DebugView.js.map