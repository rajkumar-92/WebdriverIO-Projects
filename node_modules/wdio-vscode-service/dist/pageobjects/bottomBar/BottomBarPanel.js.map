{"version":3,"file":"BottomBarPanel.js","sourceRoot":"","sources":["../../../src/pageobjects/bottomBar/BottomBarPanel.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    DebugConsoleView, OutputView, TerminalView, ProblemsView, EditorView, TitleBar,\n    StatusBar\n} from '..'\nimport { BasePage, PageDecorator, IPageDecorator } from '../utils'\nimport { BottomBarPanel as BottomBarPanelLocators } from '../../locators/1.73.0'\n\nexport interface BottomBarPanel extends IPageDecorator<typeof BottomBarPanelLocators> {}\n/**\n * Page object for the bottom view panel\n *\n * ```ts\n * const bottomBar = workbench.getBottomBar()\n * await bottomBar.toggle(true)\n * ```\n *\n * @category BottomBar\n */\n@PageDecorator(BottomBarPanelLocators)\nexport class BottomBarPanel extends BasePage<typeof BottomBarPanelLocators> {\n    /**\n     * @private\n     */\n    public locatorKey = 'BottomBarPanel' as const\n\n    /**\n     * Open/Close the bottom bar panel\n     * @param open true to open. false to close\n     * @returns Promise resolving when the view visibility is toggled\n     */\n    async toggle (open: boolean): Promise<void> {\n        try {\n            const tab = await new EditorView(this.locatorMap).getActiveTab()\n            await tab?.elem.click()\n        } catch (err) {\n            // ignore and move on\n        }\n        const height = await this.elem.getSize('height')\n\n        if ((open && height === 0) || (!open && height > 0)) {\n            const statusBar = new StatusBar(this.locatorMap)\n            await statusBar.problems$.click()\n\n            if (open) {\n                await this.wait()\n                return\n            }\n\n            /**\n             * we might have to click again if we were on a different tab\n             * than the problems tab\n             */\n            if (await this.elem.isDisplayed()) {\n                await statusBar.problems$.click()\n            }\n\n            await this.elem.waitForDisplayed({ reverse: true })\n        }\n    }\n\n    /**\n     * Open the Problems view in the bottom panel\n     * @returns Promise resolving to a ProblemsView object\n     */\n    async openProblemsView (): Promise<ProblemsView> {\n        await this.openTab(this.locators.problemsTab)\n        return new ProblemsView(this.locatorMap, this).wait()\n    }\n\n    /**\n     * Open the Output view in the bottom panel\n     * @returns Promise resolving to OutputView object\n     */\n    async openOutputView (): Promise<OutputView> {\n        await this.openTab(this.locators.outputTab)\n        return new OutputView(this.locatorMap, this).wait()\n    }\n\n    /**\n     * Open the Debug Console view in the bottom panel\n     * @returns Promise resolving to DebugConsoleView object\n     */\n    async openDebugConsoleView (): Promise<DebugConsoleView> {\n        await this.openTab(this.locators.debugTab)\n        return new DebugConsoleView(this.locatorMap, this).wait()\n    }\n\n    /**\n     * Open the Terminal view in the bottom panel\n     * @returns Promise resolving to TerminalView object\n     */\n    async openTerminalView (): Promise<TerminalView> {\n        await this.openTab(this.locators.terminalTab)\n        return new TerminalView(this.locatorMap, this).wait()\n    }\n\n    /**\n     * Maximize the the bottom panel if not maximized\n     * @returns Promise resolving when the maximize button is pressed\n     */\n    async maximize (): Promise<void> {\n        await this.resize(this.locators.maximize)\n    }\n\n    /**\n     * Restore the the bottom panel if maximized\n     * @returns Promise resolving when the restore button is pressed\n     */\n    async restore (): Promise<void> {\n        await this.resize(this.locators.restore)\n    }\n\n    private async openTab (title: string) {\n        await this.toggle(true)\n        const tabContainer = await this.tabContainer$\n        try {\n            const tabs = await tabContainer.$$(this.locators.tab(title))\n            if (tabs.length > 0) {\n                await tabs[0].click()\n            } else {\n                const label = await tabContainer.$(`.//a[starts-with(@aria-label, '${title}')]`)\n                await label.click()\n            }\n        } catch (err) {\n            await new TitleBar(this.locatorMap).select('View', title)\n        }\n    }\n\n    private async resize (label: string) {\n        await this.toggle(true)\n        let action!: WebdriverIO.Element\n        try {\n            action = await this.elem\n                .$(this.locators.globalActions)\n                .$(this.locators.action(label))\n        } catch (err) {\n            // the panel is already maximized\n        }\n        if (action) {\n            await action.click()\n        }\n    }\n}\n"]}