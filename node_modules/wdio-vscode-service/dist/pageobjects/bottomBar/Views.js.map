{"version":3,"file":"Views.js","sourceRoot":"","sources":["../../../src/pageobjects/bottomBar/Views.ts"],"names":[],"mappings":"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","sourcesContent":["import clipboard from 'clipboardy'\n\nimport { Workbench, BottomBarPanel, ContentAssist } from '../..'\nimport { TextView, ChannelView } from './AbstractViews'\nimport {\n    ElementWithContextMenu, PageDecorator, IPageDecorator, VSCodeLocatorMap,\n    sleep\n} from '../utils'\nimport {\n    OutputView as OutputViewLocators,\n    DebugConsoleView as DebugConsoleViewLocators,\n    TerminalView as TerminalViewLocators\n} from '../../locators/1.73.0'\n\nexport interface OutputView extends IPageDecorator<typeof OutputViewLocators> {}\n/**\n * Output view of the bottom panel\n *\n * ```ts\n * const bottomBar = workbench.getBottomBar()\n * const outputView = await bottomBar.openOutputView()\n * console.log(await outputView.getChannelNames())\n * // returns\n * // [\n * //   'Tasks',\n * //   'Extensions',\n * //   'Microsoft Authentication',\n * //   'Git',\n * //   'GitHub Authentication',\n * //   'Log (Window)',\n * //   'Log (Main)',\n * //   'Log (Extension Host)',\n * //   'Log (Settings Sync)',\n * //   'Log (Shared)'\n * // ]\n * ```\n *\n * @category BottomBar\n */\n@PageDecorator(OutputViewLocators)\nexport class OutputView extends TextView<typeof OutputViewLocators> {\n    /**\n     * @private\n     */\n    public locatorKey = 'OutputView' as const\n\n    constructor (\n        locators: VSCodeLocatorMap,\n        public panel = new BottomBarPanel(locators)\n    ) {\n        super(locators)\n        this.actionsLabel = locators.OutputView.actionsLabel as string\n        this.setParentElement(panel.elem)\n    }\n}\n\nexport interface DebugConsoleView extends IPageDecorator<typeof DebugConsoleViewLocators> {}\n/**\n * Debug Console view on the bottom panel\n * Most functionality will only be available when a debug session is running\n *\n * @category BottomBar\n */\n@PageDecorator(DebugConsoleViewLocators)\nexport class DebugConsoleView extends ElementWithContextMenu<typeof DebugConsoleViewLocators> {\n    /**\n     * @private\n     */\n    public locatorKey = 'DebugConsoleView' as const\n\n    constructor (\n        locators: VSCodeLocatorMap,\n        public panel: BottomBarPanel = new BottomBarPanel(locators)\n    ) {\n        super(locators)\n        this.setParentElement(panel.elem)\n    }\n\n    /**\n     * Get all text from the debug console\n     */\n    async getText (): Promise<string> {\n        const menu = await this.openContextMenu()\n        await menu.select('Copy All')\n        const text = await clipboard.read()\n        await clipboard.write('')\n        return text\n    }\n\n    /**\n     * Clear the console of all text\n     */\n    async clearText (): Promise<void> {\n        const menu = await this.openContextMenu()\n        await menu.select('Clear Console')\n    }\n\n    /**\n     * Type an expression into the debug console text area\n     * @param expression expression in form of a string\n     */\n    async setExpression (expression: string): Promise<void> {\n        const textarea = await this.elem.$(this.locatorMap.BottomBarViews.textArea as string)\n        await textarea.setValue(expression)\n    }\n\n    /**\n     * Evaluate an expression:\n     *  - if no argument is supplied, evaluate the current expression present in debug console text area\n     *  - if a string argument is supplied, replace the current expression with the `expression` argument and evaluate\n     *\n     * @param expression expression to evaluate. To use existing contents of the debug console\n     *                   text area instead, don't define this argument\n     */\n    async evaluateExpression (expression?: string): Promise<void> {\n        if (expression) {\n            await this.setExpression(expression)\n        }\n        await browser.keys('Enter')\n    }\n\n    /**\n     * Create a content assist page object\n     * @returns promise resolving to ContentAssist object\n     */\n    async getContentAssist (): Promise<ContentAssist> {\n        return new ContentAssist(this.locatorMap, this).wait()\n    }\n}\n\nexport interface TerminalView extends IPageDecorator<typeof TerminalViewLocators> {}\n/**\n * Terminal view on the bottom panel\n *\n * @category BottomBar\n */\n@PageDecorator(TerminalViewLocators)\nexport class TerminalView extends ChannelView<typeof TerminalViewLocators> {\n    /**\n     * @private\n     */\n    public locatorKey = 'TerminalView' as const\n\n    constructor (\n        locators: VSCodeLocatorMap,\n        public panel = new BottomBarPanel(locators)\n    ) {\n        super(locators)\n        this.actionsLabel = locators.OutputView.actionsLabel as string\n    }\n\n    /**\n     * Execute command in the internal terminal and wait for results\n     * @param command text of the command\n     * @param timeout optional maximum time to wait for completion in milliseconds, 0 for unlimited\n     * @returns Promise resolving when the command is finished\n     */\n    async executeCommand (command: string, timeout = 0): Promise<void> {\n        const input = await this.textArea$\n\n        try {\n            await input.clearValue()\n        } catch (err) {\n            // try clearing, ignore if not available\n        }\n        await input.setValue([command, 'Enter'])\n\n        let timer = 0\n        let style = await input.getCSSProperty('left')\n        do {\n            if (timeout > 0 && timer > timeout) {\n                throw new Error(`Timeout of ${timeout}ms exceeded`)\n            }\n            await sleep(500)\n            timer += 500\n            style = await input.getCSSProperty('left')\n        } while (style.value === '0px')\n    }\n\n    /**\n     * Get all text from the internal terminal\n     * Beware, no formatting.\n     * @returns Promise resolving to all terminal text\n     */\n    async getText (): Promise<string> {\n        const workbench = new Workbench(this.locatorMap)\n        await workbench.executeCommand('terminal select all')\n        // eslint-disable-next-line wdio/no-pause\n        await browser.pause(500)\n        await workbench.executeCommand('terminal copy selection')\n        // eslint-disable-next-line wdio/no-pause\n        await browser.pause(500)\n        const text = clipboard.readSync()\n        clipboard.writeSync('')\n        return text\n    }\n\n    /**\n     * Destroy the currently open terminal\n     * @returns Promise resolving when Kill Terminal button is pressed\n     */\n    async killTerminal (): Promise<void> {\n        await new Workbench(this.locatorMap)\n            .executeCommand('terminal: kill the active terminal instance')\n    }\n\n    /**\n     * Initiate new terminal creation\n     * @returns Promise resolving when New Terminal button is pressed\n     */\n    async newTerminal (): Promise<void> {\n        await new Workbench(this.locatorMap)\n            .executeCommand(this.locators.newCommand)\n        const combo = await this.panel.elem.$$(this.locatorMap.BottomBarViews.channelCombo as string)\n        if (combo.length < 1) {\n            await browser.waitUntil(async () => {\n                const list = await this.tabList$$\n                return list.length > 0\n            }, { timeout: 5000 })\n        }\n    }\n\n    async getCurrentChannel (): Promise<string> {\n        const combo = await this.panel.elem.$$(this.locatorMap.BottomBarViews.channelCombo as string)\n        if (combo.length > 0) {\n            return super.getCurrentChannel()\n        }\n        const singleTerm = await this.panel.elem.$$(this.locators.singleTab)\n        if (singleTerm.length > 0) {\n            return singleTerm[0].getText()\n        }\n        const list = await this.tabList$\n        const row = await list.$(this.locators.selectedRow)\n        const label = (await row.getAttribute('aria-label')).split(' ')\n\n        return `${label[1]}: ${label[2]}`\n    }\n\n    async selectChannel (name: string): Promise<void> {\n        const combo = await this.panel.elem.$$(this.locatorMap.BottomBarViews.channelCombo as string)\n        if (combo.length > 0) {\n            return super.selectChannel(name)\n        }\n        const singleTerm = await this.panel.elem.$$(this.locators.singleTab)\n        if (singleTerm.length > 0) {\n            return undefined\n        }\n\n        const matches = name.match(/.*(\\d+).?\\s.*/)\n        if (matches === null || !matches[1]) {\n            throw new Error(`Channel ${name} not found`)\n        }\n        const channelNumber = matches[1]\n\n        const list = await this.tabList$\n        const rows = await list.$$(this.locators.row)\n\n        for (const row of rows) {\n            const label = await row.getAttribute('aria-label')\n            if (label.includes(channelNumber)) {\n                await row.click()\n                return undefined\n            }\n        }\n        throw new Error(`Channel ${name} not found`)\n    }\n}\n"]}