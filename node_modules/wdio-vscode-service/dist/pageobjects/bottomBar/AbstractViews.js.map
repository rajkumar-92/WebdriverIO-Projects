{"version":3,"file":"AbstractViews.js","sourceRoot":"","sources":["../../../src/pageobjects/bottomBar/AbstractViews.ts"],"names":[],"mappings":"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","sourcesContent":["import { ElementWithContextMenu } from '../utils'\n\n/**\n * View with channel selector/**\n *\n * @category BottomBar\n */\nexport abstract class ChannelView<T> extends ElementWithContextMenu<T> {\n    protected actionsLabel!: string\n\n    /**\n    * Get names of all selectable channels\n    * @returns Promise resolving to array of strings - channel names\n    */\n    async getChannelNames (): Promise<string[]> {\n        const select = await this.parent.$(this.locatorMap.BottomBarViews.outputChannels as string)\n        await select.click()\n\n        // stabelise view otherwise we might run into stale element issues\n        // eslint-disable-next-line wdio/no-pause\n        await browser.pause(100)\n        const channels = await this.parent.$$(`${this.locatorMap.BottomBarViews.outputChannels} option`)\n\n        const names = []\n        for (const channel of channels) {\n            names.push(await channel.getAttribute('value'))\n        }\n        return names\n    }\n\n    /**\n     * Get name of the current channel\n     * @returns Promise resolving to the current channel name\n     */\n    async getCurrentChannel (): Promise<string> {\n        const combo = await this.parent.$(this.locatorMap.BottomBarViews.channelCombo as string)\n        return combo.getAttribute('title')\n    }\n\n    /**\n     * Select a channel using the selector combo\n     * @param name name of the channel to open\n     */\n    async selectChannel (name: string): Promise<void> {\n        const select = await this.parent.$(this.locatorMap.BottomBarViews.outputChannels as string)\n        await select.click()\n        const channels = await this.parent.$$(`${this.locatorMap.BottomBarViews.outputChannels} option`)\n        for (const channel of channels) {\n            const val = await channel.getValue()\n            if (val === name) {\n                await channel.click()\n                // eslint-disable-next-line wdio/no-pause\n                await browser.pause(200)\n                await browser.keys(['Escape'])\n                return\n            }\n        }\n        throw new Error(`Channel ${name} not found`)\n    }\n}\n\n/**\n * View with channel selection and text area\n */\nexport abstract class TextView<T> extends ChannelView<T> {\n    protected actionsLabel!: string\n\n    /**\n     * Get all text from the currently open channel\n     * @returns Promise resolving to the view's text\n     */\n    async getText (): Promise<string[]> {\n        const lines = await this.elem.$(this.locatorMap.OutputView.lines as string)\n        const textLines = await browser.execute(\n            (elem) => Array.from(\n                (elem as any as HTMLDivElement).children as any as ArrayLike<HTMLDivElement>\n            ).map((l) => l.innerText),\n            lines\n        )\n\n        return textLines\n            // strip empty lines (usually the last one)\n            .filter(Boolean)\n            // replace `\\u00A0` characters with white space\n            // eslint-disable-next-line no-control-regex\n            .map((l) => l.replace(/\\u00A0/g, ' '))\n    }\n\n    /**\n     * Clear the text in the current channel\n     * @returns Promise resolving when the clear text button is pressed\n     */\n    async clearText (): Promise<void> {\n        await this.parent\n            .$((this.locatorMap.BottomBarViews.actionsContainer as Function)(this.actionsLabel) as string)\n            .$(this.locatorMap.BottomBarViews.clearText as string)\n            .click()\n    }\n}\n"]}