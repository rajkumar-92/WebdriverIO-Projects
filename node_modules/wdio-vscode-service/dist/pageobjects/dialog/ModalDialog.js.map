{"version":3,"file":"ModalDialog.js","sourceRoot":"","sources":["../../../src/pageobjects/dialog/ModalDialog.ts"],"names":[],"mappings":";;;;;;;;;AAAA,oCAAkE;AAClE,mDAAgE;AAGhE;;;;GAIG;AAEI,IAAM,WAAW,GAAjB,MAAM,WAAY,SAAQ,gBAA+B;IAAzD;;QACH;;WAEG;QACI,eAAU,GAAG,QAAiB,CAAA;IA6CzC,CAAC;IA3CG;;OAEG;IACH,KAAK,CAAC,UAAU;QACZ,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAA;IAClC,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,UAAU;QACZ,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAA;IAClC,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,UAAU;QACZ,OAAO,IAAI,CAAC,gBAAgB,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAA;IACzD,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,UAAU,CAAE,KAAa;QAC3B,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,UAAU,EAAE,CAAA;QACvC,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,CAAA;QACvF,MAAM,KAAK,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,KAAK,KAAK,CAAC,CAAA;QAC1D,IAAI,KAAK,GAAG,CAAC,CAAC,EAAE;YACZ,MAAM,OAAO,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,CAAA;SAC/B;IACL,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,KAAK;QACP,OAAO,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAA;IACpC,CAAC;CACJ,CAAA;AAjDY,WAAW;IADvB,IAAA,qBAAa,EAAC,gBAAc,CAAC;GACjB,WAAW,CAiDvB;AAjDY,kCAAW","sourcesContent":["import { PageDecorator, IPageDecorator, BasePage } from '../utils'\nimport { Dialog as DialogLocators } from '../../locators/1.73.0'\n\nexport interface ModalDialog extends IPageDecorator<typeof DialogLocators> {}\n/**\n * Page Object for Custom Style Modal Dialogs (non-native)\n *\n * @category Dialog\n */\n@PageDecorator(DialogLocators)\nexport class ModalDialog extends BasePage<typeof DialogLocators> {\n    /**\n     * @private\n     */\n    public locatorKey = 'Dialog' as const\n\n    /**\n     * Get the dialog's message in a Promise\n     */\n    async getMessage (): Promise<string> {\n        return this.message$.getText()\n    }\n\n    /**\n     * Get the details message in a Promise\n     */\n    async getDetails (): Promise<string> {\n        return this.details$.getText()\n    }\n\n    /**\n     * Get the list of buttons as WebElements\n     *\n     * @returns Promise resolving to Array of WebElement items representing the buttons\n     */\n    async getButtons () {\n        return this.buttonContainer$.$$(this.locators.button)\n    }\n\n    /**\n     * Push a button with given title if it exists\n     *\n     * @param title title/text of the button\n     */\n    async pushButton (title: string): Promise<void> {\n        const buttons = await this.getButtons()\n        const titles = await Promise.all(buttons.map(async (btn) => btn.getAttribute('title')))\n        const index = titles.findIndex((value) => value === title)\n        if (index > -1) {\n            await buttons[index].click()\n        }\n    }\n\n    /**\n     * Close the dialog using the 'cross' button\n     */\n    async close (): Promise<void> {\n        return this.closeButton$.click()\n    }\n}\n"]}