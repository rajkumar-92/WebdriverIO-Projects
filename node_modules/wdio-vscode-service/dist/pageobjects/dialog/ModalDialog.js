"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ModalDialog = void 0;
const utils_1 = require("../utils");
const _1_73_0_1 = require("../../locators/1.73.0");
/**
 * Page Object for Custom Style Modal Dialogs (non-native)
 *
 * @category Dialog
 */
let ModalDialog = class ModalDialog extends utils_1.BasePage {
    constructor() {
        super(...arguments);
        /**
         * @private
         */
        this.locatorKey = 'Dialog';
    }
    /**
     * Get the dialog's message in a Promise
     */
    async getMessage() {
        return this.message$.getText();
    }
    /**
     * Get the details message in a Promise
     */
    async getDetails() {
        return this.details$.getText();
    }
    /**
     * Get the list of buttons as WebElements
     *
     * @returns Promise resolving to Array of WebElement items representing the buttons
     */
    async getButtons() {
        return this.buttonContainer$.$$(this.locators.button);
    }
    /**
     * Push a button with given title if it exists
     *
     * @param title title/text of the button
     */
    async pushButton(title) {
        const buttons = await this.getButtons();
        const titles = await Promise.all(buttons.map(async (btn) => btn.getAttribute('title')));
        const index = titles.findIndex((value) => value === title);
        if (index > -1) {
            await buttons[index].click();
        }
    }
    /**
     * Close the dialog using the 'cross' button
     */
    async close() {
        return this.closeButton$.click();
    }
};
ModalDialog = __decorate([
    (0, utils_1.PageDecorator)(_1_73_0_1.Dialog)
], ModalDialog);
exports.ModalDialog = ModalDialog;
//# sourceMappingURL=ModalDialog.js.map