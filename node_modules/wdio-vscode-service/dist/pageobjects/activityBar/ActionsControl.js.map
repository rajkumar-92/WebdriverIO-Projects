{"version":3,"file":"ActionsControl.js","sourceRoot":"","sources":["../../../src/pageobjects/activityBar/ActionsControl.ts"],"names":[],"mappings":";;;AAAA,oCAAiD;AAIjD;;;;;;;;;;;GAWG;AACH,MAAa,cAAe,SAAQ,8BAAkD;IAAtF;;QACI;;WAEG;QACI,eAAU,GAAG,aAAsB,CAAA;IAgB9C,CAAC;IAdG;;;OAGG;IACH,KAAK,CAAC,cAAc;QAChB,OAAO,IAAI,CAAC,eAAe,EAAE,CAAA;IACjC,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,QAAQ;QACV,OAAO,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,CAAA;IAC/C,CAAC;CACJ;AApBD,wCAoBC","sourcesContent":["import { ElementWithContextMenu } from '../utils'\nimport { ActivityBar as ActivityBarLocators } from '../../locators/1.73.0'\nimport type { ContextMenu } from '../menu/ContextMenu'\n\n/**\n * Page object representing the global action controls on the bottom of the action bar.\n *\n * ```ts\n * const workbench = await browser.getWorkbench()\n * const actionControl = await workbench.getActivityBar().getGlobalActions()\n * console.log(await Promise.all(actionControl.map(ac => ac.getTitle())))\n * // returns: [ 'Accounts', 'Manage' ]\n * ```\n *\n * @category ActivityBar\n */\nexport class ActionsControl extends ElementWithContextMenu<typeof ActivityBarLocators> {\n    /**\n     * @private\n     */\n    public locatorKey = 'ActivityBar' as const\n\n    /**\n     * Open the context menu bound to this global action\n     * @returns Promise resolving to ContextMenu object representing the action's menu\n     */\n    async openActionMenu (): Promise<ContextMenu> {\n        return this.openContextMenu()\n    }\n\n    /**\n     * Returns the title of the associated action\n     */\n    async getTitle (): Promise<string> {\n        return this.elem.getAttribute('aria-label')\n    }\n}\n"]}