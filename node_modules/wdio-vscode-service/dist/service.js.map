{"version":3,"file":"service.js","sourceRoot":"","sources":["../src/service.ts"],"names":[],"mappings":"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","sourcesContent":["import fs from 'fs/promises'\nimport util from 'util'\nimport path from 'path'\nimport slash from 'slash'\nimport tmp from 'tmp-promise'\nimport logger from '@wdio/logger'\nimport getPort from 'get-port'\nimport decamelize from 'decamelize'\nimport { WebSocketServer, WebSocket } from 'ws'\nimport { Services, Options } from '@wdio/types'\nimport { SevereServiceError } from 'webdriverio'\n\nimport { Workbench } from './pageobjects'\nimport { getLocators, getValueSuffix, isVSCodeCapability } from './utils'\nimport {\n    VSCODE_APPLICATION_ARGS, DEFAULT_VSCODE_SETTINGS, DEFAULT_PROXY_OPTIONS,\n    SETTINGS_KEY, VSCODE_CAPABILITY_KEY, DEFAULT_VSCODE_WEB_PORT\n} from './constants'\nimport type {\n    VSCodeCapabilities, WDIOLogs, ArgsParams, RemoteCommand, RemoteResponse,\n    PendingMessageResolver, VSCodeProxyOptions, VSCodeOptions\n} from './types'\n\nconst log = logger('wdio-vscode-service')\n\nexport default class VSCodeWorkerService implements Services.ServiceInstance {\n    private _browser?: WebdriverIO.Browser\n    private _wss?: WebSocketServer\n    private _messageId = 0\n    private _pendingMessages = new Map<number, PendingMessageResolver>()\n    private _promisedSocket?: Promise<WebSocket>\n    private _proxyOptions: VSCodeProxyOptions\n    private _vscodeOptions: VSCodeOptions\n    private _isWebSession = false\n\n    constructor (_: never, private _capabilities: VSCodeCapabilities) {\n        this._vscodeOptions = this._capabilities[VSCODE_CAPABILITY_KEY] || <VSCodeOptions>{}\n        this._proxyOptions = { ...DEFAULT_PROXY_OPTIONS, ...this._vscodeOptions.vscodeProxyOptions }\n    }\n\n    private _handleIncoming (data: Buffer) {\n        try {\n            const message = JSON.parse(data.toString('utf-8')) as RemoteResponse\n            const resolver = this._pendingMessages.get(message.id)\n\n            if (!resolver) {\n                log.error(`Couldn't find remote message resolver with id ${message.id}`)\n                return\n            }\n\n            resolver(message.error, message.result)\n            return\n        } catch (err: any) {\n            log.error(`Error parsing remote response: ${err.message}`)\n        }\n    }\n\n    async beforeSession (option: Options.Testrunner, capabilities: VSCodeCapabilities) {\n        this._isWebSession = capabilities.browserName !== 'vscode'\n\n        /**\n         * only run setup for VSCode capabilities\n         */\n        if (!isVSCodeCapability(capabilities)) {\n            return\n        }\n\n        /**\n         * if we run tests for a web extension\n         */\n        if (this._isWebSession) {\n            const serverOptions = capabilities[VSCODE_CAPABILITY_KEY]?.serverOptions\n            option.baseUrl = util.format(\n                'http://%s:%s',\n                serverOptions?.hostname || 'localhost',\n                (serverOptions?.port || DEFAULT_VSCODE_WEB_PORT as number).toString()\n            )\n            log.info(`Run VSCode as web app on ${option.baseUrl}`)\n            return\n        }\n\n        const customArgs: ArgsParams = { ...VSCODE_APPLICATION_ARGS }\n        const storagePath = await tmp.dir()\n        const userSettingsPath = path.join(storagePath.path, 'settings', 'User')\n        const userSettings: Record<string, any> = {\n            ...DEFAULT_VSCODE_SETTINGS,\n            ...(this._vscodeOptions.userSettings || {})\n        }\n\n        if (!this._vscodeOptions.extensionPath) {\n            throw new SevereServiceError('No extension path provided')\n        }\n\n        if (this._proxyOptions.enable) {\n            const port = await getPort({ port: this._proxyOptions.port })\n            userSettings[SETTINGS_KEY].port = port\n            log.info(`Start VSCode proxy server on port ${port}`)\n            const wss = this._wss = new WebSocketServer({ port })\n            this._promisedSocket = new Promise((resolve, reject) => {\n                const socketTimeout = setTimeout(\n                    () => reject(new Error('Connection timeout exceeded')),\n                    this._proxyOptions.connectionTimeout\n                )\n                wss.on('connection', (socket) => {\n                    log.info('Connected with VSCode workbench')\n                    resolve(socket)\n                    clearTimeout(socketTimeout)\n                    socket.on('message', this._handleIncoming.bind(this))\n                })\n            })\n        }\n\n        customArgs.extensionDevelopmentPath = slash(this._vscodeOptions.extensionPath)\n        customArgs.extensionTestsPath = slash(path.join(__dirname, 'proxy', 'index.js'))\n        customArgs.userDataDir = slash(path.join(storagePath.path, 'settings'))\n        customArgs.extensionsDir = slash(path.join(storagePath.path, 'extensions'))\n        customArgs.vscodeBinaryPath = this._vscodeOptions.binary as string\n\n        log.info(`Setting up VSCode directory at ${userSettingsPath}`)\n        await fs.mkdir(userSettingsPath, { recursive: true })\n        await fs.writeFile(\n            path.join(userSettingsPath, 'settings.json'),\n            JSON.stringify(userSettings),\n            'utf-8'\n        )\n\n        if (this._vscodeOptions.workspacePath) {\n            customArgs.folderUri = `file:${slash(this._vscodeOptions.workspacePath)}`\n        }\n\n        if (this._vscodeOptions.filePath) {\n            customArgs.fileUri = `file:${slash(this._vscodeOptions.filePath)}`\n        }\n\n        if (this._vscodeOptions.verboseLogging) {\n            customArgs.verbose = true\n            customArgs.logExtensionHostCommunication = true\n        }\n\n        const binary = path.join(__dirname, 'chromium', `index.${process.platform === 'win32' ? 'exe' : 'js'}`)\n        const args = Object.entries({ ...customArgs, ...this._vscodeOptions.vscodeArgs }).reduce(\n            (prev, [key, value]) => [\n                ...prev,\n                `--${decamelize(key, { separator: '-' })}${getValueSuffix(value)}`\n            ],\n            [] as string[]\n        )\n\n        /**\n         * need to rename capability back to Chrome otherwise Chromedriver\n         * won't recognise this capability\n         */\n        capabilities.browserName = 'chrome'\n        capabilities['goog:chromeOptions'] = { binary, args, windowTypes: ['webview'] }\n        log.info(`Start VSCode: ${binary} ${args.join(' ')}`)\n    }\n\n    async before (capabilities: VSCodeCapabilities, __: never, browser: WebdriverIO.Browser) {\n        /**\n         * only run setup for VSCode capabilities\n         */\n        if (!isVSCodeCapability(capabilities)) {\n            return\n        }\n\n        /**\n         * open VSCode web when testing web extensions\n         */\n        if (this._isWebSession) {\n            await browser.url('/')\n        }\n\n        this._browser = browser\n        const locators = await getLocators(capabilities.browserVersion || 'insiders')\n        const workbenchPO = new Workbench(locators)\n        this._browser.addCommand('getWorkbench', () => workbenchPO.wait())\n        this._browser.addCommand('executeWorkbench', this._executeVSCode.bind(this))\n        this._browser.addCommand('getVSCodeVersion', () => capabilities.browserVersion)\n        this._browser.addCommand('isVSCodeWebSession', () => this._isWebSession)\n        this._browser.addCommand('getVSCodeChannel', () => (\n            capabilities.browserVersion === 'insiders' ? 'insiders' : 'vscode'\n        ))\n        await workbenchPO.elem.waitForExist()\n\n        /**\n         * VSCode in the browser doesn't allow to have a file directly opened,\n         * therefore we need to open it automatically\n         */\n        if (this._isWebSession && this._vscodeOptions.filePath && this._vscodeOptions.workspacePath) {\n            const sections = this._vscodeOptions.filePath.replace(this._vscodeOptions.workspacePath, '')\n                .split(path.sep).filter(Boolean)\n            const fileExplorer = await browser.$('.explorer-folders-view')\n            while (sections.length > 0) {\n                const entry = sections.shift()\n                await fileExplorer.$(`span=${entry}`).click()\n            }\n        }\n    }\n\n    async after () {\n        if (\n            !isVSCodeCapability(this._capabilities)\n            || !this._browser\n            || !this._capabilities[VSCODE_CAPABILITY_KEY]?.verboseLogging\n        ) {\n            return\n        }\n\n        const logs = await this._browser.getLogs('browser').then(\n            (res) => res as WDIOLogs[],\n            (err) => err as Error\n        )\n\n        if (logs instanceof Error) {\n            return\n        }\n\n        for (const l of logs) {\n            log.info(\n                `[${(new Date(l.timestamp)).toISOString()}]`\n                + ` - ${l.source} - ${l.message}`\n            )\n        }\n\n        if (this._wss) {\n            this._wss.close()\n        }\n    }\n\n    private async _executeVSCode (fn: Function | string, ...params: any[]) {\n        if (!this._promisedSocket || this._isWebSession) {\n            const errorMessage = this._isWebSession\n                ? 'not support when testing web extensions'\n                : 'see \"vscodeProxyOptions\" option in service docs'\n            throw new Error(`VSCode API proxy not enabled, ${errorMessage}`)\n        }\n\n        const socket = await this._promisedSocket\n\n        const proxyFn = typeof fn === 'function'\n            ? fn.toString()\n            : fn\n\n        socket.send(JSON.stringify(<RemoteCommand>{\n            id: this._messageId,\n            fn: proxyFn,\n            params\n        }))\n\n        const returnVal = new Promise((resolve, reject) => {\n            const cmdTimeout = setTimeout(\n                () => reject(new Error('Remote command timeout exceeded')),\n                this._proxyOptions.commandTimeout\n            )\n            this._pendingMessages.set(this._messageId, (error: string | undefined, result: any) => {\n                clearTimeout(cmdTimeout)\n                if (error) {\n                    reject(new Error(error))\n                    return\n                }\n                resolve(result)\n            })\n        })\n        this._messageId += 1\n        return returnVal\n    }\n}\n\ninterface VSCodeCommands {\n    getWorkbench: () => Promise<Workbench>\n    // Todo(Christian): properly type VSCode object here\n    executeWorkbench: <T>(fn: (vscode: any, ...params: any[]) => T, ...params: any[]) => Promise<T>\n    getVSCodeVersion: () => Promise<string>\n    getVSCodeChannel: () => Promise<string>\n    isVSCodeWebSession: () => Promise<boolean>\n}\n\ndeclare global {\n    namespace WebdriverIO {\n        interface Browser extends VSCodeCommands {}\n    }\n\n    namespace WebdriverIOAsync {\n        interface Browser extends VSCodeCommands {}\n        interface MultiRemoteBrowser extends VSCodeCommands { }\n    }\n}\n"]}