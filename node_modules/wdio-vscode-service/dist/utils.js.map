{"version":3,"file":"utils.js","sourceRoot":"","sources":["../src/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import fs from 'fs/promises'\nimport path from 'path'\nimport child_process from 'child_process'\nimport type { Dirent, Stats } from 'fs'\n\nimport { VSCODE_CAPABILITY_KEY } from './constants'\nimport type { VSCodeLocatorMap } from './pageobjects/utils'\nimport type { VSCodeCapabilities } from './types'\n\nfunction isEmulatedRosettaEnvironment () {\n    const archName = child_process.spawnSync('uname', ['-m']).stdout.toString().trim()\n\n    if (archName !== 'x86_64') {\n        return false\n    }\n\n    const processTranslated = child_process.spawnSync('sysctl', ['-in', 'sysctl.proc_translated'])\n        .stdout.toString()\n        .trim()\n    return processTranslated === '1'\n}\n\nfunction getMacOsRealArch () {\n    if (process.arch === 'arm64' || isEmulatedRosettaEnvironment()) {\n        return 'mac64_m1'\n    }\n\n    if (process.arch === 'x64') {\n        return 'mac64'\n    }\n\n    return null\n}\n\nexport function validatePlatform () {\n    if (process.platform === 'linux') {\n        if (process.arch === 'arm64' || process.arch === 'x64') {\n            return `${process.platform}64`\n        }\n\n        throw new Error('Only Linux 64 bits supported.')\n    }\n\n    if (process.platform === 'darwin' || process.platform === 'freebsd') {\n        const osxPlatform = getMacOsRealArch()\n\n        if (!osxPlatform) {\n            throw new Error('Only Mac 64 bits supported.')\n        }\n\n        return osxPlatform\n    }\n\n    if (process.platform !== 'win32') {\n        throw new Error(`Unexpected platform or architecture: ${process.platform}, ${process.arch}`)\n    }\n\n    return process.platform\n}\n\nexport async function getLocators (version: string): Promise<VSCodeLocatorMap> {\n    if (version === 'insiders') {\n        return import('./locators/insiders') as any as Promise<VSCodeLocatorMap>\n    }\n\n    const files = (await fs.readdir(path.join(__dirname, 'locators'), { encoding: 'utf-8' }))\n        .filter((filename) => filename.endsWith('.js') && !filename.endsWith('.d.ts'))\n        .map((filename) => filename.slice(0, -3))\n\n    const [major, minor] = version.split('.')\n    const sanitizedVersion = `${major}.${minor}.0`\n\n    const locatorFile = files.find((f, i) => (\n        f === sanitizedVersion\n        || (files[i + 1] && files[i + 1] > sanitizedVersion)\n    )) || files[files.length - 1]\n    return import(`./locators/${locatorFile}`) as Promise<VSCodeLocatorMap>\n}\n\nexport function fileExist (filepath: string) {\n    return fs.access(filepath).then(() => true, () => false)\n}\n\nexport async function directoryExists (directoryPath: string) {\n    try {\n        const stats = await fs.stat(directoryPath)\n        return stats.isDirectory()\n    } catch {\n        return false\n    }\n}\n\nexport function getValueSuffix (value: string | boolean) {\n    if (typeof value === 'boolean' && value) {\n        return ''\n    }\n    return `=${value}`\n}\n\nexport function isVSCodeCapability (cap: VSCodeCapabilities) {\n    return Boolean(cap[VSCODE_CAPABILITY_KEY])\n}\n\nenum FileType {\n    Unknown = 0,\n    File = 1,\n    Directory = 2,\n    SymbolicLink = 64\n}\n\nexport function getFileType (stats: Stats | Dirent) {\n    if (stats.isFile()) {\n        return FileType.File\n    }\n\n    if (stats.isDirectory()) {\n        return FileType.Directory\n    }\n\n    if (stats.isSymbolicLink()) {\n        return FileType.SymbolicLink\n    }\n\n    return FileType.Unknown\n}\n\nexport const isMultiremote = (obj: any) => typeof obj === 'object' && !Array.isArray(obj)\nexport const isChrome = (cap: VSCodeCapabilities) => cap.browserName && cap.browserName.toLowerCase() === 'chrome'\n"]}