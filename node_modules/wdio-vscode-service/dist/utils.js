"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isChrome = exports.isMultiremote = exports.getFileType = exports.isVSCodeCapability = exports.getValueSuffix = exports.directoryExists = exports.fileExist = exports.getLocators = exports.validatePlatform = void 0;
const promises_1 = __importDefault(require("fs/promises"));
const path_1 = __importDefault(require("path"));
const child_process_1 = __importDefault(require("child_process"));
const constants_1 = require("./constants");
function isEmulatedRosettaEnvironment() {
    const archName = child_process_1.default.spawnSync('uname', ['-m']).stdout.toString().trim();
    if (archName !== 'x86_64') {
        return false;
    }
    const processTranslated = child_process_1.default.spawnSync('sysctl', ['-in', 'sysctl.proc_translated'])
        .stdout.toString()
        .trim();
    return processTranslated === '1';
}
function getMacOsRealArch() {
    if (process.arch === 'arm64' || isEmulatedRosettaEnvironment()) {
        return 'mac64_m1';
    }
    if (process.arch === 'x64') {
        return 'mac64';
    }
    return null;
}
function validatePlatform() {
    if (process.platform === 'linux') {
        if (process.arch === 'arm64' || process.arch === 'x64') {
            return `${process.platform}64`;
        }
        throw new Error('Only Linux 64 bits supported.');
    }
    if (process.platform === 'darwin' || process.platform === 'freebsd') {
        const osxPlatform = getMacOsRealArch();
        if (!osxPlatform) {
            throw new Error('Only Mac 64 bits supported.');
        }
        return osxPlatform;
    }
    if (process.platform !== 'win32') {
        throw new Error(`Unexpected platform or architecture: ${process.platform}, ${process.arch}`);
    }
    return process.platform;
}
exports.validatePlatform = validatePlatform;
async function getLocators(version) {
    if (version === 'insiders') {
        return Promise.resolve().then(() => __importStar(require('./locators/insiders')));
    }
    const files = (await promises_1.default.readdir(path_1.default.join(__dirname, 'locators'), { encoding: 'utf-8' }))
        .filter((filename) => filename.endsWith('.js') && !filename.endsWith('.d.ts'))
        .map((filename) => filename.slice(0, -3));
    const [major, minor] = version.split('.');
    const sanitizedVersion = `${major}.${minor}.0`;
    const locatorFile = files.find((f, i) => (f === sanitizedVersion
        || (files[i + 1] && files[i + 1] > sanitizedVersion))) || files[files.length - 1];
    return Promise.resolve().then(() => __importStar(require(`./locators/${locatorFile}`)));
}
exports.getLocators = getLocators;
function fileExist(filepath) {
    return promises_1.default.access(filepath).then(() => true, () => false);
}
exports.fileExist = fileExist;
async function directoryExists(directoryPath) {
    try {
        const stats = await promises_1.default.stat(directoryPath);
        return stats.isDirectory();
    }
    catch {
        return false;
    }
}
exports.directoryExists = directoryExists;
function getValueSuffix(value) {
    if (typeof value === 'boolean' && value) {
        return '';
    }
    return `=${value}`;
}
exports.getValueSuffix = getValueSuffix;
function isVSCodeCapability(cap) {
    return Boolean(cap[constants_1.VSCODE_CAPABILITY_KEY]);
}
exports.isVSCodeCapability = isVSCodeCapability;
var FileType;
(function (FileType) {
    FileType[FileType["Unknown"] = 0] = "Unknown";
    FileType[FileType["File"] = 1] = "File";
    FileType[FileType["Directory"] = 2] = "Directory";
    FileType[FileType["SymbolicLink"] = 64] = "SymbolicLink";
})(FileType || (FileType = {}));
function getFileType(stats) {
    if (stats.isFile()) {
        return FileType.File;
    }
    if (stats.isDirectory()) {
        return FileType.Directory;
    }
    if (stats.isSymbolicLink()) {
        return FileType.SymbolicLink;
    }
    return FileType.Unknown;
}
exports.getFileType = getFileType;
const isMultiremote = (obj) => typeof obj === 'object' && !Array.isArray(obj);
exports.isMultiremote = isMultiremote;
const isChrome = (cap) => cap.browserName && cap.browserName.toLowerCase() === 'chrome';
exports.isChrome = isChrome;
//# sourceMappingURL=utils.js.map