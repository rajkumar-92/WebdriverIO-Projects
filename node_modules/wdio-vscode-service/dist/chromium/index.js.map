{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/chromium/index.ts"],"names":[],"mappings":";;;;;;AAEA,wCAAwC;AACxC,kEAAwC;AACxC,gEAAqC;AAErC;;;;;GAKG;AACH,SAAS,GAAG,CAAE,CAAiB,EAAE,QAAsC;IACnE,OAAO,CAAC,IAAI,CAAC,8BAA8B,CAAC,CAAA,CAAC,iCAAiC;IAE9E,CAAC,CAAC,EAAE,CACA,mBAAmB;IACnB,0BAA0B;IAC1B,sCAAsC;IACtC,CAAC,GAAG,EAAE,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,+BAA+B,GAAG,CAAC,KAAK,EAAE,CAAC,CACpE,CAAA;IAED,gEAAgE;IAChE,MAAM,EAAE,CAAC,EAAE,gBAAgB,EAAE,GAAG,IAAI,EAAE,GAAG,IAAA,sBAAU,EAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;QACvE,aAAa,EAAE,EAAE,sBAAsB,EAAE,IAAI,EAAE,kBAAkB,EAAE,KAAK,EAAE;KAC7E,CAAC,CAAA;IAEF,MAAM,UAAU,GAAG,IAAI,CAAC,gBAA0B,CAAA;IAClD,IAAI,CAAC,UAAU,EAAE;QACb,MAAM,IAAI,KAAK,CAAC,+CAA+C,CAAC,CAAA;KACnE;IAED,MAAM,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE;QACrD,IAAI,OAAO,KAAK,KAAK,SAAS,IAAI,KAAK,EAAE;YACrC,OAAO,KAAK,GAAG,EAAE,CAAA;SACpB;QACD,OAAO,KAAK,GAAG,IAAI,KAAK,EAAE,CAAA;IAC9B,CAAC,CAAC,CAAA;IACF,MAAM,IAAI,GAAa,CAAC,GAAG,MAAM,EAAE,GAAG,gBAAgB,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAA;IAEnE,sCAAsC;IACtC,OAAO,CAAC,IAAI,CAAC,kCAAkC,UAAU,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAA;IAC5E,MAAM,EAAE,GAAG,QAAQ,CAAC,UAAU,EAAE,IAAI,EAAE;QAClC,GAAG,EAAE,CAAC,CAAC,GAAG;QACV,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE;KACf,CAAC,CAAA;IAEF,EAAE,CAAC,MAAM,EAAE,EAAE,CACT,MAAM;IACN,sCAAsC;IACtC,CAAC,GAAG,EAAE,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,gCAAgC,GAAG,EAAE,CAAC,CAC9D,CAAA;IACD,EAAE,CAAC,MAAM,EAAE,EAAE,CACT,MAAM;IACN,sCAAsC;IACtC,CAAC,GAAG,EAAE,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,gCAAgC,GAAG,EAAE,CAAC,CAC9D,CAAA;IAED,OAAO,EAAE,CAAA;AACb,CAAC;AAED,wBAAwB;AACxB,IAAI,OAAO,CAAC,IAAI,KAAK,MAAM,EAAE;IACzB,GAAG,CAAC,OAAO,EAAE,uBAAY,CAAC,QAAQ,CAAC,CAAA;CACtC;KAAM;IACH,MAAM,CAAC,OAAO,GAAG,GAAG,CAAA;CACvB","sourcesContent":["#!/usr/bin/env node\n\n// eslint-disable-next-line node/shebang\nimport childProcess from 'child_process'\nimport argvParser from 'yargs-parser'\n\n/**\n * Chrome wrapper run method\n * @param  {Object} p         Node.js global variable\n * @param  {Object} execFile  child_process.execFile function\n * @return {Object}           child process running chrome\n */\nfunction run (p: NodeJS.Process, execFile: typeof childProcess.execFile) {\n    console.info('[FAKE VSCode Binary] init...') // eslint-disable-line no-console\n\n    p.on(\n        'uncaughtException',\n        /* istanbul ignore next */\n        // eslint-disable-next-line no-console\n        (err) => console.info(`[FAKE VSCode Binary] Error: ${err.stack}`)\n    )\n\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const { _: positionalParams, ...argv } = argvParser(process.argv.slice(2), {\n        configuration: { 'camel-case-expansion': true, 'boolean-negation': false }\n    })\n\n    const binaryPath = argv.vscodeBinaryPath as string\n    if (!binaryPath) {\n        throw new Error('Missing parameter \"--vscode-binary-path=/...\"')\n    }\n\n    const params = Object.entries(argv).map(([key, value]) => {\n        if (typeof value === 'boolean' && value) {\n            return `--${key}`\n        }\n        return `--${key}=${value}`\n    })\n    const args: string[] = [...params, ...positionalParams.map(String)]\n\n    // eslint-disable-next-line no-console\n    console.info(`[FAKE VSCode Binary] starting: ${binaryPath}`, args.join(' '))\n    const cp = execFile(binaryPath, args, {\n        env: p.env,\n        cwd: p.cwd()\n    })\n\n    cp.stderr?.on(\n        'data',\n        // eslint-disable-next-line no-console\n        (msg) => console.log(`[FAKE VSCode Binary] STDERR: ${msg}`)\n    )\n    cp.stdout?.on(\n        'data',\n        // eslint-disable-next-line no-console\n        (msg) => console.log(`[FAKE VSCode Binary] STDOUT: ${msg}`)\n    )\n\n    return cp\n}\n\n/* istanbul ignore if */\nif (require.main === module) {\n    run(process, childProcess.execFile)\n} else {\n    module.exports = run\n}\n"]}