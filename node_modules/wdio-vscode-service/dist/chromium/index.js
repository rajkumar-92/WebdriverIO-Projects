#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// eslint-disable-next-line node/shebang
const child_process_1 = __importDefault(require("child_process"));
const yargs_parser_1 = __importDefault(require("yargs-parser"));
/**
 * Chrome wrapper run method
 * @param  {Object} p         Node.js global variable
 * @param  {Object} execFile  child_process.execFile function
 * @return {Object}           child process running chrome
 */
function run(p, execFile) {
    console.info('[FAKE VSCode Binary] init...'); // eslint-disable-line no-console
    p.on('uncaughtException', 
    /* istanbul ignore next */
    // eslint-disable-next-line no-console
    (err) => console.info(`[FAKE VSCode Binary] Error: ${err.stack}`));
    // eslint-disable-next-line @typescript-eslint/naming-convention
    const { _: positionalParams, ...argv } = (0, yargs_parser_1.default)(process.argv.slice(2), {
        configuration: { 'camel-case-expansion': true, 'boolean-negation': false }
    });
    const binaryPath = argv.vscodeBinaryPath;
    if (!binaryPath) {
        throw new Error('Missing parameter "--vscode-binary-path=/..."');
    }
    const params = Object.entries(argv).map(([key, value]) => {
        if (typeof value === 'boolean' && value) {
            return `--${key}`;
        }
        return `--${key}=${value}`;
    });
    const args = [...params, ...positionalParams.map(String)];
    // eslint-disable-next-line no-console
    console.info(`[FAKE VSCode Binary] starting: ${binaryPath}`, args.join(' '));
    const cp = execFile(binaryPath, args, {
        env: p.env,
        cwd: p.cwd()
    });
    cp.stderr?.on('data', 
    // eslint-disable-next-line no-console
    (msg) => console.log(`[FAKE VSCode Binary] STDERR: ${msg}`));
    cp.stdout?.on('data', 
    // eslint-disable-next-line no-console
    (msg) => console.log(`[FAKE VSCode Binary] STDOUT: ${msg}`));
    return cp;
}
/* istanbul ignore if */
if (require.main === module) {
    run(process, child_process_1.default.execFile);
}
else {
    module.exports = run;
}
//# sourceMappingURL=index.js.map